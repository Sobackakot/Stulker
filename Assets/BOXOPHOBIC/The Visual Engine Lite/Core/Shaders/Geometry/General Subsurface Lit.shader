// Made with Amplify Shader Editor v1.9.6.3
// Available at the Unity Asset Store - http://u3d.as/y3X 
Shader "BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit (Lite)"
{
	Properties
	{
		[HideInInspector] _AlphaCutoff("Alpha Cutoff ", Range(0, 1)) = 0.5
		[HideInInspector]_motion_highlight_color("_motion_highlight_color", Vector) = (0,0,0,0)
		[HideInInspector]_IsVersion("_IsVersion", Float) = 2030
		[HideInInspector]_IsTVEShader("_IsTVEShader", Float) = 1
		[HideInInspector]_IsShared("_IsShared", Float) = 0
		[HideInInspector]_IsIdentifier("_IsIdentifier", Float) = 0
		[HideInInspector]_IsCollected("_IsCollected", Float) = 0
		[HideInInspector]_IsConverted("_IsConverted", Float) = 0
		[HideInInspector]_IsCustomShader("_IsCustomShader", Float) = 0
		[HideInInspector]_HasDefaultTextures("_HasDefaultTextures", Float) = 0
		[HideInInspector]_MainTex("Legacy MainTex", 2D) = "white" {}
		[HideInInspector]_BumpMap("Legacy BumpMap", 2D) = "white" {}
		[HideInInspector]_Cutoff("Legacy Cutoff", Float) = 0.5
		[HideInInspector]_Color("Legacy Color", Color) = (0,0,0,0)
		[StyledCategory(Render Settings, true, 0, 10)]_RenderCategory("[ Render Category ]", Float) = 1
		[Enum(Opaque,0,Transparent,1)]_RenderMode("Render Mode", Float) = 0
		[Enum(Off,0,On,1)]_RenderZWrite("Render ZWrite", Float) = 1
		[Enum(Both,0,Back,1,Front,2)]_RenderCull("Render Faces", Float) = 2
		[HideInInspector]_render_normal("_render_normal", Vector) = (1,1,1,0)
		[HideInInspector]_RenderQueue("Render Queue", Float) = 0
		[HideInInspector]_RenderPriority("Render Priority", Float) = 0
		[HideInInspector]_RenderBakeGI("Render BakeGI", Float) = 0
		[Enum(Off,0,On,1)]_RenderSSR("Render SSR", Float) = 0
		[Enum(Off,0,On,1)]_RenderDecals("Render Decals", Float) = 0
		[Enum(Auto,0,Off,1,On,2)]_RenderMotion("Render Motion", Float) = 0
		[Enum(Flip,0,Mirror,1,Same,2)]_RenderNormal("Render Normals", Float) = 0
		[Enum(Off,0,On,1)]_RenderShadow("Render Shadows", Float) = 1
		[Enum(Default,0,Point ,1,Low,2,Medium,3,High,4)]_RenderFilter("Render Filtering", Float) = 0
		[Enum(Off,0,On,1)]_RenderClip("Render Clipping", Float) = 0
		[StyledSpace(10)]_RenderEnd("[ Render End ]", Float) = 1
		[StyledCategory(Noise Settings, true, 0, 10)]_NoiseCategory("[ Noise Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_NoiseTex3D("Noise Mask 3D", 3D) = "white" {}
		[StyledSpace(10)]_NoiseEnd("[ Noise End ]", Float) = 1
		[StyledCategory(Object Settings, true, 0, 10)]_ObjectCategory("[ Object Category ]", Float) = 1
		[Enum(Legacy,0,Standard,1)]_ObjectModelMode("Object Model Mode", Float) = 1
		[Enum(Off,0,Baked,1,Procedural,2)]_ObjectPivotMode("Object Pivots Mode", Float) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ObjectPhaseMode("Object Phase Mask", Float) = 0
		_ObjectHeightValue("Object Height Value", Range( 0 , 40)) = 1
		_ObjectRadiusValue("Object Radius Value", Range( 0 , 40)) = 1
		[HideInInspector]_object_phase_mode("_object_phase_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_ObjectEnd("[ Object End ]", Float) = 1
		[StyledCategory(Global Settings, true, 0, 10)]_GlobalCategory("[ Global Category ]", Float) = 1
		[StyledMessage(Warning, Global Elements and Layers are only available with The Visual Engine Core package., 0, 0)]_GlobalLiteInfo("# Global Lite Info", Float) = 0
		[StyledSpace(10)]_GlobalEnd("[ Global End ]", Float) = 1
		[StyledCategory(Main Settings, true, 0, 10)]_MainCategory("[Main Category ]", Float) = 1
		[StyledTextureSingleLine]_MainAlbedoTex("Main Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_MainNormalTex("Main Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_MainShaderTex("Main Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_MainSampleMode("Main Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_MainCoordMode("Main UV Mode", Float) = 0
		[StyledVector(9)]_MainCoordValue("Main UV Value", Vector) = (1,1,0,0)
		[HideInInspector]_main_coord_value("_main_coord_value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_MainColorMode("Main Color", Float) = 0
		[HDR]_MainColor("Main Color", Color) = (1,1,1,1)
		[HDR]_MainColorTwo("Main ColorB", Color) = (1,1,1,1)
		_MainAlphaClipValue("Main Alpha", Range( 0 , 1)) = 0.5
		_MainAlbedoValue("Main Albedo", Range( 0 , 1)) = 1
		_MainNormalValue("Main Normal", Range( -8 , 8)) = 1
		_MainMetallicValue("Main Metallic", Range( 0 , 1)) = 0
		_MainOcclusionValue("Main Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_MainMultiRemap("Main Multi Mask", Vector) = (0,0,0,0)
		_MainSmoothnessValue("Main Smoothness", Range( 0 , 1)) = 0
		[StyledSpace(10)]_MainEnd("[Main End ]", Float) = 1
		[StyledCategory(Layer Settings, true, 0, 10)]_LayerCategory("[ Layer Category ]", Float) = 1
		_SecondIntensityValue("Layer Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_SecondBakeMode("Layer Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_SecondAlbedoTex("Layer Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_SecondNormalTex("Layer Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_SecondShaderTex("Layer Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_SecondSampleMode("Layer Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondCoordMode("Layer UV Mode", Float) = 0
		[StyledVector(9)]_SecondCoordValue("Layer UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_SecondColorMode("Layer Color", Float) = 0
		[HDR]_SecondColor("Layer Color", Color) = (1,1,1,1)
		[HDR]_SecondColorTwo("Layer ColorB", Color) = (1,1,1,1)
		_SecondAlphaClipValue("Layer Alpha", Range( 0 , 1)) = 0.5
		_SecondAlbedoValue("Layer Albedo", Range( 0 , 1)) = 1
		_SecondNormalValue("Layer Normal", Range( -8 , 8)) = 1
		_SecondMetallicValue("Layer Metallic", Range( 0 , 1)) = 0
		_SecondOcclusionValue("Layer Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondMultiRemap("Layer Multi Mask", Vector) = (0,0,0,0)
		_SecondSmoothnessValue("Layer Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_SecondBlendIntensityValue("Layer Blend Intensity", Range( 0 , 1)) = 1
		_SecondBlendAlbedoValue("Layer Blend Albedos", Range( 0 , 1)) = 0
		_SecondBlendNormalValue("Layer Blend Normals", Range( 0 , 1)) = 0
		_SecondBlendShaderValue("Layer Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_SecondMaskTex("Layer Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_SecondMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_SecondMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_SecondMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_SecondMaskValue("Layer TexB Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_SecondMaskRemap("Layer TexB Mask", Vector) = (0,1,0,0)
		_SecondProjValue("Layer ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_SecondProjRemap("Layer ProjY Mask", Vector) = (0,1,0,0)
		_SecondMeshValue("Layer Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_SecondMeshMode("Layer Mesh Mask", Float) = 2
		[StyledRemapSlider]_SecondMeshRemap("Layer Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_SecondBlendRemap("Layer Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_SecondElementMode("Use Coat Globals / Elements", Float) = 0
		[StyledSpace(10)]_LayerEnd("[ Layer End ]", Float) = 1
		[HideInInspector]_second_coord_value("_second_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_second_vert_mode("_second_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_second_mask_coord_value("_second_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Detail Settings, true, 0, 10)]_DetailCategory("[ Detail Category ]", Float) = 1
		_ThirdIntensityValue("Detail Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_ThirdBakeMode("Detail Baking", Float) = 1
		[Space(10)][StyledTextureSingleLine]_ThirdAlbedoTex("Detail Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_ThirdNormalTex("Detail Normal", 2D) = "bump" {}
		[StyledTextureSingleLine]_ThirdShaderTex("Detail Shader", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3,Stochastic,4,Stochastic Triplanar,5)][Space(10)]_ThirdSampleMode("Detail Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdCoordMode("Detail UV Mode", Float) = 0
		[StyledVector(9)]_ThirdCoordValue("Detail UV Value", Vector) = (1,1,0,0)
		[Enum(Constant,0,Dual Colors,1)]_ThirdColorMode("Detail Color", Float) = 0
		[HDR]_ThirdColor("Detail Color", Color) = (1,1,1,1)
		[HDR]_ThirdColorTwo("Detail ColorB", Color) = (1,1,1,1)
		_ThirdAlphaClipValue("Detail Alpha", Range( 0 , 1)) = 0.5
		_ThirdAlbedoValue("Detail Albedo", Range( 0 , 1)) = 1
		_ThirdNormalValue("Detail Normal", Range( -8 , 8)) = 1
		_ThirdMetallicValue("Detail Metallic", Range( 0 , 1)) = 0
		_ThirdOcclusionValue("Detail Occlusion", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdMultiRemap("Detail Multi Mask", Vector) = (0,0,0,0)
		_ThirdSmoothnessValue("Detail Smoothness", Range( 0 , 1)) = 0
		[Space(10)]_ThirdBlendIntensityValue("Detail Blend Intensity", Range( 0 , 1)) = 1
		_ThirdBlendAlbedoValue("Detail Blend Albedos", Range( 0 , 1)) = 0
		_ThirdBlendNormalValue("Detail Blend Normals", Range( 0 , 1)) = 0
		_ThirdBlendShaderValue("Detail Blend Shaders", Range( 0 , 1)) = 0
		[Space(10)][StyledTextureSingleLine]_ThirdMaskTex("Detail Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1,Planar,2,Triplanar,3)][Space(10)]_ThirdMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_ThirdMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_ThirdMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_ThirdMaskValue("Detail TexG Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_ThirdMaskRemap("Detail TexG Mask", Vector) = (0,1,0,0)
		_ThirdProjValue("Detail ProjY Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_ThirdProjRemap("Detail ProjY Mask", Vector) = (0,1,0,0)
		_ThirdMeshValue("Detail Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_ThirdMeshMode("Detail Mesh Mask", Float) = 1
		[StyledRemapSlider]_ThirdMeshRemap("Detail Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_ThirdBlendRemap("Detail Blend Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_ThirdElementMode("Use Coat Globals / Elements", Float) = 0
		[HideInInspector]_third_coord_value("_third_coord_value", Vector) = (1,1,0,0)
		[HideInInspector]_third_vert_mode("_third_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_third_mask_coord_value("_third_mask_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_DetailEnd("[ Detail End ]", Float) = 1
		[StyledCategory(Occlusion Settings, true, 0, 10)]_OcclusionCategory("[ Occlusion Category ]", Float) = 1
		_OcclusionIntensityValue("Occlusion Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_OcclusionBakeMode("Occlusion Baking", Float) = 1
		[HDR]_OcclusionColorOne("Occlusion ColorA", Color) = (1,1,1,1)
		[HDR]_OcclusionColorTwo("Occlusion ColorB", Color) = (0.25,0.25,0.25,1)
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)][Space(10)]_OcclusionMeshMode("Occlusion Mesh Mask", Float) = 1
		[StyledRemapSlider]_OcclusionMeshRemap("Occlusion Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_OcclusionEnd("[ Occlusion End ]", Float) = 1
		[HideInInspector]_occlusion_vert_mode("_occlusion_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Gradient Settings, true, 0, 10)]_GradientCategory("[ Gradient Category ]", Float) = 1
		_GradientIntensityValue("Gradient Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Bake Settings To Impostors,1)]_GradientBakeMode("Gradient Baking", Float) = 1
		[HDR]_GradientColorOne("Gradient ColorA", Color) = (1,0.6135602,0,1)
		[HDR]_GradientColorTwo("Gradient ColorB", Color) = (0.754717,0.0389044,0.03203986,1)
		[Space(10)]_GradientMultiValue("Gradient Multi Mask", Range( 0 , 1)) = 1
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_GradientMeshMode("Gradient Mesh Mask", Float) = 3
		[StyledRemapSlider]_GradientMeshRemap("Gradient Mesh Mask", Vector) = (0,1,0,0)
		[StyledSpace(10)]_GradientEnd("[ Gradient End ]", Float) = 1
		[HideInInspector]_gradient_vert_mode("_gradient_vert_mode", Vector) = (0,0,0,0)
		[StyledCategory(Variation Settings, true, 0, 10)]_VariationCategory("[ Variation Category ]", Float) = 1
		[StyledMessage(Warning, The Variation feature is only available with The Visual Engine Core package., 0, 10)]_VariationLiteInfo("# Variation Lite Info", Float) = 0
		[StyledColoring]_VariationColoring("# Variation Coloring", Color) = (1,1,1,0.6)
		_VariationIntensityValue("Variation Intensity", Range( 0 , 1)) = 0
		[HDR]_VariationColorOne("Variation ColorA", Color) = (0.4573758,0.6226415,0.2144001,1)
		[HDR]_VariationColorTwo("Variation ColorB", Color) = (0.7450981,0.5238863,0.1098039,1)
		[Space(10)]_VariationMultiValue("Variation Multi Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_VariationNoiseRemap("Variation Noise Mask", Vector) = (0,1,0,0)
		_VariationNoiseTillingValue("Variation Noise Tilling", Range( 0 , 40)) = 1
		_VariationNoisePivotsValue1("Variation Noise Pivots", Range( 0 , 1)) = 0
		[StyledSpace(10)]_VariationEnd("[ Variation End ]", Float) = 1
		[StyledCategory(Tinting Settings, true, 0, 10)]_TintingCategory("[ Tinting Category ]", Float) = 1
		[StyledMessage(Warning, The Tinting feature is only available with The Visual Engine Core package., 0, 10)]_TintingLiteInfo("# Tinting Lite Info", Float) = 0
		[StyledColoring]_TintingColoring("# Tinting Coloring", Color) = (1,1,1,0.6)
		_TintingIntensityValue("Tinting Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_TintingBakeMode("Tinting Baking", Float) = 0
		_TintingGrayValue("Tinting Gray", Range( 0 , 1)) = 1
		[HDR][Gamma]_TintingColor("Tinting Color", Color) = (1,1,1,1)
		[StyledSpace(10)]_TintingSpace("[ Tinting Space ]", Float) = 1
		_TintingMultiValue("Tinting Multi Mask", Range( 0 , 1)) = 1
		_TintingLumaValue("Tinting Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_TintingLumaRemap("Tinting Luma Mask", Vector) = (0,1,0,0)
		_TintingMeshValue("Tinting Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_TintingMeshMode("Tinting Mesh Mask", Float) = 3
		[StyledRemapSlider]_TintingMeshRemap("Tinting Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_TintingBlendRemap("Tinting Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_TintingElementMode("Use Paint Globals / Elements", Float) = 1
		[StyledSpace(10)]_TintingEnd("[ Tinting End]", Float) = 1
		[StyledCategory(Dryness Settings, true, 0, 10)]_DrynessCategory("[ Dryness Category ]", Float) = 1
		[StyledMessage(Warning, The Dryness feature is only available with The Visual Engine Core package., 0, 10)]_DrynessLiteInfo("# Dryness Lite Info", Float) = 0
		[StyledColoring]_DrynessColoring("# Dryness Coloring", Color) = (1,1,1,0.6)
		_DrynessIntensityValue("Dryness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_DrynessBakeMode("Dryness Baking", Float) = 0
		_DrynessGrayValue("Dryness Gray", Range( 0 , 1)) = 1
		_DrynessShiftValue("Dryness Shift", Range( 0 , 1)) = 0
		[HDR][Gamma]_DrynessColor("Dryness Color", Color) = (1,0.7083712,0.495283,1)
		_DrynessSubsurfaceValue("Dryness Subsurface", Range( 0 , 1)) = 0.5
		_DrynessSmoothnessValue("Dryness Smoothness", Range( 0 , 1)) = 0.5
		[StyledSpace(10)]_DrynessSpace("[ Dryness Space ]", Float) = 1
		_DrynessMultiValue("Dryness Multi Mask", Range( 0 , 1)) = 1
		_DrynessLumaValue("Dryness Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_DrynessLumaRemap("Dryness Luma Mask", Vector) = (0,1,0,0)
		_DrynessMeshValue("Dryness Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_DrynessMeshMode("Dryness Mesh Mask", Float) = 3
		[StyledRemapSlider]_DrynessMeshRemap("Dryness Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_DrynessBlendRemap("Dryness Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_DrynessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_DrynessEnd("[ Dryness End ]", Float) = 1
		[StyledCategory(Overlay Settings, true, 0, 10)]_OverlayCategory("[ Overlay Category ]", Float) = 1
		[StyledMessage(Warning, The Overlay Glitter feature is only available with The Visual Engine Core package., 0, 10)]_OverlayLiteInfo("# Overlay Lite Info", Float) = 0
		_OverlayIntensityValue("Overlay Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_OverlayBakeMode("Overlay Baking", Float) = 0
		[Enum(Off,0,On,1)]_OverlayTextureMode("Overlay Maps", Float) = 0
		[Space(10)][StyledTextureSingleLine]_OverlayAlbedoTex("Overlay Albedo", 2D) = "white" {}
		[StyledTextureSingleLine]_OverlayNormalTex("Overlay Normal", 2D) = "bump" {}
		[Enum(Planar,0,Triplanar,1,Stochastic,2,Stochastic Triplanar,3)][Space(10)]_OverlaySampleMode("Overlay Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayCoordMode("Overlay UV Mode", Float) = 0
		[StyledVector(9)]_OverlayCoordValue("Overlay UV Value", Vector) = (1,1,0,0)
		[HDR]_OverlayColor("Overlay Color", Color) = (0.2815503,0.4009458,0.5377358,1)
		_OverlayNormalValue("Overlay Normal", Range( -8 , 8)) = 1
		_OverlaySubsurfaceValue("Overlay Subsurface", Range( 0 , 1)) = 0.5
		_OverlaySmoothnessValue("Overlay Smoothness", Range( 0 , 1)) = 0.5
		[StyledColoring]_OverlayColoringOn("# Overlay Coloring On", Color) = (1,1,1,0.6)
		[Space(10)][StyledTextureSingleLine]_OverlayGlitterTex("Overlay Glitter", 2D) = "black" {}
		[Space(10)]_OverlayGlitterIntensityValue("Overlay Glitter Intensity", Range( 0 , 1)) = 1
		[HDR]_OverlayGlitterColor("Overlay Glitter Color", Color) = (0.7215686,1.913725,2.996078,1)
		_OverlayGlitterTillingValue("Overlay Glitter Tilling", Range( 0 , 10)) = 2
		_OverlayGlitterDistValue("Overlay Glitter Fade", Range( 0 , 200)) = 100
		[StyledColoring]_OverlayColoringOff("# Overlay Coloring Off", Color) = (1,1,1,1)
		[StyledSpace(10)]_OverlaySpace("[ Overlay Space ]", Float) = 1
		[StyledTextureSingleLine]_OverlayMaskTex("Overlay Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_OverlayMaskSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_OverlayMaskCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_OverlayMaskCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_OverlayMaskValue("Overlay TexB Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_OverlayMaskRemap("Overlay TexB Mask", Vector) = (0,1,0,0)
		_OverlayLumaValue("Overlay Luma Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_OverlayLumaRemap("Overlay Luma Mask", Vector) = (0,1,0,0)
		_OverlayProjValue("Overlay ProjY Mask", Range( 0 , 1)) = 0.5
		[StyledRemapSlider]_OverlayProjRemap("Overlay ProjY Mask", Vector) = (0,1,0,0)
		_OverlayMeshValue("Overlay Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_OverlayMeshMode("Overlay Mesh Mask", Float) = 1
		[StyledRemapSlider]_OverlayMeshRemap("Overlay Mesh Mask", Vector) = (0,1,0,0)
		[StyledRemapSlider]_OverlayBlendRemap1("Overlay Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledToggle]_OverlayElementMode("Use Atmo Globals / Elements", Float) = 1
		[HideInInspector]_overlay_vert_mode("_overlay_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_overlay_coord_value("_overlay_coord_value", Vector) = (1,1,0,0)
		[StyledSpace(10)]_OverlayEnd("[ Overlay End ]", Float) = 1
		[HideInInspector]_overlay_mask_coord_value("_overlay_mask_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Wetness Settings, true, 0, 10)]_WetnessCategory("[ Wetness Category ]", Float) = 1
		[StyledMessage(Warning, The Wetness feature is only available with The Visual Engine Core package., 0, 10)]_WetnessLiteInfo("# Wetness Lite Info", Float) = 0
		[StyledColoring]_WetnessColoring("# Wetness Coloring", Color) = (1,1,1,0.6)
		_WetnessIntensityValue("Wetness Intensity", Range( 0 , 1)) = 0
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_WetnessBakeMode("Wetness Baking", Float) = 0
		_WetnessContrastValue("Wetness Contrast", Range( 0 , 1)) = 0.2
		_WetnessSmoothnessValue("Wetness Smoothness", Range( 0 , 1)) = 0.8
		[Space(10)]_WetnessWaterIntensityValue("Wetness Water Intensity", Range( 0 , 1)) = 0
		[HDR]_WetnessWaterColor("Wetness Water Color", Color) = (0.5420078,0.7924528,0.6068289,1)
		_WetnessWaterBaseValue("Wetness Water Base Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_WetnessWaterBlendRemap("Wetness Water Blend Mask", Vector) = (0.1,0.2,0,0)
		[Space(10)][StyledTextureSingleLine]_WetnessDropsTex("Wetness Drops", 2D) = "white" {}
		[Space(10)]_WetnessDropsIntensityValue("Wetness Drops Intensity", Range( 0 , 1)) = 1
		_WetnessDropsNormalValue("Wetness Drops Normal", Range( 0 , 1)) = 1
		_WetnessDropsTillingValue("Wetness Drops Tilling", Range( 0 , 10)) = 1
		_WetnessDropsDistValue("Wetness Drops Fade", Range( 0 , 40)) = 10
		[Space(10)][StyledToggle]_WetnessElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_WetnessEnd("[ Wetness End ]", Float) = 1
		[StyledCategory(Cutout Settings, true, 0, 10)]_CutoutCategory("[ Cutout Category ]", Float) = 1
		[StyledMessage(Warning, The Cutout feature is only available with The Visual Engine Core package., 0, 10)]_CutoutLiteInfo("# Cutout Lite Info", Float) = 0
		[StyledColoring]_CutoutColoring("# Cutout Coloring", Color) = (1,1,1,0.6)
		_CutoutIntensityValue("Cutout Intensity", Range( 0 , 1)) = 0
		[Enum(Off,0,Affect Shadow Pass,1)]_CutoutShadowMode("Cutout Shadow", Float) = 1
		[Enum(Keep Dynamic On Impostors,0,Bake Settings To Impostors,1)]_CutoutBakeMode("Cutout Baking", Float) = 0
		[StyledSpace(10)]_CutoutSpace("[ Cutout Space ]", Float) = 1
		_CutoutMultiValue("Cutout Multi Mask", Range( 0 , 1)) = 1
		_CutoutAlphaValue("Cutout Alpha Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_CutoutMeshMode("Cutout Mesh Mask", Float) = 0
		_CutoutMeshValue("Cutout Mesh Mask", Range( 0 , 1)) = 0
		[StyledRemapSlider]_CutoutMeshRemap("Cutout Mesh Mask", Vector) = (0,1,0,0)
		_CutoutNoiseValue("Cutout Noise Mask", Range( 0 , 1)) = 1
		_CutoutNoiseTillingValue("Cutout Noise Tilling", Range( 0 , 40)) = 1
		[Space(10)][StyledToggle]_CutoutElementMode("Use Atmo Globals / Elements", Float) = 1
		[StyledSpace(10)]_CutoutEnd("[ Cutout End ]", Float) = 1
		[StyledCategory(Dither Settings, true, 0, 10)]_DitherCategory("[ Dither Category ]", Float) = 1
		[StyledMessage(Warning, The Dither feature is only available with The Visual Engine Core package., 0, 10)]_DitherLiteInfo("# Dither Lite Info", Float) = 0
		[StyledColoring]_DitherColoring("# Dither Coloring", Color) = (1,1,1,0.6)
		_DitherConstantValue("Dither Constant", Range( 0 , 1)) = 0
		_DitherDistanceValue("Dither Distance", Range( 0 , 1)) = 0
		_DitherDistanceMinValue("Dither Distance Start", Range( 0 , 1000)) = 0
		_DitherDistanceMaxValue("Dither Distance Limit", Range( 0 , 1000)) = 0
		_DitherProximityValue("Dither Proximity", Range( 0 , 1)) = 0
		_DitherProximityDistValue("Dither Proximity Fade", Range( 0 , 40)) = 1
		_DitherGlancingValue("Dither Glancing", Range( 0 , 1)) = 0
		_DitherGlancingAngleValue("Dither Glanging Angle", Range( 0 , 8)) = 1
		[Enum(Off,0,Affect Shadow Pass,1)]_DitherShadowMode("Dither Shadow", Float) = 1
		[Space(10)]_DitherMultiValue("Dither Multi Mask", Range( 0 , 1)) = 1
		_DitherNoiseTillingValue("Dither Noise Tilling", Range( 0 , 40)) = 1
		[StyledSpace(10)]_DitherEnd("[ Dither End ]", Float) = 1
		[StyledCategory(Emissive Settings, true, 0, 10)]_EmissiveCategory("[ Emissive Category ]", Float) = 1
		_EmissiveIntensityValue("Emissive Intensity", Range( 0 , 1)) = 0
		[Enum(None,0,Any,1,Baked,2,Realtime,3)]_EmissiveFlagMode("Emissive GI Mode", Float) = 0
		[HDR]_EmissiveColor("Emissive Color", Color) = (1,1,1,1)
		[Enum(Nits,0,EV100,1)]_EmissivePowerMode("Emissive Power", Float) = 0
		_EmissivePowerValue("Emissive Power", Float) = 1
		_EmissiveExposureValue("Emissive Weight", Range( 0 , 1)) = 0.5
		[Space(10)][StyledTextureSingleLine]_EmissiveMaskTex("Emissive Mask", 2D) = "white" {}
		[Enum(Main UV,0,Extra UV,1)][Space(10)]_EmissiveSampleMode("Mask Sampling", Float) = 0
		[Enum(Tilling And Offset,0,Scale And Offset,1)]_EmissiveCoordMode("Mask UV Mode", Float) = 0
		[StyledVector(9)]_EmissiveCoordValue("Mask UV Value", Vector) = (1,1,0,0)
		_EmissiveMaskValue("Emissive TexR Mask", Range( 0 , 1)) = 1
		[StyledRemapSlider]_EmissiveMaskRemap("Emissive TexR Mask", Vector) = (0,1,0,0)
		_EmissiveMeshValue("Emissive Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_EmissiveMeshMode("Emissive Mesh Mask", Float) = 0
		[StyledRemapSlider]_EmissiveMeshRemap("Emissive Mesh Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_EmissiveElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_EmissiveEnd("[ Emissive End ]", Float) = 1
		[HideInInspector]_emissive_power_value("_emissive_power_value", Float) = 1
		[HideInInspector]_emissive_vert_mode("_emissive_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_emissive_coord_value("_emissive_coord_value", Vector) = (1,1,0,0)
		[StyledCategory(Subsurface Settings, true, 0, 10)]_SubsurfaceCategory("[ Subsurface Category ]", Float) = 1
		[DiffusionProfile]_SubsurfaceDiffusion("Subsurface Diffusion", Float) = 0
		[HideInInspector]_SubsurfaceDiffusion_Asset("Subsurface Diffusion", Vector) = (0,0,0,0)
		[StyledSpace(10)]_SubsurfaceSpace("# SubsurfaceSpace", Float) = 0
		_SubsurfaceIntensityValue("Subsurface Intensity", Range( 0 , 1)) = 0
		[HDR]_SubsurfaceColor("Subsurface Color", Color) = (1,1,1,1)
		_SubsurfaceScatteringValue("Subsurface Power", Range( 0 , 16)) = 2
		_SubsurfaceAngleValue("Subsurface Angle", Range( 1 , 16)) = 8
		_SubsurfaceDirectValue("Subsurface Direct", Range( 0 , 1)) = 1
		_SubsurfaceNormalValue("Subsurface Normal", Range( 0 , 1)) = 0
		_SubsurfaceAmbientValue("Subsurface Ambient", Range( 0 , 1)) = 0.2
		_SubsurfaceShadowValue("Subsurface Shadow", Range( 0 , 1)) = 1
		_SubsurfaceThicknessValue("Subsurface Thickness", Range( 0 , 1)) = 0
		[Space(10)]_SubsurfaceMultiValue("Subsurface Multi Mask", Range( 0 , 1)) = 1
		[Space(10)][StyledToggle]_SubsurfaceElementMode("Use Glow Globals / Elements", Float) = 0
		[StyledSpace(10)]_SubsurfaceEnd("[ Subsurface End ]", Float) = 1
		[StyledCategory(Perspective Settings, true, 0, 10)]_PerspectiveCategory("[ Perspective Category ]", Float) = 1
		[StyledMessage(Warning, The Perspective feature is only available with The Visual Engine Core package., 0, 10)]_PerspectiveLiteInfo("# Perspective Lite Info", Float) = 0
		[StyledColoring]_PerspectiveColoring("# Perspective Coloring", Color) = (1,1,1,0.6)
		_PerspectiveIntensityValue("Perspective Intensity", Range( 0 , 8)) = 0
		_PerspectiveAngleValue("Perspective Angle", Range( 0 , 8)) = 1
		[StyledSpace(10)]_PerspectiveEnd("[ Perspective End ]", Float) = 1
		[StyledCategory(Size Fade Settings, true, 0, 10)]_SizeFadeCategory("[ Size Fade Category ]", Float) = 1
		[StyledMessage(Warning, The Size Fade feature is only available with The Visual Engine Core package., 0, 10)]_SizeFadeLiteInfo("# SizeFade Lite Info", Float) = 0
		[StyledColoring]_SizeFadeColoring("# SizeFade Coloring", Color) = (1,1,1,0.6)
		_SizeFadeIntensityValue("Size Fade Intensity", Range( 0 , 1)) = 0
		[Enum(All Axis,0,Y Axis,1)]_SizeFadeScaleMode("Size Fade Mode", Float) = 0
		_SizeFadeScaleValue("Size Fade Scale", Range( 0 , 1)) = 1
		_SizeFadeDistMinValue("Size Fade Start", Range( 0 , 1000)) = 0
		_SizeFadeDistMaxValue("Size Fade Limit", Range( 0 , 1000)) = 0
		[Space(10)][StyledToggle]_SizeFadeElementMode("Use Form Globals / Elements", Float) = 0
		[StyledSpace(10)]_SizeFadeEnd("[ Size Fade End ]", Float) = 1
		[StyledCategory(Motion Settings, true, 0, 10)]_MotionWindCategory("[ Motion Wind Category ]", Float) = 1
		[NoScaleOffset][StyledTextureSingleLine]_MotionNoiseTex("Motion Texture", 2D) = "white" {}
		[Space(10)]_MotionHighlightValue("Motion Waves Intensity", Range( 0 , 1)) = 0
		[HDR]_MotionHighlightColor("Motion Waves Color", Color) = (1,1,1,1)
		[Space(10)]_MotionBaseIntensityValue("Motion LayerA Intensity", Range( 0 , 8)) = 0
		_MotionBasePivotValue("Motion LayerA Pivots", Range( 0 , 1)) = 0.8
		_MotionBasePhaseValue("Motion LayerA Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionBaseMaskMode("Motion LayerA Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionBaseMaskRemap("Motion LayerA Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionSmallIntensityValue("Motion LayerB Intensity", Range( 0 , 8)) = 0
		_MotionSmallPivotValue("Motion LayerB Pivots", Range( 0 , 1)) = 0.6
		_MotionSmallPhaseValue("Motion LayerB Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionSmallMaskMode("Motion LayerB Anim Mask", Float) = 1
		[StyledRemapSlider]_MotionSmallMaskRemap("Motion LayerB Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionTinyIntensityValue("Motion Flutter Intensity", Range( 0 , 8)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionTinyMaskMode("Motion Flutter Anim Mask", Float) = 2
		[StyledRemapSlider]_MotionTinyMaskRemap("Motion Flutter Anim Mask", Vector) = (0,1,0,0)
		[Space(10)]_MotionIntensityValue("Motion Wind Intensity", Range( 0 , 1)) = 1
		_MotionDelayValue("Motion Wind Delay", Range( 0 , 1)) = 0
		_MotionTillingValue("Motion Wind Tilling", Range( 0 , 40)) = 5
		_MotionDistValue("Motion Wind Flutter Fade", Range( 0 , 200)) = 100
		_MotionFrontValue("Motion Wind Planar Mask", Range( 0 , 1)) = 0.5
		[Space(10)][StyledToggle]_MotionWindElementMode("Use Wind Elements", Float) = 0
		[StyledSpace(10)]_MotionWindEnd("[ Motion Wind End ]", Float) = 1
		[StyledCategory(Interaction Settings, true, 0, 10)]_MotionInteractionCategory("[ Motion Interaction Category ]", Float) = 1
		[StyledMessage(Warning, The Interaction feature is only available with The Visual Engine Core package., 0, 10)]_InteractionLiteInfo("# Interaction Lite Info", Float) = 0
		[StyledColoring]_InteractionColoring("# Interaction Coloring", Color) = (1,1,1,0.6)
		_MotionPushIntensityValue("Interaction Intensity", Range( 0 , 8)) = 0
		_MotionPushPivotValue("Interaction Pivots", Range( 0 , 1)) = 1
		_MotionPushPhaseValue("Interaction Phase", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3,Height,4,Sphere,5)]_MotionPushMaskMode("Interaction Anim Mask", Float) = 3
		[StyledRemapSlider]_MotionPushMaskRemap("Interaction Anim Mask", Vector) = (0,1,0,0)
		[Space(10)][StyledToggle]_MotionPushElementMode("Use Push Elements", Float) = 1
		[HideInInspector]_motion_base_mask_mode("_motion_base_mask_mode", Float) = 0
		[HideInInspector]_motion_base_vert_mode("_motion_base_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_base_proc_mode("_motion_base_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_mask_mode("_motion_small_mask_mode", Float) = 0
		[HideInInspector]_motion_small_vert_mode("_motion_small_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_small_proc_mode("_motion_small_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_mask_mode("_motion_tiny_mask_mode", Float) = 0
		[HideInInspector]_motion_tiny_vert_mode("_motion_tiny_vert_mode", Vector) = (0,0,0,0)
		[HideInInspector]_motion_tiny_proc_mode("_motion_tiny_proc_mode", Vector) = (0,0,0,0)
		[HideInInspector]_global_wind_layer_value("_global_wind_layer_value", Float) = 0
		[StyledSpace(10)]_MotionInteractionEnd("[ Motion Interaction End ]", Float) = 1
		[StyledCategory(Normal Settings, true, 0, 10)]_NormalCategory("[ Normal Category ]", Float) = 1
		[StyledMessage(Warning, Computing normals from vertex transform is only available with The Visual Engine Core package., 0, 10)]_NormalLiteInfo("# Normal Lite Info", Float) = 0
		_NormalFlattenValue("Normal Flattening", Range( 0 , 1)) = 0
		_NormalSphereValue("Normal Spherical", Range( 0 , 1)) = 0
		[StyledVector(18)]_NormalSphereOffsetValue("Normal Spherical Offset", Vector) = (0,0,0,0)
		[StyledColoring]_NormalColoringStart("# Normal Coloring Start", Color) = (1,1,1,0.6)
		_NormalComputeValue("Normal Compute", Range( 0 , 1)) = 0
		[StyledColoring]_NormalColoringEnd("# Normal Coloring End", Color) = (1,1,1,1)
		[Space(10)]_NormalMeshValue("Normal Mesh Mask", Range( 0 , 1)) = 0
		[Enum(Vertex R,0,Vertex G,1,Vertex B,2,Vertex A,3)]_NormalMeshMode("Normal Mesh Mask", Float) = 2
		[StyledRemapSlider]_NormalMeshRemap("Normal Mesh Mask", Vector) = (0,1,0,0)
		[HideInInspector]_normal_vert_mode("_normal_vert_mode", Vector) = (0,0,0,0)
		[StyledSpace(10)]_NormalEnd("[ Normal End ]", Float) = 1
		[HideInInspector]_render_cull("_render_cull", Float) = 0
		[HideInInspector]_render_src("_render_src", Float) = 5
		[HideInInspector]_render_dst("_render_dst", Float) = 10
		[HideInInspector]_render_zw("_render_zw", Float) = 1
		[HideInInspector]_render_coverage("_render_coverage", Float) = 0
		[HideInInspector]_IsLiteShader("_IsLiteShader", Float) = 1
		[HideInInspector]_IsGeneralShader("_IsGeneralShader", Float) = 1
		[HideInInspector]_IsSubsurfaceShader("_IsSubsurfaceShader", Float) = 1
		[HideInInspector] _texcoord( "", 2D ) = "white" {}

		[HideInInspector] _RenderQueueType("Render Queue Type", Float) = 1
		[HideInInspector][ToggleUI] _AddPrecomputedVelocity("Add Precomputed Velocity", Float) = 1
		[HideInInspector][ToggleUI] _SupportDecals("Support Decals", Float) = 1.0
		[HideInInspector] _StencilRef("Stencil Ref", Int) = 0 // StencilUsage.Clear
		[HideInInspector] _StencilWriteMask("Stencil Write Mask", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefDepth("Stencil Ref Depth", Int) = 0 // Nothing
		[HideInInspector] _StencilWriteMaskDepth("Stencil Write Mask Depth", Int) = 8 // StencilUsage.TraceReflectionRay
		[HideInInspector] _StencilRefMV("Stencil Ref MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilWriteMaskMV("Stencil Write Mask MV", Int) = 32 // StencilUsage.ObjectMotionVector
		[HideInInspector] _StencilRefDistortionVec("Stencil Ref Distortion Vec", Int) = 4 				// DEPRECATED
		[HideInInspector] _StencilWriteMaskDistortionVec("Stencil Write Mask Distortion Vec", Int) = 4	// DEPRECATED
		[HideInInspector] _StencilWriteMaskGBuffer("Stencil Write Mask GBuffer", Int) = 3 // StencilUsage.RequiresDeferredLighting | StencilUsage.SubsurfaceScattering
		[HideInInspector] _StencilRefGBuffer("Stencil Ref GBuffer", Int) = 2 // StencilUsage.RequiresDeferredLighting
		[HideInInspector] _ZTestGBuffer("ZTest GBuffer", Int) = 4
		[HideInInspector][ToggleUI] _RequireSplitLighting("Require Split Lighting", Float) = 0
		[HideInInspector][ToggleUI] _ReceivesSSR("Receives SSR", Float) = 1
		[HideInInspector][ToggleUI] _ReceivesSSRTransparent("Receives SSR Transparent", Float) = 0
		[HideInInspector] _SurfaceType("Surface Type", Float) = 0
		[HideInInspector] _BlendMode("Blend Mode", Float) = 0
		[HideInInspector] _SrcBlend("Src Blend", Float) = 1
		[HideInInspector] _DstBlend("Dst Blend", Float) = 0
		[HideInInspector] _AlphaSrcBlend("Alpha Src Blend", Float) = 1
		[HideInInspector] _AlphaDstBlend("Alpha Dst Blend", Float) = 0
		[HideInInspector][ToggleUI] _ZWrite("ZWrite", Float) = 1
		[HideInInspector][ToggleUI] _TransparentZWrite("Transparent ZWrite", Float) = 0
		[HideInInspector] _CullMode("Cull Mode", Float) = 2
		[HideInInspector] _TransparentSortPriority("Transparent Sort Priority", Float) = 0
		[HideInInspector][ToggleUI] _EnableFogOnTransparent("Enable Fog", Float) = 1
		[HideInInspector] _CullModeForward("Cull Mode Forward", Float) = 2 // This mode is dedicated to Forward to correctly handle backface then front face rendering thin transparent
		[HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.TransparentCullMode)] _TransparentCullMode("Transparent Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector] _ZTestDepthEqualForOpaque("ZTest Depth Equal For Opaque", Int) = 4 // Less equal
		[HideInInspector][Enum(UnityEngine.Rendering.CompareFunction)] _ZTestTransparent("ZTest Transparent", Int) = 4 // Less equal
		[HideInInspector][ToggleUI] _TransparentBackfaceEnable("Transparent Backface Enable", Float) = 0
		[HideInInspector][ToggleUI] _AlphaCutoffEnable("Alpha Cutoff Enable", Float) = 0
		[HideInInspector][ToggleUI] _UseShadowThreshold("Use Shadow Threshold", Float) = 0
		[HideInInspector][ToggleUI] _DoubleSidedEnable("Double Sided Enable", Float) = 0
		[HideInInspector][Enum(Flip, 0, Mirror, 1, None, 2)] _DoubleSidedNormalMode("Double Sided Normal Mode", Float) = 2
		[HideInInspector] _DoubleSidedConstants("DoubleSidedConstants", Vector) = (1,1,-1,0)

		//_TessPhongStrength( "Tess Phong Strength", Range( 0, 1 ) ) = 0.5
		//_TessValue( "Tess Max Tessellation", Range( 1, 32 ) ) = 16
		//_TessMin( "Tess Min Distance", Float ) = 10
		//_TessMax( "Tess Max Distance", Float ) = 25
		//_TessEdgeLength ( "Tess Edge length", Range( 2, 50 ) ) = 16
		//_TessMaxDisp( "Tess Max Displacement", Float ) = 25

		[HideInInspector][ToggleUI] _TransparentWritingMotionVec("Transparent Writing MotionVec", Float) = 0
		[HideInInspector][Enum(UnityEditor.Rendering.HighDefinition.OpaqueCullMode)] _OpaqueCullMode("Opaque Cull Mode", Int) = 2 // Back culling by default
		[HideInInspector][ToggleUI] _EnableBlendModePreserveSpecularLighting("Enable Blend Mode Preserve Specular Lighting", Float) = 1
		[HideInInspector] _EmissionColor("Color", Color) = (1, 1, 1)

		[HideInInspector][NoScaleOffset] unity_Lightmaps("unity_Lightmaps", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_LightmapsInd("unity_LightmapsInd", 2DArray) = "" {}
        [HideInInspector][NoScaleOffset] unity_ShadowMasks("unity_ShadowMasks", 2DArray) = "" {}

		[HideInInspector][Enum(Auto, 0, On, 1, Off, 2)] _DoubleSidedGIMode("Double sided GI mode", Float) = 0

		[HideInInspector][ToggleUI] _AlphaToMaskInspectorValue("_AlphaToMaskInspectorValue", Float) = 0 // Property used to save the alpha to mask state in the inspector
        [HideInInspector][ToggleUI] _AlphaToMask("__alphaToMask", Float) = 0

		//_Refrac ( "Refraction Model", Float) = 0
        [HideInInspector][ToggleUI]_DepthOffsetEnable("Boolean", Float) = 1
        [HideInInspector][ToggleUI]_ConservativeDepthOffsetEnable("Boolean", Float) = 1
	}

	SubShader
	{
		LOD 0

		

		Tags { "RenderPipeline"="HDRenderPipeline" "RenderType"="Opaque" "Queue"="Geometry" }

		HLSLINCLUDE
		#pragma target 4.5
		#pragma exclude_renderers glcore gles gles3 

		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
		#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Filtering.hlsl"

		struct GlobalSurfaceDescription // GBuffer Forward META TransparentBackface
		{
			float3 BaseColor;
			float3 Normal;
			float3 BentNormal;
			float3 Specular;
			float CoatMask;
			float Metallic;
			float3 Emission;
			float Smoothness;
			float Occlusion;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float AlphaClipThresholdDepthPostpass;
			float SpecularOcclusion;
			float SpecularAAScreenSpaceVariance;
			float SpecularAAThreshold;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float DiffusionProfile;
			float TransmissionMask;
			float Thickness;
			float SubsurfaceMask;
			float Anisotropy;
			float3 Tangent;
			float IridescenceMask;
			float IridescenceThickness;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct AlphaSurfaceDescription // ShadowCaster
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SceneSurfaceDescription // SceneSelection
		{
		    float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float RefractionIndex;
			float3 RefractionColor;
			float RefractionDistance;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PrePassSurfaceDescription // DepthPrePass
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPrepass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct PostPassSurfaceDescription //DepthPostPass
		{
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float AlphaClipThresholdDepthPostpass;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

		struct SmoothSurfaceDescription // MotionVectors DepthOnly
		{
			float3 Normal;
			float3 Emission;
			float Smoothness;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;
		};

        struct PickingSurfaceDescription //Picking
		{
            float3 BentNormal;
			float3 Emission;
			float Alpha;
			float AlphaClipThreshold;
			float AlphaClipThresholdShadow;
			float3 BakedGI;
			float3 BakedBackGI;
			float DepthOffset;
			float4 VTPackedFeedback;

			float3 ObjectSpaceNormal;
			float3 WorldSpaceNormal;
			float3 TangentSpaceNormal;
			float3 ObjectSpaceViewDirection;
			float3 WorldSpaceViewDirection;
			float3 ObjectSpacePosition;
		};

		#ifndef ASE_TESS_FUNCS
		#define ASE_TESS_FUNCS
		float4 FixedTess( float tessValue )
		{
			return tessValue;
		}

		float CalcDistanceTessFactor (float4 vertex, float minDist, float maxDist, float tess, float4x4 o2w, float3 cameraPos )
		{
			float3 wpos = mul(o2w,vertex).xyz;
			float dist = distance (wpos, cameraPos);
			float f = clamp(1.0 - (dist - minDist) / (maxDist - minDist), 0.01, 1.0) * tess;
			return f;
		}

		float4 CalcTriEdgeTessFactors (float3 triVertexFactors)
		{
			float4 tess;
			tess.x = 0.5 * (triVertexFactors.y + triVertexFactors.z);
			tess.y = 0.5 * (triVertexFactors.x + triVertexFactors.z);
			tess.z = 0.5 * (triVertexFactors.x + triVertexFactors.y);
			tess.w = (triVertexFactors.x + triVertexFactors.y + triVertexFactors.z) / 3.0f;
			return tess;
		}

		float CalcEdgeTessFactor (float3 wpos0, float3 wpos1, float edgeLen, float3 cameraPos, float4 scParams )
		{
			float dist = distance (0.5 * (wpos0+wpos1), cameraPos);
			float len = distance(wpos0, wpos1);
			float f = max(len * scParams.y / (edgeLen * dist), 1.0);
			return f;
		}

		float DistanceFromPlaneASE (float3 pos, float4 plane)
		{
			return dot (float4(pos,1.0f), plane);
		}

		bool WorldViewFrustumCull (float3 wpos0, float3 wpos1, float3 wpos2, float cullEps, float4 planes[6] )
		{
			float4 planeTest;
			planeTest.x = (( DistanceFromPlaneASE(wpos0, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[0]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[0]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.y = (( DistanceFromPlaneASE(wpos0, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[1]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[1]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.z = (( DistanceFromPlaneASE(wpos0, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[2]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[2]) > -cullEps) ? 1.0f : 0.0f );
			planeTest.w = (( DistanceFromPlaneASE(wpos0, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos1, planes[3]) > -cullEps) ? 1.0f : 0.0f ) +
						  (( DistanceFromPlaneASE(wpos2, planes[3]) > -cullEps) ? 1.0f : 0.0f );
			return !all (planeTest);
		}

		float4 DistanceBasedTess( float4 v0, float4 v1, float4 v2, float tess, float minDist, float maxDist, float4x4 o2w, float3 cameraPos )
		{
			float3 f;
			f.x = CalcDistanceTessFactor (v0,minDist,maxDist,tess,o2w,cameraPos);
			f.y = CalcDistanceTessFactor (v1,minDist,maxDist,tess,o2w,cameraPos);
			f.z = CalcDistanceTessFactor (v2,minDist,maxDist,tess,o2w,cameraPos);

			return CalcTriEdgeTessFactors (f);
		}

		float4 EdgeLengthBasedTess( float4 v0, float4 v1, float4 v2, float edgeLength, float4x4 o2w, float3 cameraPos, float4 scParams )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;
			tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
			tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
			tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
			tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			return tess;
		}

		float4 EdgeLengthBasedTessCull( float4 v0, float4 v1, float4 v2, float edgeLength, float maxDisplacement, float4x4 o2w, float3 cameraPos, float4 scParams, float4 planes[6] )
		{
			float3 pos0 = mul(o2w,v0).xyz;
			float3 pos1 = mul(o2w,v1).xyz;
			float3 pos2 = mul(o2w,v2).xyz;
			float4 tess;

			if (WorldViewFrustumCull(pos0, pos1, pos2, maxDisplacement, planes))
			{
				tess = 0.0f;
			}
			else
			{
				tess.x = CalcEdgeTessFactor (pos1, pos2, edgeLength, cameraPos, scParams);
				tess.y = CalcEdgeTessFactor (pos2, pos0, edgeLength, cameraPos, scParams);
				tess.z = CalcEdgeTessFactor (pos0, pos1, edgeLength, cameraPos, scParams);
				tess.w = (tess.x + tess.y + tess.z) / 3.0f;
			}
			return tess;
		}
		#endif //ASE_TESS_FUNCS
		ENDHLSL

		
		Pass
		{
			
			Name "GBuffer"
			Tags { "LightMode"="GBuffer" }

			Cull [_CullMode]
			ZTest [_ZTestGBuffer]

			Stencil
			{
				Ref [_StencilRefGBuffer]
				WriteMask [_StencilWriteMaskGBuffer]
				Comp Always
				Pass Replace
			}


			ColorMask [_LightLayersMaskBuffer4] 4
			ColorMask [_LightLayersMaskBuffer5] 5

			HLSLPROGRAM
            #pragma shader_feature_local _ _DOUBLESIDED_ON
            #define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
            #pragma shader_feature_local_fragment _ _DISABLE_DECALS
            #define _SPECULAR_OCCLUSION_FROM_AO 1
            #pragma multi_compile_instancing
            #pragma instancing_options renderinglayer
            #define _MATERIAL_FEATURE_TRANSMISSION 1
            #pragma multi_compile _ LOD_FADE_CROSSFADE
            #define ASE_ABSOLUTE_VERTEX_POS 1
            #define _AMBIENT_OCCLUSION 1
            #define HAVE_MESH_MODIFICATION
            #define ASE_SRP_VERSION 140011
            #if !defined(ASE_NEED_CULLFACE)
            #define ASE_NEED_CULLFACE 1
            #endif //ASE_NEED_CULLFACE
            #define ASE_USING_SAMPLING_MACROS 1

            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ LIGHT_LAYERS
            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_GBUFFER

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};


			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness =					surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;
	
	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = vertexToFrag76_g156892;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord9 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord5 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput,
						OUTPUT_GBUFFER(outGBuffer)
						#ifdef _DEPTHOFFSET_ON
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
						)
			{

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);
				SurfaceData surfaceData;
				BuiltinData builtinData;

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord5.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord6.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord7.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord9;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord5.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				half3 Input_Albedo24_g170507 = Out_Albedo4_g170508;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170507 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170507 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170507 = staticSwitch22_g170507;
				float4 break24_g170502 = Out_Shader4_g170508;
				half Metallic95_g170502 = break24_g170502.x;
				half Input_Metallic25_g170507 = Metallic95_g170502;
				half OneMinusReflectivity31_g170507 = ( (ColorSpaceDielectricSpec23_g170507).w - ( (ColorSpaceDielectricSpec23_g170507).w * Input_Metallic25_g170507 ) );
				
				float3 appendResult23_g170502 = (float3(Out_NormalTS4_g170508 , 1.0));
				float3 temp_output_13_0_g170506 = appendResult23_g170502;
				float3 temp_output_33_0_g170506 = ( temp_output_13_0_g170506 * _render_normal );
				float3 switchResult12_g170506 = (((isFrontFace>0)?(temp_output_13_0_g170506):(temp_output_33_0_g170506)));
				
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170507 * OneMinusReflectivity31_g170507 );
				surfaceDescription.Normal = switchResult12_g170506;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170508).xyz;
				surfaceDescription.Smoothness = break24_g170502.w;
				surfaceDescription.Occlusion = break24_g170502.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				surfaceDescription.AlphaClipThresholdDepthPrepass = 0.5;
				surfaceDescription.AlphaClipThresholdDepthPostpass = 0.5;

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170508;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170508;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170508;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif
				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				GetSurfaceAndBuiltinData( surfaceDescription, input, V, posInput, surfaceData, builtinData );
				ENCODE_INTO_GBUFFER( surfaceData, builtinData, posInput.positionSS, outGBuffer );
				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "META"
			Tags { "LightMode"="Meta" }

			Cull Off

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma shader_feature _ EDITOR_VISUALIZATION
			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_LIGHT_TRANSPORT
            #define SCENEPICKINGPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#if SHADERPASS == SHADERPASS_LIGHT_TRANSPORT
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/MetaPass.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				#ifdef EDITOR_VISUALIZATION
				float2 VizUV : TEXCOORD0;
				float4 LightCoord : TEXCOORD1;
				#endif
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =					surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

                #ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

                #ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
                #endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh  )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);

				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.uv3.x , 0.0 , inputMesh.uv3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.uv0.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.uv0.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag76_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord9 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord2 = inputMesh.uv0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.xy = inputMesh.uv2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord3.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;

				outputPackedVaryingsMeshToPS.positionCS = UnityMetaVertexPosition(inputMesh.positionOS, inputMesh.uv1.xy, inputMesh.uv2.xy, unity_LightmapST, unity_DynamicLightmapST);

				#ifdef EDITOR_VISUALIZATION
					float2 vizUV = 0;
					float4 lightCoord = 0;
					UnityEditorVizData(inputMesh.positionOS.xyz, inputMesh.uv0.xy, inputMesh.uv1.xy, inputMesh.uv2.xy, vizUV, lightCoord);

					outputPackedVaryingsMeshToPS.VizUV.xy = vizUV;
					outputPackedVaryingsMeshToPS.LightCoord = lightCoord;
				#endif

				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv0 : TEXCOORD0;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 uv3 : TEXCOORD3;
				float4 ase_color : COLOR;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv0 = v.uv0;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.uv3 = v.uv3;
				o.ase_color = v.ase_color;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv0 = patch[0].uv0 * bary.x + patch[1].uv0 * bary.y + patch[2].uv0 * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.uv3 = patch[0].uv3 * bary.x + patch[1].uv3 * bary.y + patch[2].uv3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			float4 Frag(PackedVaryingsMeshToPS packedInput  ) : SV_Target
			{
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);
				float3 V = float3(1.0, 1.0, 1.0);

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord2.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord4.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord5.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord6.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord7.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord8.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord9;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord2.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.ase_texcoord3.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				half3 Input_Albedo24_g170507 = Out_Albedo4_g170508;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170507 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170507 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170507 = staticSwitch22_g170507;
				float4 break24_g170502 = Out_Shader4_g170508;
				half Metallic95_g170502 = break24_g170502.x;
				half Input_Metallic25_g170507 = Metallic95_g170502;
				half OneMinusReflectivity31_g170507 = ( (ColorSpaceDielectricSpec23_g170507).w - ( (ColorSpaceDielectricSpec23_g170507).w * Input_Metallic25_g170507 ) );
				
				float3 appendResult23_g170502 = (float3(Out_NormalTS4_g170508 , 1.0));
				float3 temp_output_13_0_g170506 = appendResult23_g170502;
				float3 temp_output_33_0_g170506 = ( temp_output_13_0_g170506 * _render_normal );
				float3 switchResult12_g170506 = (((isFrontFace>0)?(temp_output_13_0_g170506):(temp_output_33_0_g170506)));
				
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170507 * OneMinusReflectivity31_g170507 );
				surfaceDescription.Normal = switchResult12_g170506;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170508).xyz;
				surfaceDescription.Smoothness = break24_g170502.w;
				surfaceDescription.Occlusion = break24_g170502.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170508;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170508;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170508;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);
				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);
				LightTransportData lightTransportData = GetLightTransportData(surfaceData, builtinData, bsdfData);

				float4 res = float4( 0.0, 0.0, 0.0, 1.0 );
				UnityMetaInput metaInput;
				metaInput.Albedo = lightTransportData.diffuseColor.rgb;
				metaInput.Emission = lightTransportData.emissiveColor;

			#ifdef EDITOR_VISUALIZATION
				metaInput.VizUV = packedInput.VizUV;
				metaInput.LightCoord = packedInput.LightCoord;
			#endif
				res = UnityMetaFragment(metaInput);

				return res;
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "ShadowCaster"
			Tags { "LightMode"="ShadowCaster" }

			Cull [_CullMode]
			ZWrite On
			ZClip [_ZClip]
			ZTest LEqual
			ColorMask 0

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma multi_compile_fragment _ SHADOWS_SHADOWMASK

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_SHADOWS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout AlphaSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				// refraction ShadowCaster
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                    #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
                    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                    {
                        surfaceData.metallic = 0;
                    }
                    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(AlphaSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord3.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag76_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord1 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord2.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord2.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				AlphaSurfaceDescription surfaceDescription = (AlphaSurfaceDescription)0;
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord1.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord4.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord5.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord6.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord8;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
				surfaceDescription.AlphaClipThresholdShadow = 0.5;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
				outputDepth += bias;
				#endif

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmesh.positionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#if defined(WRITE_NORMAL_BUFFER)
				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

                #if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
				DecalPrepassData decalPrepassData;
				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
				decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
                #endif
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "SceneSelectionPass"
			Tags { "LightMode"="SceneSelectionPass" }

			Cull Off

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
		    #define SCENESELECTIONPASS 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float4 ase_texcoord1 : TEXCOORD1;
				float4 ase_texcoord2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_color : COLOR;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SceneSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;

				//refraction SceneSelectionPass
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
                    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                   {
                        surfaceData.metallic = 0;
                   }
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SceneSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;
				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord3.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xyz = vertexToFrag76_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord1 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord2.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord2.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord3.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord4.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						, out float4 outColor : SV_Target0
						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SceneSurfaceDescription surfaceDescription = (SceneSurfaceDescription)0;
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord1.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord3.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord4.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord5.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord6.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord8;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord1.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.ase_texcoord2.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

				outColor = float4( _ObjectId, _PassValue, 1.0, 1.0 );
			}
			ENDHLSL
		}

		
		Pass
		{
			
			Name "DepthOnly"
			Tags { "LightMode"="DepthOnly" }

			Cull [_CullMode]
			ZWrite On

			Stencil
			{
				Ref [_StencilRefDepth]
				WriteMask [_StencilWriteMaskDepth]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile _ WRITE_DECAL_BUFFER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_DEPTH_ONLY

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif

            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_color : COLOR;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
				    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
				    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

                #if defined(DEBUG_DISPLAY)
                    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
                    {
                        surfaceData.metallic = 0;
                    }
                     ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData);
                #endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
				#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh )
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag76_g156892;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord8 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord4.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif

				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord3.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord7.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord8;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				float3 appendResult23_g170502 = (float3(Out_NormalTS4_g170508 , 1.0));
				float3 temp_output_13_0_g170506 = appendResult23_g170502;
				float3 temp_output_33_0_g170506 = ( temp_output_13_0_g170506 * _render_normal );
				float3 switchResult12_g170506 = (((isFrontFace>0)?(temp_output_13_0_g170506):(temp_output_33_0_g170506)));
				
				float4 break24_g170502 = Out_Shader4_g170508;
				
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.Normal = switchResult12_g170506;
				surfaceDescription.Smoothness = break24_g170502.w;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

                #if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
				outputDepth = posInput.deviceDepth;
				#endif

                #if SHADERPASS == SHADERPASS_SHADOWS
                float bias = max(abs(ddx(posInput.deviceDepth)), abs(ddy(posInput.deviceDepth))) * _SlopeScaleDepthBias;
                outputDepth += bias;
                #endif

				#ifdef SCENESELECTIONPASS
    				outColor = float4(_ObjectId, _PassValue, 1.0, 1.0);
				#elif defined(SCENEPICKINGPASS)
    				outColor = unity_SelectionID;
				#else
    				#ifdef WRITE_MSAA_DEPTH
    				depthColor = packedInput.positionCS.z;
    				depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
    				#endif

    				#if defined(WRITE_NORMAL_BUFFER)
    				EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
    				#endif

    				#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
    				DecalPrepassData decalPrepassData;
    				decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
    				decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
    				EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
    				#endif

				#endif // SCENESELECTIONPASS

			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "MotionVectors"
			Tags { "LightMode"="MotionVectors" }

			Cull [_CullMode]

			ZWrite On

			Stencil
			{
				Ref [_StencilRefMV]
				WriteMask [_StencilWriteMaskMV]
				Comp Always
				Pass Replace
			}


			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile _ WRITE_NORMAL_BUFFER
            #pragma multi_compile_fragment _ WRITE_MSAA_DEPTH
            #pragma multi_compile _ WRITE_DECAL_BUFFER

			#pragma vertex Vert
			#pragma fragment Frag

            #define SHADERPASS SHADERPASS_MOTION_VECTORS

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif
        
            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
               #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			     #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 vmeshPositionCS : SV_Position;
				float3 vmeshInterp00 : TEXCOORD0;
				float3 vpassInterpolators0 : TEXCOORD1; //interpolators0
				float3 vpassInterpolators1 : TEXCOORD2; //interpolators1
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_texcoord4 : TEXCOORD4;
				float4 ase_texcoord5 : TEXCOORD5;
				float4 ase_texcoord6 : TEXCOORD6;
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_color : COLOR;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_texcoord10 : TEXCOORD10;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout SmoothSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);

				surfaceData.specularOcclusion = 1.0;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(SmoothSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

                float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

                PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord5.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord6.xyz = vertexToFrag76_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord7.xyz = ase_worldNormal;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = ase_worldTangent;
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord10 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord3 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_texcoord4.xy = inputMesh.ase_texcoord2.xy;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord4.zw = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord5.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord6.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord7.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);

				float3 VMESHpositionRWS = positionRWS;
				float4 VMESHpositionCS = TransformWorldToHClip(positionRWS);

				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(VMESHpositionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						if (_TransparentCameraOnlyMotionVectors > 0)
						{
							previousPositionRWS = VMESHpositionRWS.xyz;
						}
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}

				outputPackedVaryingsMeshToPS.vmeshPositionCS = VMESHpositionCS;
				outputPackedVaryingsMeshToPS.vmeshInterp00.xyz = VMESHpositionRWS;

				outputPackedVaryingsMeshToPS.vpassInterpolators0 = float3(VPASSpositionCS.xyw);
				outputPackedVaryingsMeshToPS.vpassInterpolators1 = float3(VPASSpreviousPositionCS.xyw);
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalPrepassBuffer.hlsl"
			#endif

			#if ( 0 ) // TEMPORARY: defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				float4 ase_texcoord2 : TEXCOORD2;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.previousPositionOS = v.previousPositionOS;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
				o.precomputedVelocity = v.precomputedVelocity;
				#endif
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				o.ase_texcoord2 = v.ase_texcoord2;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.previousPositionOS = patch[0].previousPositionOS * bary.x + patch[1].previousPositionOS * bary.y + patch[2].previousPositionOS * bary.z;
				#if defined (_ADD_PRECOMPUTED_VELOCITY)
					o.precomputedVelocity = patch[0].precomputedVelocity * bary.x + patch[1].precomputedVelocity * bary.y + patch[2].precomputedVelocity * bary.z;
				#endif
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				o.ase_texcoord2 = patch[0].ase_texcoord2 * bary.x + patch[1].ase_texcoord2 * bary.y + patch[2].ase_texcoord2 * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_DECAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target3
			#elif defined(WRITE_DECAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_NORMAL SV_Target2
			#else
			#define SV_TARGET_NORMAL SV_Target1
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
				#ifdef WRITE_MSAA_DEPTH
					, out float4 depthColor : SV_Target0
					, out float4 outMotionVector : SV_Target1
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target2
						#endif
					#else
					, out float4 outMotionVector : SV_Target0
						#ifdef WRITE_DECAL_BUFFER
						, out float4 outDecalBuffer : SV_Target1
						#endif
					#endif

					#ifdef WRITE_NORMAL_BUFFER
					, out float4 outNormalBuffer : SV_TARGET_NORMAL
					#endif

					#ifdef _DEPTHOFFSET_ON
					, out float outputDepth : DEPTH_OFFSET_SEMANTIC
					#endif
				, bool ase_vface : SV_IsFrontFace
				)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.vmeshPositionCS;
				input.positionRWS = packedInput.vmeshInterp00.xyz;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				SurfaceData surfaceData;
				BuiltinData builtinData;

				SmoothSurfaceDescription surfaceDescription = (SmoothSurfaceDescription)0;
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord3.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord5.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord6.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 ase_worldNormal = packedInput.ase_texcoord7.xyz;
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldTangent = packedInput.ase_texcoord8.xyz;
				float3 ase_worldBitangent = packedInput.ase_texcoord9.xyz;
				float3x3 ase_worldToTangent = float3x3(ase_worldTangent,ase_worldBitangent,ase_worldNormal);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( ase_worldTangent.x, ase_worldBitangent.x, ase_worldNormal.x );
				float3 tanToWorld1 = float3( ase_worldTangent.y, ase_worldBitangent.y, ase_worldNormal.y );
				float3 tanToWorld2 = float3( ase_worldTangent.z, ase_worldBitangent.z, ase_worldNormal.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord10;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord3.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.ase_texcoord4.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				float3 appendResult23_g170502 = (float3(Out_NormalTS4_g170508 , 1.0));
				float3 temp_output_13_0_g170506 = appendResult23_g170502;
				float3 temp_output_33_0_g170506 = ( temp_output_13_0_g170506 * _render_normal );
				float3 switchResult12_g170506 = (((ase_vface>0)?(temp_output_13_0_g170506):(temp_output_33_0_g170506)));
				
				float4 break24_g170502 = Out_Shader4_g170508;
				
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.Normal = switchResult12_g170506;
				surfaceDescription.Smoothness = break24_g170502.w;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				GetSurfaceAndBuiltinData(surfaceDescription, input, V, posInput, surfaceData, builtinData);

				float4 VPASSpositionCS = float4(packedInput.vpassInterpolators0.xy, 0.0, packedInput.vpassInterpolators0.z);
				float4 VPASSpreviousPositionCS = float4(packedInput.vpassInterpolators1.xy, 0.0, packedInput.vpassInterpolators1.z);

				#ifdef _DEPTHOFFSET_ON
				VPASSpositionCS.w += builtinData.depthOffset;
				VPASSpreviousPositionCS.w += builtinData.depthOffset;
				#endif

				float2 motionVector = CalculateMotionVector( VPASSpositionCS, VPASSpreviousPositionCS );
				EncodeMotionVector( motionVector * 0.5, outMotionVector );

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if( forceNoMotion )
					outMotionVector = float4( 2.0, 0.0, 0.0, 0.0 );

				#ifdef WRITE_MSAA_DEPTH
					depthColor = packedInput.vmeshPositionCS.z;
					depthColor.a = SharpenAlpha(builtinData.opacity, builtinData.alphaClipTreshold);
				#endif

				#ifdef WRITE_NORMAL_BUFFER
					EncodeIntoNormalBuffer(ConvertSurfaceDataToNormalData(surfaceData), outNormalBuffer);
				#endif

				#if defined(WRITE_DECAL_BUFFER)
					DecalPrepassData decalPrepassData;
					#ifdef _DISABLE_DECALS
					ZERO_INITIALIZE(DecalPrepassData, decalPrepassData);
					#else
					decalPrepassData.geomNormalWS = surfaceData.geomNormalWS;
					decalPrepassData.decalLayerMask = GetMeshRenderingDecalLayer();
					#endif
					EncodeIntoDecalPrepassBuffer(decalPrepassData, outDecalBuffer);
					outDecalBuffer.w = (GetMeshRenderingLightLayer() & 0x000000FF) / 255.0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif
			}

			ENDHLSL
		}

		
		Pass
		{
			
			Name "Forward"
			Tags { "LightMode"="Forward" }

			Blend [_SrcBlend] [_DstBlend], [_AlphaSrcBlend] [_AlphaDstBlend]
			Blend 1 SrcAlpha OneMinusSrcAlpha

			Cull [_CullModeForward]
			ZTest [_ZTestDepthEqualForOpaque]
			ZWrite [_ZWrite]

			Stencil
			{
				Ref [_StencilRef]
				WriteMask [_StencilWriteMask]
				Comp Always
				Pass Replace
			}


            ColorMask [_ColorMaskTransparentVelOne] 1
            ColorMask [_ColorMaskTransparentVelTwo] 2

			HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#if !defined(ASE_NEED_CULLFACE)
			#define ASE_NEED_CULLFACE 1
			#endif //ASE_NEED_CULLFACE
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

            #pragma multi_compile_fragment _ SHADOWS_SHADOWMASK
			#pragma multi_compile_fragment SHADOW_LOW SHADOW_MEDIUM SHADOW_HIGH
            #pragma multi_compile_fragment AREA_SHADOW_MEDIUM AREA_SHADOW_HIGH
            #pragma multi_compile_fragment PROBE_VOLUMES_OFF PROBE_VOLUMES_L1 PROBE_VOLUMES_L2
            #pragma multi_compile_fragment SCREEN_SPACE_SHADOWS_OFF SCREEN_SPACE_SHADOWS_ON
            #pragma multi_compile_fragment USE_FPTL_LIGHTLIST USE_CLUSTERED_LIGHTLIST

            #pragma multi_compile _ DEBUG_DISPLAY
            #pragma multi_compile _ LIGHTMAP_ON
            #pragma multi_compile _ DIRLIGHTMAP_COMBINED
            #pragma multi_compile _ DYNAMICLIGHTMAP_ON
            #pragma multi_compile_fragment DECALS_OFF DECALS_3RT DECALS_4RT
            #pragma multi_compile_fragment _ DECAL_SURFACE_GRADIENT

			#ifndef SHADER_STAGE_FRAGMENT
			#define SHADOW_LOW
			#define USE_FPTL_LIGHTLIST
			#endif

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_FORWARD
		    #define HAS_LIGHTLOOP 1

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

		    #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
			#undef  _REFRACTION_PLANE
			#undef  _REFRACTION_SPHERE
			#define _REFRACTION_THIN
		    #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

			CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
			float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
			int _ObjectId;
			int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/Lighting.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoopDef.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/LightLoop/LightLoop.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/LitDecalData.hlsl"

        	#ifdef HAVE_VFX_MODIFICATION
        	#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/VisualEffectVertex.hlsl"
        	#endif

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#define ASE_NEEDS_FRAG_WORLD_NORMAL
			#define ASE_NEEDS_FRAG_WORLD_TANGENT
			#define ASE_NEEDS_FRAG_VFACE
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			void BuildSurfaceData(FragInputs fragInputs, inout GlobalSurfaceDescription surfaceDescription, float3 V, PositionInputs posInput, out SurfaceData surfaceData, out float3 bentNormalWS)
			{
				ZERO_INITIALIZE(SurfaceData, surfaceData);
				surfaceData.specularOcclusion = 1.0;

				surfaceData.baseColor =                 surfaceDescription.BaseColor;
				surfaceData.perceptualSmoothness =		surfaceDescription.Smoothness;
				surfaceData.ambientOcclusion =			surfaceDescription.Occlusion;
				surfaceData.metallic =					surfaceDescription.Metallic;
				surfaceData.coatMask =					surfaceDescription.CoatMask;

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceData.specularOcclusion =			surfaceDescription.SpecularOcclusion;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceData.subsurfaceMask =			surfaceDescription.SubsurfaceMask;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceData.thickness = 				surfaceDescription.Thickness;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceData.transmissionMask =			surfaceDescription.TransmissionMask;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceData.diffusionProfileHash =		asuint(surfaceDescription.DiffusionProfile);
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceData.specularColor =				surfaceDescription.Specular;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceData.anisotropy =				surfaceDescription.Anisotropy;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceData.iridescenceMask =			surfaceDescription.IridescenceMask;
				surfaceData.iridescenceThickness =		surfaceDescription.IridescenceThickness;
				#endif

				// refraction
                #if defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE) || defined(_REFRACTION_THIN)
                    if (_EnableSSRefraction)
                    {
                        surfaceData.ior =                       surfaceDescription.RefractionIndex;
                        surfaceData.transmittanceColor =        surfaceDescription.RefractionColor;
                        surfaceData.atDistance =                surfaceDescription.RefractionDistance;
        
                        surfaceData.transmittanceMask = (1.0 - surfaceDescription.Alpha);
                        surfaceDescription.Alpha = 1.0;
                    }
                    else
                    {
                        surfaceData.ior = 1.0;
                        surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                        surfaceData.atDistance = 1.0;
                        surfaceData.transmittanceMask = 0.0;
                        surfaceDescription.Alpha = 1.0;
                    }
                #else
                    surfaceData.ior = 1.0;
                    surfaceData.transmittanceColor = float3(1.0, 1.0, 1.0);
                    surfaceData.atDistance = 1.0;
                    surfaceData.transmittanceMask = 0.0;
                #endif

				surfaceData.materialFeatures = MATERIALFEATUREFLAGS_LIT_STANDARD;

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SUBSURFACE_SCATTERING;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_TRANSMISSION;
				#endif

                #ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_ANISOTROPY;
                    surfaceData.normalWS = float3(0, 1, 0);
                #endif

				#ifdef _MATERIAL_FEATURE_CLEAR_COAT
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_CLEAR_COAT;
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_IRIDESCENCE;
				#endif

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
                    surfaceData.materialFeatures |= MATERIALFEATUREFLAGS_LIT_SPECULAR_COLOR;
				#endif

				#if defined (_MATERIAL_FEATURE_SPECULAR_COLOR) && defined (_ENERGY_CONSERVING_SPECULAR)
                    surfaceData.baseColor *= ( 1.0 - Max3( surfaceData.specularColor.r, surfaceData.specularColor.g, surfaceData.specularColor.b ) );
				#endif

				#ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
				#else
                    float3 doubleSidedConstants = float3( 1.0, 1.0, 1.0 );
				#endif

				float3 normalTS = float3(0.0f, 0.0f, 1.0f);
				normalTS = surfaceDescription.Normal;

	            

	            
                #if ASE_SRP_VERSION >=140008
                #ifdef DECAL_NORMAL_BLENDING
					normalTS = SurfaceGradientFromTangentSpaceNormalAndFromTBN(normalTS, fragInputs.tangentToWorld[0], fragInputs.tangentToWorld[1]);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;

                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, fragInputs.tangentToWorld[2], normalTS);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                     }
                    #endif

                    GetNormalWS_SG(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);
                #else
					GetNormalWS(fragInputs, normalTS, surfaceData.normalWS, doubleSidedConstants);

                    #if HAVE_DECALS
                    if (_EnableDecals)
                    {
                        float alpha = 1.0;
                        alpha = surfaceDescription.Alpha;
        
                        DecalSurfaceData decalSurfaceData = GetDecalSurfaceData(posInput, fragInputs, alpha);
                        ApplyDecalToSurfaceNormal(decalSurfaceData, surfaceData.normalWS.xyz);
                        ApplyDecalToSurfaceDataNoNormal(decalSurfaceData, surfaceData);
                    }
                    #endif
                #endif
                #endif
               

				surfaceData.geomNormalWS = fragInputs.tangentToWorld[2];
                surfaceData.tangentWS = normalize(fragInputs.tangentToWorld[0].xyz );
                surfaceData.tangentWS = Orthonormalize(surfaceData.tangentWS, surfaceData.normalWS);

				bentNormalWS = surfaceData.normalWS;

				#ifdef ASE_BENT_NORMAL
                    GetNormalWS( fragInputs, surfaceDescription.BentNormal, bentNormalWS, doubleSidedConstants );
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
                    surfaceData.tangentWS = TransformTangentToWorld(surfaceDescription.Tangent, fragInputs.tangentToWorld);
				#endif

				#if defined(DEBUG_DISPLAY)
				    if (_DebugMipMapMode != DEBUGMIPMAPMODE_NONE)
				    {
					   surfaceData.metallic = 0;
				    }
				    ApplyDebugToSurfaceData(fragInputs.tangentToWorld, surfaceData); 
				#endif

                #if defined(_SPECULAR_OCCLUSION_CUSTOM)
                #elif defined(_SPECULAR_OCCLUSION_FROM_AO_BENT_NORMAL)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromBentAO(V, bentNormalWS, surfaceData.normalWS, surfaceData.ambientOcclusion, PerceptualSmoothnessToPerceptualRoughness(surfaceData.perceptualSmoothness));
                #elif defined(_AMBIENT_OCCLUSION) && defined(_SPECULAR_OCCLUSION_FROM_AO)
                    surfaceData.specularOcclusion = GetSpecularOcclusionFromAmbientOcclusion(ClampNdotV(dot(surfaceData.normalWS, V)), surfaceData.ambientOcclusion, PerceptualSmoothnessToRoughness(surfaceData.perceptualSmoothness));
                #endif

                #ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
                    surfaceData.perceptualSmoothness = GeometricNormalFiltering(surfaceData.perceptualSmoothness, fragInputs.tangentToWorld[2], surfaceDescription.SpecularAAScreenSpaceVariance, surfaceDescription.SpecularAAThreshold);
                #endif
			}

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(GlobalSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);
			}

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = vertexToFrag76_g156892;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord11 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord7 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue = ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outputPackedVaryingsMeshToPS.vpassPositionCS = float3(VPASSpositionCS.xyw);
					outputPackedVaryingsMeshToPS.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.uv1 = v.uv1;
				o.uv2 = v.uv2;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.uv1 = patch[0].uv1 * bary.x + patch[1].uv1 * bary.y + patch[2].uv1 * bary.z;
				o.uv2 = patch[0].uv2 * bary.x + patch[1].uv2 * bary.y + patch[2].uv2 * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplayMaterial.hlsl"

            #ifdef UNITY_VIRTUAL_TEXTURING
                #ifdef OUTPUT_SPLIT_LIGHTING
                   #define DIFFUSE_LIGHTING_TARGET SV_Target2
                   #define SSS_BUFFER_TARGET SV_Target3
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                   #define MOTION_VECTOR_TARGET SV_Target2
            	#endif
            #if defined(SHADER_API_PSSL)
            	#pragma PSSL_target_output_format(target 1 FMT_32_ABGR)
            #endif
            #else
                #ifdef OUTPUT_SPLIT_LIGHTING
                #define DIFFUSE_LIGHTING_TARGET SV_Target1
                #define SSS_BUFFER_TARGET SV_Target2
                #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
                #define MOTION_VECTOR_TARGET SV_Target1
                #endif
            #endif

			void Frag(PackedVaryingsMeshToPS packedInput
				, out float4 outColor:SV_Target0
            #ifdef UNITY_VIRTUAL_TEXTURING
				, out float4 outVTFeedback : SV_Target1
            #endif
            #ifdef OUTPUT_SPLIT_LIGHTING
				, out float4 outDiffuseLighting : DIFFUSE_LIGHTING_TARGET
				, OUTPUT_SSSBUFFER(outSSSBuffer) : SSS_BUFFER_TARGET
            #elif defined(_WRITE_TRANSPARENT_MOTION_VECTOR)
				, out float4 outMotionVec : MOTION_VECTOR_TARGET
            #endif
            #ifdef _DEPTHOFFSET_ON
				, out float outputDepth : DEPTH_OFFSET_SEMANTIC
            #endif
		    
						)
			{
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outMotionVec = float4(2.0, 0.0, 0.0, 1.0);
				#endif

				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX( packedInput );
				UNITY_SETUP_INSTANCE_ID( packedInput );
				float3 positionRWS = packedInput.positionRWS.xyz;
				float3 normalWS = packedInput.normalWS.xyz;
				float4 tangentWS = packedInput.tangentWS.xyzw;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);
				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;
				input.positionRWS = positionRWS;
				input.tangentToWorld = BuildTangentToWorld(tangentWS, normalWS);
				input.texCoord1 = packedInput.uv1.xyzw;
				input.texCoord2 = packedInput.uv2.xyzw;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE(packedInput.cullFace, true, false);
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				

				
				AdjustFragInputsToOffScreenRendering(input, _OffScreenRendering > 0, _OffScreenDownsampleFactor);
			

				uint2 tileIndex = uint2(input.positionSS.xy) / GetTileSize ();

				PositionInputs posInput = GetPositionInput( input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz, tileIndex );

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				GlobalSurfaceDescription surfaceDescription = (GlobalSurfaceDescription)0;
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord7.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( normalWS );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord10.xyz;
				float3x3 ase_worldToTangent = float3x3(tangentWS.xyz,ase_worldBitangent,normalWS);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( tangentWS.xyz.x, ase_worldBitangent.x, normalWS.x );
				float3 tanToWorld1 = float3( tangentWS.xyz.y, ase_worldBitangent.y, normalWS.y );
				float3 tanToWorld2 = float3( tangentWS.xyz.z, ase_worldBitangent.z, normalWS.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord11;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				half3 Input_Albedo24_g170507 = Out_Albedo4_g170508;
				#ifdef UNITY_COLORSPACE_GAMMA
				float4 staticSwitch22_g170507 = half4(0.2209163,0.2209163,0.2209163,0.7790837);
				#else
				float4 staticSwitch22_g170507 = half4(0.04,0.04,0.04,0.96);
				#endif
				half4 ColorSpaceDielectricSpec23_g170507 = staticSwitch22_g170507;
				float4 break24_g170502 = Out_Shader4_g170508;
				half Metallic95_g170502 = break24_g170502.x;
				half Input_Metallic25_g170507 = Metallic95_g170502;
				half OneMinusReflectivity31_g170507 = ( (ColorSpaceDielectricSpec23_g170507).w - ( (ColorSpaceDielectricSpec23_g170507).w * Input_Metallic25_g170507 ) );
				
				float3 appendResult23_g170502 = (float3(Out_NormalTS4_g170508 , 1.0));
				float3 temp_output_13_0_g170506 = appendResult23_g170502;
				float3 temp_output_33_0_g170506 = ( temp_output_13_0_g170506 * _render_normal );
				float3 switchResult12_g170506 = (((isFrontFace>0)?(temp_output_13_0_g170506):(temp_output_33_0_g170506)));
				
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.BaseColor = ( Input_Albedo24_g170507 * OneMinusReflectivity31_g170507 );
				surfaceDescription.Normal = switchResult12_g170506;
				surfaceDescription.BentNormal = float3( 0, 0, 1 );
				surfaceDescription.CoatMask = 0;
				surfaceDescription.Metallic = 0;

				#ifdef _MATERIAL_FEATURE_SPECULAR_COLOR
				surfaceDescription.Specular = 0;
				#endif

				surfaceDescription.Emission = (Out_Emissive4_g170508).xyz;
				surfaceDescription.Smoothness = break24_g170502.w;
				surfaceDescription.Occlusion = break24_g170502.y;
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold = _AlphaCutoff;
				#endif

				#ifdef _SPECULAR_OCCLUSION_CUSTOM
				surfaceDescription.SpecularOcclusion = 0;
				#endif

				#ifdef _ENABLE_GEOMETRIC_SPECULAR_AA
				surfaceDescription.SpecularAAScreenSpaceVariance = 0;
				surfaceDescription.SpecularAAThreshold = 0;
				#endif

				#if defined(_HAS_REFRACTION) || defined(_MATERIAL_FEATURE_TRANSMISSION)
				surfaceDescription.Thickness = Out_Thickness4_g170508;
				#endif

				#ifdef _HAS_REFRACTION
				surfaceDescription.RefractionIndex = 1;
				surfaceDescription.RefractionColor = float3( 1, 1, 1 );
				surfaceDescription.RefractionDistance = 0;
				#endif

				#ifdef _MATERIAL_FEATURE_SUBSURFACE_SCATTERING
				surfaceDescription.SubsurfaceMask = 1;
				#endif

				#ifdef _MATERIAL_FEATURE_TRANSMISSION
				surfaceDescription.TransmissionMask = Out_Transmission4_g170508;
				#endif

				#if defined( _MATERIAL_FEATURE_SUBSURFACE_SCATTERING ) || defined( _MATERIAL_FEATURE_TRANSMISSION )
				surfaceDescription.DiffusionProfile = Out_Diffusion4_g170508;
				#endif

				#ifdef _MATERIAL_FEATURE_ANISOTROPY
				surfaceDescription.Anisotropy = 1;
				surfaceDescription.Tangent = float3( 1, 0, 0 );
				#endif

				#ifdef _MATERIAL_FEATURE_IRIDESCENCE
				surfaceDescription.IridescenceMask = 0;
				surfaceDescription.IridescenceThickness = 0;
				#endif

				#ifdef ASE_BAKEDGI
				surfaceDescription.BakedGI = 0;
				#endif

				#ifdef ASE_BAKEDBACKGI
				surfaceDescription.BakedBackGI = 0;
				#endif

				#ifdef _DEPTHOFFSET_ON
				surfaceDescription.DepthOffset = 0;
				#endif

				#ifdef UNITY_VIRTUAL_TEXTURING
				surfaceDescription.VTPackedFeedback = float4(1.0f,1.0f,1.0f,1.0f);
				#endif

				SurfaceData surfaceData;
				BuiltinData builtinData;
				GetSurfaceAndBuiltinData(surfaceDescription,input, V, posInput, surfaceData, builtinData);

				BSDFData bsdfData = ConvertSurfaceDataToBSDFData(input.positionSS.xy, surfaceData);

				PreLightData preLightData = GetPreLightData(V, posInput, bsdfData);

				outColor = float4(0.0, 0.0, 0.0, 0.0);

				#ifdef DEBUG_DISPLAY
				#ifdef OUTPUT_SPLIT_LIGHTING
					outDiffuseLighting = float4(0, 0, 0, 1);
					ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
				#endif

			    bool viewMaterial = GetMaterialDebugColor(outColor, input, builtinData, posInput, surfaceData, bsdfData);

				if (!viewMaterial)
				{
					if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_DIFFUSE_COLOR || _DebugFullScreenMode == FULLSCREENDEBUGMODE_VALIDATE_SPECULAR_COLOR)
					{
						float3 result = float3(0.0, 0.0, 0.0);
						GetPBRValidatorDebug(surfaceData, result);
						outColor = float4(result, 1.0f);
					}
					else if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_TRANSPARENCY_OVERDRAW)
					{
						float4 result = _DebugTransparencyOverdrawWeight * float4(TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_COST, TRANSPARENCY_OVERDRAW_A);
						outColor = result;
					}
					else
                #endif
					{
                #ifdef _SURFACE_TYPE_TRANSPARENT
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_TRANSPARENT;
                #else
						uint featureFlags = LIGHT_FEATURE_MASK_FLAGS_OPAQUE;
                #endif
						LightLoopOutput lightLoopOutput;
						LightLoop(V, posInput, preLightData, bsdfData, builtinData, featureFlags, lightLoopOutput);

						// Alias
						float3 diffuseLighting = lightLoopOutput.diffuseLighting;
						float3 specularLighting = lightLoopOutput.specularLighting;

						diffuseLighting *= GetCurrentExposureMultiplier();
						specularLighting *= GetCurrentExposureMultiplier();

                #ifdef OUTPUT_SPLIT_LIGHTING
						if (_EnableSubsurfaceScattering != 0 && ShouldOutputSplitLighting(bsdfData))
						{
							outColor = float4(specularLighting, 1.0);
							outDiffuseLighting = float4(TagLightingForSSS(diffuseLighting), 1.0);
						}
						else
						{
							outColor = float4(diffuseLighting + specularLighting, 1.0);
							outDiffuseLighting = float4(0, 0, 0, 1);
						}
						ENCODE_INTO_SSSBUFFER(surfaceData, posInput.positionSS, outSSSBuffer);
                #else
						outColor = ApplyBlendMode(diffuseLighting, specularLighting, builtinData.opacity);
						outColor = EvaluateAtmosphericScattering(posInput, V, outColor);
                #endif

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
						float4 VPASSpositionCS = float4(packedInput.vpassPositionCS.xy, 0.0, packedInput.vpassPositionCS.z);
						float4 VPASSpreviousPositionCS = float4(packedInput.vpassPreviousPositionCS.xy, 0.0, packedInput.vpassPreviousPositionCS.z);
						bool forceNoMotion = any(unity_MotionVectorsParams.yw == 0.0);
                #if defined(HAVE_VFX_MODIFICATION) && !VFX_FEATURE_MOTION_VECTORS
                        forceNoMotion = true;
                #endif
				        if (!forceNoMotion)
						{
							float2 motionVec = CalculateMotionVector(VPASSpositionCS, VPASSpreviousPositionCS);
							EncodeMotionVector(motionVec * 0.5, outMotionVec);
							outMotionVec.zw = 1.0;
						}
				#endif
				}

				#ifdef DEBUG_DISPLAY
				}
				#endif

				#ifdef _DEPTHOFFSET_ON
				outputDepth = posInput.deviceDepth;
				#endif

                #ifdef UNITY_VIRTUAL_TEXTURING
				    float vtAlphaValue = builtinData.opacity;
                    #if defined(HAS_REFRACTION) && HAS_REFRACTION
					vtAlphaValue = 1.0f - bsdfData.transmittanceMask;
                #endif
				outVTFeedback = PackVTFeedbackWithAlpha(builtinData.vtPackedFeedback, input.positionSS.xy, vtAlphaValue);
                #endif

			}
			ENDHLSL
		}

		
		Pass
        {
			
            Name "ScenePickingPass"
            Tags { "LightMode"="Picking" }

            Cull [_CullMode]

            HLSLPROGRAM
			#pragma shader_feature_local _ _DOUBLESIDED_ON
			#define SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			#pragma shader_feature_local_fragment _ _DISABLE_DECALS
			#define _SPECULAR_OCCLUSION_FROM_AO 1
			#pragma multi_compile_instancing
			#pragma instancing_options renderinglayer
			#define _MATERIAL_FEATURE_TRANSMISSION 1
			#pragma multi_compile _ LOD_FADE_CROSSFADE
			#define ASE_ABSOLUTE_VERTEX_POS 1
			#define _AMBIENT_OCCLUSION 1
			#define HAVE_MESH_MODIFICATION
			#define ASE_SRP_VERSION 140011
			#define ASE_USING_SAMPLING_MACROS 1

			#pragma editor_sync_compilation
            #pragma multi_compile _ DOTS_INSTANCING_ON

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#pragma vertex Vert
			#pragma fragment Frag

			#define SHADERPASS SHADERPASS_DEPTH_ONLY
			#define SCENEPICKINGPASS 1

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT
			#define VARYINGS_NEED_TANGENT_TO_WORLD

            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
        	#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
            #include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

            //#if !defined(SHADER_STAGE_RAY_TRACING) && SHADERPASS != SHADERPASS_RAYTRACING_GBUFFER && SHADERPASS != SHADERPASS_FULL_SCREEN_DEBUG
            //#define FRAG_INPUTS_ENABLE_STRIPPING
            //#endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

            #ifdef RAYTRACING_SHADER_GRAPH_DEFAULT
                #define RAYTRACING_SHADER_GRAPH_HIGH
            #endif

            #ifdef RAYTRACING_SHADER_GRAPH_RAYTRACED
                #define RAYTRACING_SHADER_GRAPH_LOW
            #endif

            #ifndef SHADER_UNLIT
            #if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
                #define VARYINGS_NEED_CULLFACE
            #endif
            #endif

			#if defined(_DOUBLESIDED_ON) && !defined(ASE_NEED_CULLFACE)
			    #define ASE_NEED_CULLFACE 1
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
			#define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

            #if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
            #if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
                #define WRITE_NORMAL_BUFFER
            #endif
            #endif

            #ifndef DEBUG_DISPLAY
                #if !defined(_SURFACE_TYPE_TRANSPARENT)
                    #if SHADERPASS == SHADERPASS_FORWARD
                    #define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
                    #elif SHADERPASS == SHADERPASS_GBUFFER
                    #define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
                    #endif
                #endif
            #endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif
	
            CBUFFER_START( UnityPerMaterial )
			half4 _OverlayColoringOn;
			float4 _WetnessDropsTex_ST;
			half4 _CutoutColoring;
			half4 _CutoutMeshRemap;
			half4 _object_phase_mode;
			half4 _DitherColoring;
			half4 _PerspectiveColoring;
			half4 _SizeFadeColoring;
			float4 _OverlayGlitterTex_ST;
			half4 _ThirdCoordValue;
			half4 _ThirdMaskCoordValue;
			half4 _SecondCoordValue;
			half4 _MotionPushMaskRemap;
			half4 _SecondMaskCoordValue;
			half4 _MainCoordValue;
			half4 _main_coord_value;
			half4 _InteractionColoring;
			half4 _MainColorTwo;
			half4 _MainColor;
			half4 _MainMultiRemap;
			half4 _second_coord_value;
			half4 _SecondColorTwo;
			half4 _motion_small_vert_mode;
			half4 _motion_small_proc_mode;
			half4 _WetnessWaterBlendRemap;
			half4 _MotionSmallMaskRemap;
			half4 _VariationColoring;
			half4 _MotionBaseMaskRemap;
			half4 _VariationColorTwo;
			half4 _motion_base_proc_mode;
			half4 _motion_base_vert_mode;
			half4 _VariationColorOne;
			half4 _VariationNoiseRemap;
			half4 _TintingColoring;
			half4 _MotionTinyMaskRemap;
			float4 _TintingColor;
			half4 _SecondColor;
			half4 _motion_tiny_proc_mode;
			half4 _TintingLumaRemap;
			half4 _TintingMeshRemap;
			half4 _TintingBlendRemap;
			half4 _DrynessColoring;
			float4 _DrynessColor;
			half4 _DrynessLumaRemap;
			half4 _DrynessMeshRemap;
			half4 _DrynessBlendRemap;
			half4 _WetnessColoring;
			half4 _WetnessWaterColor;
			half4 _motion_tiny_vert_mode;
			half4 _SecondMultiRemap;
			half4 _second_mask_coord_value;
			half4 _SecondMaskRemap;
			half4 _OverlayCoordValue;
			half4 _overlay_mask_coord_value;
			half4 _OverlayMaskCoordValue;
			half4 _OverlayMaskRemap;
			half4 _OverlayProjRemap;
			half4 _OverlayLumaRemap;
			half4 _overlay_vert_mode;
			half4 _Color;
			half4 _OverlayMeshRemap;
			half4 _OverlayBlendRemap1;
			half4 _overlay_coord_value;
			float4 _SubsurfaceDiffusion_Asset;
			half4 _EmissiveMeshRemap;
			half4 _emissive_coord_value;
			half4 _NormalColoringEnd;
			half4 _NormalColoringStart;
			half4 _EmissiveCoordValue;
			half4 _OverlayGlitterColor;
			half4 _EmissiveMaskRemap;
			half4 _EmissiveColor;
			half4 _SubsurfaceColor;
			half4 _OverlayColoringOff;
			half4 _emissive_vert_mode;
			half4 _NormalMeshRemap;
			half4 _OverlayColor;
			half4 _third_vert_mode;
			half4 _SecondProjRemap;
			half4 _second_vert_mode;
			half4 _SecondMeshRemap;
			half4 _SecondBlendRemap;
			half4 _third_coord_value;
			half4 _ThirdColorTwo;
			half4 _ThirdColor;
			half4 _ThirdMultiRemap;
			half4 _third_mask_coord_value;
			half4 _ThirdMaskRemap;
			half4 _MotionHighlightColor;
			half4 _normal_vert_mode;
			half4 _ThirdProjRemap;
			half4 _ThirdBlendRemap;
			half4 _OcclusionColorTwo;
			half4 _OcclusionColorOne;
			half4 _occlusion_vert_mode;
			half4 _OcclusionMeshRemap;
			half4 _GradientColorTwo;
			half4 _GradientColorOne;
			half4 _gradient_vert_mode;
			half4 _GradientMeshRemap;
			half4 _ThirdMeshRemap;
			half3 _motion_highlight_color;
			half3 _render_normal;
			half3 _NormalSphereOffsetValue;
			half _SecondMeshMode;
			half _SecondMeshValue;
			half _IsLiteShader;
			half _IsSubsurfaceShader;
			half _SecondProjValue;
			half _IsGeneralShader;
			half _GlobalLiteInfo;
			half _SecondMaskValue;
			half _NormalEnd;
			half _SecondIntensityValue;
			half _SecondBlendAlbedoValue;
			half _SecondColorMode;
			half _NormalComputeValue;
			half _SecondSmoothnessValue;
			half _NormalCategory;
			half _GlobalCategory;
			half _GlobalEnd;
			half _render_coverage;
			half _ThirdBlendAlbedoValue;
			half _ThirdColorMode;
			half _render_src;
			half _ThirdSmoothnessValue;
			half _ThirdOcclusionValue;
			half _ThirdMetallicValue;
			half _render_cull;
			half _render_dst;
			half _ThirdAlbedoValue;
			half _render_zw;
			half _SecondAlphaClipValue;
			half _SecondBlendShaderValue;
			half _SecondNormalValue;
			half _SecondBlendNormalValue;
			half _SecondBlendIntensityValue;
			half _SecondOcclusionValue;
			half _ThirdIntensityValue;
			half _SecondMetallicValue;
			half _MotionWindEnd;
			half _SecondElementMode;
			half _MotionPushPhaseValue;
			half _SecondMaskCoordMode;
			half _SecondMaskSampleMode;
			half _MotionPushMaskMode;
			half _SecondCoordMode;
			half _SecondBakeMode;
			half _SecondSampleMode;
			half _LayerCategory;
			half _ThirdBakeMode;
			half _ThirdElementMode;
			half _MotionPushElementMode;
			half _ThirdMaskCoordMode;
			half _ThirdMaskSampleMode;
			half _LayerEnd;
			half _MainCategory;
			half _MainEnd;
			half _MainSampleMode;
			half _SecondAlbedoValue;
			half _MotionWindElementMode;
			half _MainAlphaClipValue;
			half _MainNormalValue;
			half _MainColorMode;
			half _MotionInteractionCategory;
			half _MainSmoothnessValue;
			half _MainOcclusionValue;
			half _MainMetallicValue;
			half _MotionInteractionEnd;
			half _InteractionLiteInfo;
			half _MainAlbedoValue;
			half _MotionPushIntensityValue;
			half _MotionPushPivotValue;
			half _MainCoordMode;
			half _MotionWindCategory;
			half _ObjectCategory;
			half _RenderFilter;
			half _ThirdMaskValue;
			half _OverlayNormalValue;
			half _SubsurfaceSpace;
			half _OverlayMeshMode;
			half _OverlayMeshValue;
			half _RenderZWrite;
			half _Cutoff;
			half _OverlaySmoothnessValue;
			half _OverlayLumaValue;
			half _OverlayProjValue;
			half _RenderCategory;
			half _OverlayMaskValue;
			half _RenderEnd;
			half _RenderMode;
			half _OverlayMaskCoordMode;
			half _IsVersion;
			half _OverlaySubsurfaceValue;
			float _SubsurfaceDiffusion;
			half _SubsurfaceAngleValue;
			half _SubsurfaceMultiValue;
			half _SubsurfaceIntensityValue;
			half _OverlayGlitterTillingValue;
			half _EmissiveExposureValue;
			float _emissive_power_value;
			half _OverlayGlitterIntensityValue;
			half _EmissiveIntensityValue;
			half _EmissiveMaskValue;
			half _OverlayLiteInfo;
			half _NormalLiteInfo;
			half _EmissiveCoordMode;
			half _EmissiveSampleMode;
			half _SubsurfaceScatteringValue;
			half _EmissiveMeshMode;
			half _EmissiveMeshValue;
			half _OverlayMaskSampleMode;
			half _IsIdentifier;
			half _NoiseCategory;
			half _OverlayTextureMode;
			half _IsTVEShader;
			half _IsCustomShader;
			half _ThirdAlphaClipValue;
			half _ThirdBlendShaderValue;
			half _ThirdNormalValue;
			half _ThirdBlendNormalValue;
			half _RenderShadow;
			half _ThirdBlendIntensityValue;
			half _ThirdProjValue;
			half _HasDefaultTextures;
			half _ThirdMeshMode;
			half _ThirdMeshValue;
			half _IsCollected;
			half _IsConverted;
			half _IsShared;
			half _RenderClip;
			half _OcclusionMeshMode;
			half _OcclusionIntensityValue;
			half _NoiseEnd;
			half _OverlayCoordMode;
			half _OverlaySampleMode;
			half _RenderCull;
			half _RenderNormal;
			half _RenderBakeGI;
			half _MotionHighlightValue;
			half _RenderDecals;
			half _GradientMultiValue;
			half _GradientIntensityValue;
			half _GradientMeshMode;
			half _RenderSSR;
			half _RenderPriority;
			half _RenderQueue;
			half _RenderMotion;
			half _OverlayIntensityValue;
			half _NormalSphereValue;
			half _ThirdCoordMode;
			half _DetailEnd;
			half _DrynessMeshValue;
			half _MotionTillingValue;
			half _DrynessMeshMode;
			half _MotionIntensityValue;
			half _DrynessLumaValue;
			half _DrynessMultiValue;
			half _MotionBasePhaseValue;
			half _DrynessSubsurfaceValue;
			half _DrynessShiftValue;
			half _DrynessGrayValue;
			half _global_wind_layer_value;
			half _DrynessIntensityValue;
			half _DrynessBakeMode;
			half _DrynessElementMode;
			half _DrynessSmoothnessValue;
			half _WetnessLiteInfo;
			half _MotionBasePivotValue;
			half _WetnessCategory;
			half _WetnessDropsDistValue;
			half _WetnessDropsTillingValue;
			half _WetnessDropsNormalValue;
			half _WetnessDropsIntensityValue;
			half _MotionSmallIntensityValue;
			half _motion_small_mask_mode;
			half _WetnessWaterBaseValue;
			half _MotionSmallMaskMode;
			half _WetnessWaterIntensityValue;
			half _WetnessSmoothnessValue;
			half _WetnessContrastValue;
			half _WetnessIntensityValue;
			half _WetnessBakeMode;
			half _WetnessElementMode;
			half _WetnessEnd;
			half _DrynessSpace;
			half _CutoutLiteInfo;
			half _DrynessEnd;
			half _MotionSmallPivotValue;
			half _VariationNoisePivotsValue1;
			half _MotionDistValue;
			half _VariationMultiValue;
			half _MotionBaseIntensityValue;
			half _motion_base_mask_mode;
			half _VariationIntensityValue;
			half _VariationNoiseTillingValue;
			half _VariationEnd;
			half _MotionBaseMaskMode;
			half _VariationLiteInfo;
			half _NormalMeshMode;
			half _NormalMeshValue;
			half _MotionDelayValue;
			half _NormalFlattenValue;
			half _VariationCategory;
			half _TintingLiteInfo;
			half _MotionTinyMaskMode;
			half _TintingCategory;
			half _DrynessLiteInfo;
			half _MotionSmallPhaseValue;
			half _TintingMeshValue;
			half _MotionFrontValue;
			half _TintingMeshMode;
			half _MotionTinyIntensityValue;
			half _TintingLumaValue;
			half _TintingMultiValue;
			half _TintingGrayValue;
			half _motion_tiny_mask_mode;
			half _TintingIntensityValue;
			half _TintingElementMode;
			half _TintingBakeMode;
			half _TintingSpace;
			half _TintingEnd;
			half _DrynessCategory;
			half _ThirdSampleMode;
			half _ObjectRadiusValue;
			half _CutoutEnd;
			half _EmissiveCategory;
			half _SubsurfaceElementMode;
			half _SubsurfaceShadowValue;
			half _SubsurfaceAmbientValue;
			half _SubsurfaceNormalValue;
			half _SubsurfaceDirectValue;
			half _EmissiveEnd;
			half _SubsurfaceEnd;
			half _SizeFadeDistMaxValue;
			half _SizeFadeDistMinValue;
			half _SizeFadeScaleValue;
			half _SizeFadeScaleMode;
			half _SizeFadeIntensityValue;
			half _SizeFadeElementMode;
			half _SubsurfaceCategory;
			half _EmissivePowerMode;
			half _EmissivePowerValue;
			half _EmissiveElementMode;
			half _DetailCategory;
			half _OcclusionBakeMode;
			half _OcclusionEnd;
			half _OcclusionCategory;
			half _GradientBakeMode;
			half _GradientEnd;
			half _GradientCategory;
			half _OverlayGlitterDistValue;
			half _ObjectEnd;
			half _OverlayBakeMode;
			half _OverlayElementMode;
			half _OverlaySpace;
			half _OverlayEnd;
			half _OverlayCategory;
			half _EmissiveFlagMode;
			half _SizeFadeEnd;
			half _CutoutCategory;
			half _SizeFadeCategory;
			half _SizeFadeLiteInfo;
			half _ObjectPhaseMode;
			half _DitherLiteInfo;
			half _ObjectHeightValue;
			half _CutoutMeshMode;
			half _CutoutMeshValue;
			half _CutoutNoiseTillingValue;
			half _DitherCategory;
			half _CutoutNoiseValue;
			half _CutoutMultiValue;
			half _CutoutShadowMode;
			half _CutoutIntensityValue;
			half _CutoutBakeMode;
			half _CutoutElementMode;
			half _CutoutSpace;
			half _CutoutAlphaValue;
			half _DitherEnd;
			half _DitherConstantValue;
			half _DitherProximityValue;
			half _PerspectiveAngleValue;
			half _PerspectiveIntensityValue;
			half _PerspectiveEnd;
			half _PerspectiveCategory;
			half _ObjectPivotMode;
			half _PerspectiveLiteInfo;
			half _DitherNoiseTillingValue;
			half _DitherMultiValue;
			half _DitherShadowMode;
			half _DitherDistanceMinValue;
			half _DitherDistanceMaxValue;
			half _DitherDistanceValue;
			half _SubsurfaceThicknessValue;
			half _DitherGlancingValue;
			half _DitherProximityDistValue;
			half _ObjectModelMode;
			half _DitherGlancingAngleValue;
			float4 _EmissionColor;
			float _AlphaCutoff;
			float _RenderQueueType;
			#ifdef _ADD_PRECOMPUTED_VELOCITY
			    float _AddPrecomputedVelocity;
			#endif
			float _StencilRef;
			float _StencilWriteMask;
			float _StencilRefDepth;
			float _StencilWriteMaskDepth;
			float _StencilRefMV;
			float _StencilWriteMaskMV;
			float _StencilRefDistortionVec;
			float _StencilWriteMaskDistortionVec;
			float _StencilWriteMaskGBuffer;
			float _StencilRefGBuffer;
			float _ZTestGBuffer;
			float _RequireSplitLighting;
			float _ReceivesSSR;
			float _SurfaceType;
			float _BlendMode;
            #ifdef SUPPORT_BLENDMODE_PRESERVE_SPECULAR_LIGHTING
			    float _EnableBlendModePreserveSpecularLighting;
            #endif
			float _SrcBlend;
			float _DstBlend;
			float _AlphaSrcBlend;
			float _AlphaDstBlend;
			float _ZWrite;
			float _TransparentZWrite;
			float _CullMode;
			float _TransparentSortPriority;
			float _EnableFogOnTransparent;
			float _CullModeForward;
			float _TransparentCullMode;
			float _ZTestDepthEqualForOpaque;
			float _ZTestTransparent;
			float _TransparentBackfaceEnable;
			float _AlphaCutoffEnable;
			float _UseShadowThreshold;
			float _DoubleSidedEnable;
			float _DoubleSidedNormalMode;
			float4 _DoubleSidedConstants;
			#ifdef ASE_TESSELLATION
			    float _TessPhongStrength;
			    float _TessValue;
			    float _TessMin;
			    float _TessMax;
			    float _TessEdgeLength;
			    float _TessMaxDisp;
			#endif
			CBUFFER_END

            #ifdef SCENEPICKINGPASS
            float4 _SelectionID;
            #endif

            #ifdef SCENESELECTIONPASS
            int _ObjectId;
            int _PassValue;
            #endif

			TEXTURE2D(_OverlayGlitterTex);
			SAMPLER(sampler_OverlayGlitterTex);
			TEXTURE2D(_BumpMap);
			SAMPLER(sampler_BumpMap);
			TEXTURE2D(_MainTex);
			SAMPLER(sampler_MainTex);
			TEXTURE3D(_NoiseTex3D);
			SAMPLER(sampler_NoiseTex3D);
			float3 TVE_WorldOrigin;
			float4x4 unity_CameraProjection;
			float4x4 unity_CameraInvProjection;
			float4x4 unity_WorldToCamera;
			float4x4 unity_CameraToWorld;
			TEXTURE2D(_MotionNoiseTex);
			SAMPLER(sampler_Linear_Repeat);
			float TVE_WindLayers[10];
			TEXTURE2D_ARRAY(TVE_WindBaseTex);
			half4 TVE_RenderBaseCoords;
			SAMPLER(sampler_Linear_Clamp);
			TEXTURE2D_ARRAY(TVE_WindNearTex);
			half4 TVE_RenderNearCoords;
			float4 TVE_RenderNearPositionR;
			half TVE_RenderNearFadeValue;
			half4 TVE_WindParams;
			half _DisableSRPBatcher;
			TEXTURE2D(_WetnessDropsTex);
			SAMPLER(sampler_WetnessDropsTex);
			TEXTURE2D(_MainAlbedoTex);
			SAMPLER(sampler_Linear_Repeat_Aniso8);
			SAMPLER(sampler_Point_Repeat);
			TEXTURE2D(_MainShaderTex);
			TEXTURE2D(_MainNormalTex);
			TEXTURE2D(_SecondAlbedoTex);
			TEXTURE2D(_SecondShaderTex);
			TEXTURE2D(_SecondMaskTex);
			half4 TVE_CoatParams;
			half4 TVE_PaintParams;
			half4 TVE_GlowParams;
			half4 TVE_AtmoParams;
			half4 TVE_FormParams;
			half4 TVE_PushParams;
			half TVE_IsEnabled;
			TEXTURE2D(_SecondNormalTex);
			TEXTURE2D(_ThirdAlbedoTex);
			TEXTURE2D(_ThirdShaderTex);
			TEXTURE2D(_ThirdMaskTex);
			TEXTURE2D(_ThirdNormalTex);
			TEXTURE2D(_OverlayAlbedoTex);
			TEXTURE2D(_OverlayMaskTex);
			TEXTURE2D(_OverlayNormalTex);
			TEXTURE2D(_EmissiveMaskTex);


            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/PickingSpaceTransforms.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Decal/DecalUtilities.hlsl"

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/CommonLighting.hlsl"
			#define ASE_NEEDS_VERT_POSITION
			#define ASE_NEEDS_VERT_NORMAL
			#define ASE_NEEDS_VERT_TANGENT
			#pragma shader_feature_local_fragment TVE_PIPELINE_STANDARD TVE_PIPELINE_UNIVERSAL TVE_PIPELINE_HD
			#pragma shader_feature_local_fragment TVE_FILTER_DEFAULT TVE_FILTER_POINT TVE_FILTER_LOW TVE_FILTER_MEDIUM TVE_FILTER_HIGH
			#pragma shader_feature_local_vertex TVE_PIVOT_OFF TVE_PIVOT_BAKED TVE_PIVOT_PROC
			#pragma shader_feature_local_vertex TVE_MOTION_SMALL_SQUASH
			#pragma shader_feature_local TVE_LEGACY
			#pragma shader_feature_local_vertex TVE_MOTION_WIND_ELEMENT
			#pragma shader_feature_local_vertex TVE_MOTION_TINY_FLUTTER
			#pragma shader_feature_local_vertex TVE_MOTION_BASE_BENDING
			#pragma shader_feature_local_fragment TVE_OVERLAY
			#pragma shader_feature_local_fragment TVE_MOTION_HIGHLIGHT
			#pragma shader_feature_local_fragment TVE_GRADIENT
			#pragma shader_feature_local_fragment TVE_OCCLUSION
			#pragma shader_feature_local_fragment TVE_THIRD
			#pragma shader_feature_local_fragment TVE_SECOND
			#pragma shader_feature_local_fragment TVE_MAIN_SAMPLE_MAIN_UV TVE_MAIN_SAMPLE_EXTRA_UV TVE_MAIN_SAMPLE_PLANAR_2D TVE_MAIN_SAMPLE_PLANAR_3D TVE_MAIN_SAMPLE_STOCHASTIC_2D TVE_MAIN_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_ALPHA_CLIP
			#pragma shader_feature_local_fragment TVE_SECOND_SAMPLE_MAIN_UV TVE_SECOND_SAMPLE_EXTRA_UV TVE_SECOND_SAMPLE_PLANAR_2D TVE_SECOND_SAMPLE_PLANAR_3D TVE_SECOND_SAMPLE_STOCHASTIC_2D TVE_SECOND_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_SECOND_MASK_SAMPLE_MAIN_UV TVE_SECOND_MASK_SAMPLE_EXTRA_UV TVE_SECOND_MASK_SAMPLE_PLANAR_2D TVE_SECOND_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_SECOND_ELEMENT
			#pragma shader_feature_local_fragment TVE_THIRD_SAMPLE_MAIN_UV TVE_THIRD_SAMPLE_EXTRA_UV TVE_THIRD_SAMPLE_PLANAR_2D TVE_THIRD_SAMPLE_PLANAR_3D TVE_THIRD_SAMPLE_STOCHASTIC_2D TVE_THIRD_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_THIRD_MASK_SAMPLE_MAIN_UV TVE_THIRD_MASK_SAMPLE_EXTRA_UV TVE_THIRD_MASK_SAMPLE_PLANAR_2D TVE_THIRD_MASK_SAMPLE_PLANAR_3D
			#pragma shader_feature_local_fragment TVE_THIRD_ELEMENT
			#pragma shader_feature_local_fragment TVE_OVERLAY_TEX
			#pragma shader_feature_local_fragment TVE_OVERLAY_SAMPLE_PLANAR_2D TVE_OVERLAY_SAMPLE_PLANAR_3D TVE_OVERLAY_SAMPLE_STOCHASTIC_2D TVE_OVERLAY_SAMPLE_STOCHASTIC_3D
			#pragma shader_feature_local_fragment TVE_OVERLAY_MASK_SAMPLE_MAIN_UV TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_OVERLAY_ELEMENT
			#pragma shader_feature_local_fragment TVE_EMISSIVE
			#pragma shader_feature_local_fragment TVE_EMISSIVE_SAMPLE_MAIN_UV TVE_EMISSIVE_SAMPLE_EXTRA_UV
			#pragma shader_feature_local_fragment TVE_EMISSIVE_ELEMENT
			#pragma shader_feature_local_fragment TVE_SUBSURFACE
			#pragma shader_feature_local_fragment TVE_SUBSURFACE_ELEMENT
			//SHADER INJECTION POINT BEGIN
			//SHADER INJECTION POINT END
			  
			struct TVEVisualData
			{  
				half Dummy;  
				half3 Albedo;
				half2 NormalTS;
				half3 NormalWS; 
				half4 Shader;
				half4 Emissive;
				half AlphaClip;
				half AlphaFade;
				half MultiMask;
				half Grayscale;
				half Luminosity;
				half3 Translucency;
				half Transmission;
				half Thickness;
				float Diffusion;
			};  
			    
			struct TVEModelData
			{    
				half Dummy;    
				half3 PositionOS;
				half3 PositionWS;
				half3 PositionWO;
				half3 PositionRawOS;
				half3 PositionAddOS;
				half3 PivotOS;
				half3 PivotWS;
				half3 PivotWO;
				half3 NormalOS;
				half3 NormalWS;
				half3 NormalRawOS;
				half3 NormalRawWS;
				half4 TangentOS;
				half3 ViewDirWS;
				half4 VertexData;
				half4 MotionData;
				half4 BoundsData;
				half4 RotationData;
			};    
			      
			struct TVEGlobalData
			{      
				half Dummy;      
				half4 CoatParams;
				half4 PaintParams;
				half4 GlowParams;
				half4 AtmoParams;
				half4 FadeParams;
				half4 FormParams;
				half4 LandParams;
				half4 WindParams;
				half4 PushParams;
			};      
			        
			//#pragma editor_sync_compilation


			struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 uv1 : TEXCOORD1;
				float4 uv2 : TEXCOORD2;
				float3 previousPositionOS : TEXCOORD4;
				float3 precomputedVelocity : TEXCOORD5;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;
				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_Position;
				float3 positionRWS : TEXCOORD0;
				float3 normalWS : TEXCOORD1;
				float4 tangentWS : TEXCOORD2;
				float4 uv1 : TEXCOORD3;
				float4 uv2 : TEXCOORD4;
				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					float3 vpassPositionCS : TEXCOORD5;
					float3 vpassPreviousPositionCS : TEXCOORD6;
				#endif
				float4 ase_texcoord7 : TEXCOORD7;
				float4 ase_texcoord8 : TEXCOORD8;
				float4 ase_texcoord9 : TEXCOORD9;
				float4 ase_color : COLOR;
				float4 ase_texcoord10 : TEXCOORD10;
				float4 ase_texcoord11 : TEXCOORD11;
				UNITY_VERTEX_INPUT_INSTANCE_ID
				UNITY_VERTEX_OUTPUT_STEREO
				#if defined(SHADER_STAGE_FRAGMENT) && defined(ASE_NEED_CULLFACE)
				FRONT_FACE_TYPE cullFace : FRONT_FACE_SEMANTIC;
				#endif
			};

			float3 ObjectPosition_UNITY_MATRIX_M(  )
			{
				return float3(UNITY_MATRIX_M[0].w, UNITY_MATRIX_M[1].w, UNITY_MATRIX_M[2].w );
			}
			
			float2 DecodeFloatToVector2( float enc )
			{
				float2 result ;
				result.y = enc % 2048;
				result.x = floor(enc / 2048);
				return result / (2048 - 1);
			}
			
			float3 ASESafeNormalize(float3 inVec)
			{
				float dp3 = max(1.175494351e-38, dot(inVec, inVec));
				return inVec* rsqrt(dp3);
			}
			
			void ComputeWorldCoords( half4 Coords, half3 WorldPosition, out half2 ZX, out half2 ZY, out half2 XY )
			{
				ZX = WorldPosition.xz * Coords.xx - Coords.zz;
				ZY = WorldPosition.yz * Coords.yx - Coords.wz; 
				XY = WorldPosition.xy * Coords.xy - Coords.zw;
			}
			
			half4 SampleMain( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SampleExtra( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, half2 TexCoord )
			{
				half2 UV = TexCoord * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			half4 SamplePlanar2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half4 tex = SAMPLE_TEXTURE2D( Texture, Sampler, UV);
				return tex;
			}
			
			void ComputeTriplanarWeights( half3 WorldNormal, out half T1, out half T2, out half T3 )
			{
				half3 powNormal = abs( WorldNormal.xyz );
				half3 weights = max( powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal * powNormal, 0.000001 );
				weights /= ( weights.x + weights.y + weights.z ).xxx;
				T1 = weights.y;
				T2 = weights.x;
				T3 = weights.z;
			}
			
			half4 SamplePlanar3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				half4 tex1 = SAMPLE_TEXTURE2D( Texture, Sampler, ZX);
				half4 tex2 = SAMPLE_TEXTURE2D( Texture, Sampler, ZY);
				half4 tex3 = SAMPLE_TEXTURE2D( Texture, Sampler, XY);
				return tex1 * T1 + tex2 * T2 + tex3 * T3;
			}
			
			void ComputeStochasticCoords( float2 UV, out float2 UV1, out float2 UV2, out float2 UV3, out float W1, out float W2, out float W3 )
			{
				half2 vertex1, vertex2, vertex3;
				// Scaling of the input
				half2 uv = UV * 3.464; // 2 * sqrt (3)
				// Skew input space into simplex triangle grid
				const float2x2 gridToSkewedGrid = float2x2( 1.0, 0.0, -0.57735027, 1.15470054 );
				half2 skewedCoord = mul( gridToSkewedGrid, uv );
				// Compute local triangle vertex IDs and local barycentric coordinates
				int2 baseId = int2( floor( skewedCoord ) );
				half3 temp = half3( frac( skewedCoord ), 0 );
				temp.z = 1.0 - temp.x - temp.y;
				if ( temp.z > 0.0 )
				{
					W1 = temp.z;
					W2 = temp.y;
					W3 = temp.x;
					vertex1 = baseId;
					vertex2 = baseId + int2( 0, 1 );
					vertex3 = baseId + int2( 1, 0 );
				}
				else
				{
					W1 = -temp.z;
					W2 = 1.0 - temp.y;
					W3 = 1.0 - temp.x;
					vertex1 = baseId + int2( 1, 1 );
					vertex2 = baseId + int2( 1, 0 );
					vertex3 = baseId + int2( 0, 1 );
				}
				UV1 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex1 ) ) * 43758.5453 );
				UV2 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex2 ) ) * 43758.5453 );
				UV3 = UV + frac( sin( mul( float2x2( 127.1, 311.7, 269.5, 183.3 ), vertex3 ) ) * 43758.5453 );
				return;
			}
			
			float4 SampleStochastic2D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition )
			{
				half2 UV = WorldPosition.xz * Coords.xy + Coords.zw;
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				ComputeStochasticCoords(UV, UV1, UV2, UV3, W1, W2, W3 );
				half4 tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(UV), ddy(UV));
				half4 tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(UV), ddy(UV));
				half4 tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(UV), ddy(UV));
				return tex1 * W1 + tex2 * W2 + tex3 * W3;
			}
			
			half4 SampleStochastic3D( TEXTURE2D(Texture), SamplerState Sampler, half4 Coords, float3 WorldPosition, half3 WorldNormal )
			{
				half2 ZX, ZY, XY;
				ComputeWorldCoords(Coords, WorldPosition, ZX, ZY, XY);
				half2 UV1, UV2, UV3;
				half W1, W2, W3;
				half4 tex1, tex2, tex3;
				ComputeStochasticCoords(ZX, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZX), ddy(ZX));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZX), ddy(ZX));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZX), ddy(ZX));
				half4 texZX = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(ZY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(ZY), ddy(ZY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(ZY), ddy(ZY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(ZY), ddy(ZY));
				half4 texZY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				ComputeStochasticCoords(XY, UV1, UV2, UV3, W1, W2, W3 );
				tex1 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV1, ddx(XY), ddy(XY));
				tex2 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV2, ddx(XY), ddy(XY));
				tex3 = SAMPLE_TEXTURE2D_GRAD( Texture, Sampler, UV3, ddx(XY), ddy(XY));
				half4 texXY = tex1 * W1 + tex2 * W2 + tex3 * W3;
				half T1, T2, T3;
				ComputeTriplanarWeights(WorldNormal, T1, T2, T3);
				return texZX * T1 + texZY * T2 + texXY * T3;
			}
			
			float3 ASEGetEmissionHDRColor(float3 ldrColor, float luminanceIntensity, float exposureWeight, float inverseCurrentExposureMultiplier)
			{
				float3 hdrColor = ldrColor * luminanceIntensity;
				hdrColor = lerp( hdrColor* inverseCurrentExposureMultiplier, hdrColor, exposureWeight);
				return hdrColor;
			}
			

			// Get Surface And BuiltinData
			void GetSurfaceAndBuiltinData(PickingSurfaceDescription surfaceDescription, FragInputs fragInputs, float3 V, inout PositionInputs posInput, out SurfaceData surfaceData, out BuiltinData builtinData)
			{
				#ifdef LOD_FADE_CROSSFADE
                    LODDitheringTransition(ComputeFadeMaskSeed(V, posInput.positionSS), unity_LODFade.x);
				#endif

                #ifdef _DOUBLESIDED_ON
                    float3 doubleSidedConstants = _DoubleSidedConstants.xyz;
                #else
                    float3 doubleSidedConstants = float3(1.0, 1.0, 1.0);
                #endif  
                ApplyDoubleSidedFlipOrMirror(fragInputs, doubleSidedConstants);

				#ifdef _ALPHATEST_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThreshold );
				#endif

				#ifdef _ALPHATEST_SHADOW_ON
                    DoAlphaTest( surfaceDescription.Alpha, surfaceDescription.AlphaClipThresholdShadow);
				#endif

				#ifdef _DEPTHOFFSET_ON
                    ApplyDepthOffsetPositionInput(V, surfaceDescription.DepthOffset, GetViewForwardDir(), GetWorldToHClipMatrix(), posInput);
				#endif

				float3 bentNormalWS;
                //BuildSurfaceData(fragInputs, surfaceDescription, V, posInput, surfaceData, bentNormalWS);
                InitBuiltinData(posInput, surfaceDescription.Alpha, bentNormalWS, -fragInputs.tangentToWorld[2], fragInputs.texCoord1, fragInputs.texCoord2, builtinData);

				#ifdef _DEPTHOFFSET_ON
                    builtinData.depthOffset = surfaceDescription.DepthOffset;
				#endif

                #ifdef _ALPHATEST_ON
                    builtinData.alphaClipTreshold = surfaceDescription.AlphaClipThreshold;
                #endif

                #ifdef UNITY_VIRTUAL_TEXTURING
                    builtinData.vtPackedFeedback = surfaceDescription.VTPackedFeedback;
                #endif

				#ifdef ASE_BAKEDGI
                    builtinData.bakeDiffuseLighting = surfaceDescription.BakedGI;
				#endif

				#ifdef ASE_BAKEDBACKGI
                    builtinData.backBakeDiffuseLighting = surfaceDescription.BakedBackGI;
				#endif

                builtinData.emissiveColor = surfaceDescription.Emission;

				PostInitBuiltinData(V, posInput, surfaceData, builtinData);

            }

			AttributesMesh ApplyMeshModification(AttributesMesh inputMesh, float3 timeParameters, inout PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS )
			{
				_TimeParameters.xyz = timeParameters;
				TVEModelData Data16_g170494 = (TVEModelData)0;
				float In_Dummy16_g170494 = 0.0;
				TVEModelData Data16_g170477 = (TVEModelData)0;
				half Dummy1575_g170475 = ( _NormalCategory + _NormalEnd + _NormalComputeValue );
				float In_Dummy16_g170477 = Dummy1575_g170475;
				TVEModelData Data16_g170454 = (TVEModelData)0;
				float In_Dummy16_g170454 = 0.0;
				TVEModelData Data16_g170265 = (TVEModelData)0;
				half4 Dummy181_g170256 = ( ( _MotionWindCategory + _MotionWindEnd ) + _MotionWindElementMode + ( _MotionInteractionCategory + _MotionInteractionEnd ) + ( _InteractionLiteInfo + _InteractionColoring + _MotionPushIntensityValue + _MotionPushPivotValue + _MotionPushPhaseValue + _MotionPushMaskRemap + _MotionPushMaskMode + _MotionPushElementMode ) );
				float In_Dummy16_g170265 = Dummy181_g170256.r;
				TVEModelData Data16_g157406 = (TVEModelData)0;
				float In_Dummy16_g157406 = 0.0;
				TVEModelData Data16_g156907 = (TVEModelData)0;
				half Dummy207_g156892 = ( _ObjectCategory + _ObjectEnd + _ObjectModelMode + _ObjectPivotMode + _ObjectPhaseMode );
				float In_Dummy16_g156907 = Dummy207_g156892;
				half3 PositionOS131_g156892 = inputMesh.positionOS;
				float3 In_PositionOS16_g156907 = PositionOS131_g156892;
				float3 ase_worldPos = GetAbsolutePositionWS( TransformObjectToWorld( (inputMesh.positionOS).xyz ) );
				float3 vertexToFrag73_g156892 = ase_worldPos;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156907 = PositionWS122_g156892;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156894 = ObjectPosition_UNITY_MATRIX_M();
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156894 = ( localObjectPosition_UNITY_MATRIX_M14_g156894 + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156894 = localObjectPosition_UNITY_MATRIX_M14_g156894;
				#endif
				half3 ObjectData20_g156896 = staticSwitch13_g156894;
				half3 WorldData19_g156896 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156896 = WorldData19_g156896;
				#else
				float3 staticSwitch14_g156896 = ObjectData20_g156896;
				#endif
				float3 temp_output_124_0_g156894 = staticSwitch14_g156896;
				float3 temp_output_239_7_g156892 = temp_output_124_0_g156894;
				float3 localObjectPosition_UNITY_MATRIX_M14_g156898 = ObjectPosition_UNITY_MATRIX_M();
				float3 _Vector0 = float3(0,0,0);
				float3 appendResult60_g156902 = (float3(inputMesh.ase_texcoord3.x , 0.0 , inputMesh.ase_texcoord3.y));
				float3 break233_g156892 = PositionOS131_g156892;
				float3 appendResult234_g156892 = (float3(break233_g156892.x , 0.0 , break233_g156892.z));
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch229_g156892 = _Vector0;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch229_g156892 = appendResult60_g156902;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch229_g156892 = appendResult234_g156892;
				#else
				float3 staticSwitch229_g156892 = _Vector0;
				#endif
				half3 PivotOS149_g156892 = staticSwitch229_g156892;
				float3 temp_output_122_0_g156898 = PivotOS149_g156892;
				float3 PivotsOnly105_g156898 = (mul( GetObjectToWorldMatrix(), float4( temp_output_122_0_g156898 , 0.0 ) ).xyz).xyz;
				#ifdef SHADEROPTIONS_CAMERA_RELATIVE_RENDERING
				float3 staticSwitch13_g156898 = ( ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 ) + _WorldSpaceCameraPos );
				#else
				float3 staticSwitch13_g156898 = ( localObjectPosition_UNITY_MATRIX_M14_g156898 + PivotsOnly105_g156898 );
				#endif
				half3 ObjectData20_g156900 = staticSwitch13_g156898;
				half3 WorldData19_g156900 = ase_worldPos;
				#ifdef TVE_OBJECT_BATCHED
				float3 staticSwitch14_g156900 = WorldData19_g156900;
				#else
				float3 staticSwitch14_g156900 = ObjectData20_g156900;
				#endif
				float3 temp_output_124_0_g156898 = staticSwitch14_g156900;
				float3 temp_output_237_7_g156892 = temp_output_124_0_g156898;
				#if defined( TVE_PIVOT_OFF )
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#elif defined( TVE_PIVOT_BAKED )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#elif defined( TVE_PIVOT_PROC )
				float3 staticSwitch236_g156892 = temp_output_237_7_g156892;
				#else
				float3 staticSwitch236_g156892 = temp_output_239_7_g156892;
				#endif
				float3 vertexToFrag76_g156892 = staticSwitch236_g156892;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156907 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156907 = PositionOS131_g156892;
				float3 In_PositionAddOS16_g156907 = float3( 0,0,0 );
				float3 In_PivotOS16_g156907 = PivotOS149_g156892;
				float3 In_PivotWS16_g156907 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156907 = PivotWO133_g156892;
				half3 NormalOS134_g156892 = inputMesh.normalOS;
				float3 In_NormalOS16_g156907 = NormalOS134_g156892;
				float3 ase_worldNormal = TransformObjectToWorldNormal(inputMesh.normalOS);
				float3 normalizedWorldNormal = normalize( ase_worldNormal );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156907 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156907 = NormalOS134_g156892;
				float3 objToWorldDir298_g156892 = normalize( mul( GetObjectToWorldMatrix(), float4( inputMesh.normalOS, 0 ) ).xyz );
				half3 Normal_RawWS136_g156892 = objToWorldDir298_g156892;
				float3 In_NormalRawWS16_g156907 = Normal_RawWS136_g156892;
				half4 TangentlOS153_g156892 = inputMesh.tangentOS;
				float4 In_TangentOS16_g156907 = TangentlOS153_g156892;
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156907 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = inputMesh.ase_color;
				float4 In_VertexData16_g156907 = VertexMasks171_g156892;
				float4 break33_g156905 = _object_phase_mode;
				float temp_output_30_0_g156905 = ( inputMesh.ase_color.r * break33_g156905.x );
				float temp_output_29_0_g156905 = ( inputMesh.ase_color.g * break33_g156905.y );
				float temp_output_31_0_g156905 = ( inputMesh.ase_color.b * break33_g156905.z );
				float temp_output_28_0_g156905 = ( temp_output_30_0_g156905 + temp_output_29_0_g156905 + temp_output_31_0_g156905 + ( inputMesh.ase_color.a * break33_g156905.w ) );
				float3 break243_g156892 = PivotWO133_g156892;
				float temp_output_315_0_g156892 = (frac( ( temp_output_28_0_g156905 + ( break243_g156892.x + break243_g156892.z ) ) )*2.0 + -1.0);
				float4 appendResult177_g156892 = (float4(1.0 , 1.0 , temp_output_315_0_g156892 , 1.0));
				half4 MotionMasks176_g156892 = appendResult177_g156892;
				float4 In_MotionData16_g156907 = MotionMasks176_g156892;
				half Object_HeightValue267_g156892 = _ObjectHeightValue;
				half Object_RadiusValue268_g156892 = _ObjectRadiusValue;
				half Bounds_HeightMask274_g156892 = saturate( ( (PositionOS131_g156892).y / Object_HeightValue267_g156892 ) );
				half Bounds_SphereMask282_g156892 = saturate( ( length( PositionOS131_g156892 ) / max( Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 ) ) );
				float4 appendResult253_g156892 = (float4(Object_HeightValue267_g156892 , Object_RadiusValue268_g156892 , Bounds_HeightMask274_g156892 , Bounds_SphereMask282_g156892));
				half4 BoundsData254_g156892 = appendResult253_g156892;
				float4 In_BoundsData16_g156907 = BoundsData254_g156892;
				float4 In_RotationData16_g156907 = float4( 0,0,0,0 );
				Data16_g156907.Dummy = In_Dummy16_g156907;
				Data16_g156907.PositionOS = In_PositionOS16_g156907;
				Data16_g156907.PositionWS = In_PositionWS16_g156907;
				Data16_g156907.PositionWO = In_PositionWO16_g156907;
				Data16_g156907.PositionRawOS = In_PositionRawOS16_g156907;
				Data16_g156907.PositionAddOS = In_PositionAddOS16_g156907;
				Data16_g156907.PivotOS = In_PivotOS16_g156907;
				Data16_g156907.PivotWS = In_PivotWS16_g156907;
				Data16_g156907.PivotWO = In_PivotWO16_g156907;
				Data16_g156907.NormalOS = In_NormalOS16_g156907;
				Data16_g156907.NormalWS = In_NormalWS16_g156907;
				Data16_g156907.NormalRawOS = In_NormalRawOS16_g156907;
				Data16_g156907.NormalRawWS = In_NormalRawWS16_g156907;
				Data16_g156907.TangentOS = In_TangentOS16_g156907;
				Data16_g156907.ViewDirWS = In_ViewDirWS16_g156907;
				Data16_g156907.VertexData = In_VertexData16_g156907;
				Data16_g156907.MotionData = In_MotionData16_g156907;
				Data16_g156907.BoundsData = In_BoundsData16_g156907;
				Data16_g156907.RotationData = In_RotationData16_g156907;
				TVEModelData Data15_g157407 = Data16_g156907;
				float Out_Dummy15_g157407 = 0;
				float3 Out_PositionOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionWO15_g157407 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotOS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWS15_g157407 = float3( 0,0,0 );
				float3 Out_PivotWO15_g157407 = float3( 0,0,0 );
				float3 Out_NormalOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalWS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g157407 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g157407 = float3( 0,0,0 );
				float4 Out_TangentOS15_g157407 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g157407 = float3( 0,0,0 );
				float4 Out_VertexData15_g157407 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g157407 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g157407 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g157407 = float4( 0,0,0,0 );
				Out_Dummy15_g157407 = Data15_g157407.Dummy;
				Out_PositionOS15_g157407 = Data15_g157407.PositionOS;
				Out_PositionWS15_g157407 = Data15_g157407.PositionWS;
				Out_PositionWO15_g157407 = Data15_g157407.PositionWO;
				Out_PositionRawOS15_g157407 = Data15_g157407.PositionRawOS;
				Out_PositionAddOS15_g157407 = Data15_g157407.PositionAddOS;
				Out_PivotOS15_g157407 = Data15_g157407.PivotOS;
				Out_PivotWS15_g157407 = Data15_g157407.PivotWS;
				Out_PivotWO15_g157407 = Data15_g157407.PivotWO;
				Out_NormalOS15_g157407 = Data15_g157407.NormalOS;
				Out_NormalWS15_g157407 = Data15_g157407.NormalWS;
				Out_NormalRawOS15_g157407 = Data15_g157407.NormalRawOS;
				Out_NormalRawWS15_g157407 = Data15_g157407.NormalRawWS;
				Out_TangentOS15_g157407 = Data15_g157407.TangentOS;
				Out_ViewDirWS15_g157407 = Data15_g157407.ViewDirWS;
				Out_VertexData15_g157407 = Data15_g157407.VertexData;
				Out_MotionData15_g157407 = Data15_g157407.MotionData;
				Out_BoundsData15_g157407 = Data15_g157407.BoundsData;
				Out_RotationData15_g157407 = Data15_g157407.RotationData;
				float3 temp_output_218_24_g157405 = Out_PivotOS15_g157407;
				float3 In_PositionOS16_g157406 = ( Out_PositionOS15_g157407 - temp_output_218_24_g157405 );
				float3 In_PositionWS16_g157406 = Out_PositionWS15_g157407;
				float3 In_PositionWO16_g157406 = Out_PositionWO15_g157407;
				float3 In_PositionRawOS16_g157406 = Out_PositionRawOS15_g157407;
				float3 In_PositionAddOS16_g157406 = Out_PositionAddOS15_g157407;
				float3 In_PivotOS16_g157406 = temp_output_218_24_g157405;
				float3 In_PivotWS16_g157406 = Out_PivotWS15_g157407;
				float3 In_PivotWO16_g157406 = Out_PivotWO15_g157407;
				float3 In_NormalOS16_g157406 = Out_NormalOS15_g157407;
				float3 In_NormalWS16_g157406 = Out_NormalWS15_g157407;
				float3 In_NormalRawOS16_g157406 = Out_NormalRawOS15_g157407;
				float3 In_NormalRawWS16_g157406 = Out_NormalRawWS15_g157407;
				float4 In_TangentOS16_g157406 = Out_TangentOS15_g157407;
				float3 In_ViewDirWS16_g157406 = Out_ViewDirWS15_g157407;
				float4 In_VertexData16_g157406 = Out_VertexData15_g157407;
				float4 In_MotionData16_g157406 = Out_MotionData15_g157407;
				float4 In_BoundsData16_g157406 = Out_BoundsData15_g157407;
				float4 In_RotationData16_g157406 = Out_RotationData15_g157407;
				Data16_g157406.Dummy = In_Dummy16_g157406;
				Data16_g157406.PositionOS = In_PositionOS16_g157406;
				Data16_g157406.PositionWS = In_PositionWS16_g157406;
				Data16_g157406.PositionWO = In_PositionWO16_g157406;
				Data16_g157406.PositionRawOS = In_PositionRawOS16_g157406;
				Data16_g157406.PositionAddOS = In_PositionAddOS16_g157406;
				Data16_g157406.PivotOS = In_PivotOS16_g157406;
				Data16_g157406.PivotWS = In_PivotWS16_g157406;
				Data16_g157406.PivotWO = In_PivotWO16_g157406;
				Data16_g157406.NormalOS = In_NormalOS16_g157406;
				Data16_g157406.NormalWS = In_NormalWS16_g157406;
				Data16_g157406.NormalRawOS = In_NormalRawOS16_g157406;
				Data16_g157406.NormalRawWS = In_NormalRawWS16_g157406;
				Data16_g157406.TangentOS = In_TangentOS16_g157406;
				Data16_g157406.ViewDirWS = In_ViewDirWS16_g157406;
				Data16_g157406.VertexData = In_VertexData16_g157406;
				Data16_g157406.MotionData = In_MotionData16_g157406;
				Data16_g157406.BoundsData = In_BoundsData16_g157406;
				Data16_g157406.RotationData = In_RotationData16_g157406;
				TVEModelData Data15_g170257 = Data16_g157406;
				float Out_Dummy15_g170257 = 0;
				float3 Out_PositionOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170257 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170257 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170257 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170257 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170257 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170257 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170257 = float3( 0,0,0 );
				float4 Out_VertexData15_g170257 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170257 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170257 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170257 = float4( 0,0,0,0 );
				Out_Dummy15_g170257 = Data15_g170257.Dummy;
				Out_PositionOS15_g170257 = Data15_g170257.PositionOS;
				Out_PositionWS15_g170257 = Data15_g170257.PositionWS;
				Out_PositionWO15_g170257 = Data15_g170257.PositionWO;
				Out_PositionRawOS15_g170257 = Data15_g170257.PositionRawOS;
				Out_PositionAddOS15_g170257 = Data15_g170257.PositionAddOS;
				Out_PivotOS15_g170257 = Data15_g170257.PivotOS;
				Out_PivotWS15_g170257 = Data15_g170257.PivotWS;
				Out_PivotWO15_g170257 = Data15_g170257.PivotWO;
				Out_NormalOS15_g170257 = Data15_g170257.NormalOS;
				Out_NormalWS15_g170257 = Data15_g170257.NormalWS;
				Out_NormalRawOS15_g170257 = Data15_g170257.NormalRawOS;
				Out_NormalRawWS15_g170257 = Data15_g170257.NormalRawWS;
				Out_TangentOS15_g170257 = Data15_g170257.TangentOS;
				Out_ViewDirWS15_g170257 = Data15_g170257.ViewDirWS;
				Out_VertexData15_g170257 = Data15_g170257.VertexData;
				Out_MotionData15_g170257 = Data15_g170257.MotionData;
				Out_BoundsData15_g170257 = Data15_g170257.BoundsData;
				Out_RotationData15_g170257 = Data15_g170257.RotationData;
				float3 temp_output_1567_0_g170256 = Out_PositionOS15_g170257;
				float3 In_PositionOS16_g170265 = temp_output_1567_0_g170256;
				float3 temp_output_1567_16_g170256 = Out_PositionWS15_g170257;
				float3 In_PositionWS16_g170265 = temp_output_1567_16_g170256;
				float3 temp_output_1567_17_g170256 = Out_PositionWO15_g170257;
				float3 In_PositionWO16_g170265 = temp_output_1567_17_g170256;
				float3 In_PositionRawOS16_g170265 = Out_PositionRawOS15_g170257;
				float3 temp_cast_5 = (0.0).xxx;
				float4 temp_output_1567_29_g170256 = Out_VertexData15_g170257;
				half4 Model_VertexMasks518_g170256 = temp_output_1567_29_g170256;
				float4 break1689_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170262 = _motion_small_vert_mode;
				float temp_output_30_0_g170262 = ( break1689_g170256.x * break33_g170262.x );
				float temp_output_29_0_g170262 = ( break1689_g170256.y * break33_g170262.y );
				float temp_output_31_0_g170262 = ( break1689_g170256.z * break33_g170262.z );
				float temp_output_28_0_g170262 = ( temp_output_30_0_g170262 + temp_output_29_0_g170262 + temp_output_31_0_g170262 + ( break1689_g170256.w * break33_g170262.w ) );
				float temp_output_1727_0_g170256 = temp_output_28_0_g170262;
				float4 temp_output_1567_30_g170256 = Out_BoundsData15_g170257;
				half4 Model_BoundsData1322_g170256 = temp_output_1567_30_g170256;
				float4 break33_g170267 = _motion_small_proc_mode;
				float temp_output_30_0_g170267 = ( (Model_BoundsData1322_g170256).z * break33_g170267.x );
				float temp_output_29_0_g170267 = ( (Model_BoundsData1322_g170256).w * break33_g170267.y );
				float temp_output_1734_0_g170256 = ( temp_output_30_0_g170267 + temp_output_29_0_g170267 );
				float lerpResult1866_g170256 = lerp( temp_output_1727_0_g170256 , temp_output_1734_0_g170256 , _motion_small_mask_mode);
				float enc1805_g170256 = inputMesh.ase_texcoord.z;
				float2 localDecodeFloatToVector21805_g170256 = DecodeFloatToVector2( enc1805_g170256 );
				float2 break1804_g170256 = localDecodeFloatToVector21805_g170256;
				half Small_Mask_Legacy1806_g170256 = break1804_g170256.x;
				#ifdef TVE_LEGACY
				float staticSwitch1800_g170256 = Small_Mask_Legacy1806_g170256;
				#else
				float staticSwitch1800_g170256 = lerpResult1866_g170256;
				#endif
				float clampResult17_g170269 = clamp( staticSwitch1800_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170270 = _MotionSmallMaskRemap.x;
				float temp_output_10_0_g170270 = ( _MotionSmallMaskRemap.y - temp_output_7_0_g170270 );
				float temp_output_6_0_g170271 = saturate( ( ( clampResult17_g170269 - temp_output_7_0_g170270 ) / ( temp_output_10_0_g170270 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170271 = ( temp_output_6_0_g170271 + ( _MotionSmallMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170271 = temp_output_6_0_g170271;
				#endif
				half Small_Mask640_g170256 = staticSwitch14_g170271;
				half3 Model_PositionOS147_g170256 = temp_output_1567_0_g170256;
				float3 normalizeResult1832_g170256 = normalize( Model_PositionOS147_g170256 );
				half3 Model_PositionWO162_g170256 = temp_output_1567_17_g170256;
				float3 temp_output_1567_19_g170256 = Out_PivotWO15_g170257;
				half3 Model_PivotWO402_g170256 = temp_output_1567_19_g170256;
				float3 lerpResult829_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionBasePivotValue);
				float4 temp_output_1567_27_g170256 = Out_MotionData15_g170257;
				half4 Model_MotionMasks489_g170256 = temp_output_1567_27_g170256;
				half3 Base_Position1394_g170256 = ( lerpResult829_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionBasePhaseValue ) );
				half3 Input_PositionWO419_g170283 = Base_Position1394_g170256;
				half Flow_Tillling1397_g170256 = _MotionTillingValue;
				half Input_MotionTilling321_g170283 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170283 = ( -(Input_PositionWO419_g170283).xz * Input_MotionTilling321_g170283 * 0.005 );
				half4 Noise_Params535_g170283 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170283, 0.0 );
				float2 temp_output_648_0_g170283 = (Noise_Params535_g170283).rg;
				half Flow_Value1858_g170256 = _MotionIntensityValue;
				half Input_MotionValue629_g170283 = Flow_Value1858_g170256;
				float2 lerpResult645_g170283 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170283 , Input_MotionValue629_g170283);
				float3 appendResult566_g170283 = (float3(lerpResult645_g170283 , (Noise_Params535_g170283).b));
				float temp_output_136_0_g170284 = _global_wind_layer_value;
				float temp_output_19_0_g170286 = TVE_WindLayers[(int)temp_output_136_0_g170284];
				half3 Input_Position180_g170287 = Input_PositionWO419_g170283;
				float2 temp_output_75_0_g170287 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_82_0_g170287 = temp_output_136_0_g170284;
				float2 temp_output_119_0_g170287 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170287).xz ) );
				float temp_output_7_0_g170292 = 1.0;
				float temp_output_10_0_g170292 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170292 );
				float4 lerpResult131_g170287 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170287,temp_output_82_0_g170287, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170287,temp_output_82_0_g170287, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170287 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170292 ) / temp_output_10_0_g170292 ) ));
				float4 temp_output_17_0_g170286 = lerpResult131_g170287;
				float4 temp_output_3_0_g170286 = TVE_WindParams;
				float4 ifLocalVar18_g170286 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170286 >= 0.5 )
				ifLocalVar18_g170286 = temp_output_17_0_g170286;
				else
				ifLocalVar18_g170286 = temp_output_3_0_g170286;
				float4 lerpResult22_g170286 = lerp( temp_output_3_0_g170286 , temp_output_17_0_g170286 , temp_output_19_0_g170286);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170286 = lerpResult22_g170286;
				#else
				float4 staticSwitch24_g170286 = ifLocalVar18_g170286;
				#endif
				float4 temp_output_610_0_g170283 = staticSwitch24_g170286;
				float3 appendResult643_g170283 = (float3((temp_output_610_0_g170283).rg , (temp_output_610_0_g170283).b));
				float3 lerpResult623_g170283 = lerp( appendResult566_g170283 , appendResult643_g170283 , (temp_output_610_0_g170283).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170283 = lerpResult623_g170283;
				#else
				float3 staticSwitch612_g170283 = appendResult566_g170283;
				#endif
				float3 temp_output_1947_567_g170256 = staticSwitch612_g170283;
				float2 break83_g170280 = ((temp_output_1947_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170280 = (float3(break83_g170280.x , 0.0 , break83_g170280.y));
				float3 ase_parentObjectScale = ( 1.0 / float3( length( GetWorldToObjectMatrix()[ 0 ].xyz ), length( GetWorldToObjectMatrix()[ 1 ].xyz ), length( GetWorldToObjectMatrix()[ 2 ].xyz ) ) );
				half2 Base_Direction893_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170280 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				float3 lerpResult1411_g170256 = lerp( Model_PositionWO162_g170256 , Model_PivotWO402_g170256 , _MotionSmallPivotValue);
				half3 Small_Position1421_g170256 = ( lerpResult1411_g170256 + ( (Model_MotionMasks489_g170256).z * _MotionSmallPhaseValue ) );
				half3 Input_PositionWO419_g170298 = Small_Position1421_g170256;
				half Input_MotionTilling321_g170298 = ( Flow_Tillling1397_g170256 + 0.2 );
				half2 Noise_Coord515_g170298 = ( -(Input_PositionWO419_g170298).xz * Input_MotionTilling321_g170298 * 0.005 );
				half4 Noise_Params535_g170298 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, Noise_Coord515_g170298, 0.0 );
				float2 temp_output_648_0_g170298 = (Noise_Params535_g170298).rg;
				half Input_MotionValue629_g170298 = Flow_Value1858_g170256;
				float2 lerpResult645_g170298 = lerp( float2( 0.5,0.5 ) , temp_output_648_0_g170298 , Input_MotionValue629_g170298);
				float3 appendResult566_g170298 = (float3(lerpResult645_g170298 , (Noise_Params535_g170298).b));
				float temp_output_136_0_g170299 = _global_wind_layer_value;
				float temp_output_19_0_g170301 = TVE_WindLayers[(int)temp_output_136_0_g170299];
				half3 Input_Position180_g170302 = Input_PositionWO419_g170298;
				float2 temp_output_75_0_g170302 = ( (TVE_RenderBaseCoords).zw + ( (TVE_RenderBaseCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_82_0_g170302 = temp_output_136_0_g170299;
				float2 temp_output_119_0_g170302 = ( (TVE_RenderNearCoords).zw + ( (TVE_RenderNearCoords).xy * (Input_Position180_g170302).xz ) );
				float temp_output_7_0_g170307 = 1.0;
				float temp_output_10_0_g170307 = ( TVE_RenderNearFadeValue - temp_output_7_0_g170307 );
				float4 lerpResult131_g170302 = lerp( SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindBaseTex, sampler_Linear_Clamp, temp_output_75_0_g170302,temp_output_82_0_g170302, 0.0 ) , SAMPLE_TEXTURE2D_ARRAY_LOD( TVE_WindNearTex, sampler_Linear_Repeat, temp_output_119_0_g170302,temp_output_82_0_g170302, 0.0 ) , saturate( ( ( saturate( ( distance( Input_Position180_g170302 , (TVE_RenderNearPositionR).xyz ) / (TVE_RenderNearPositionR).w ) ) - temp_output_7_0_g170307 ) / temp_output_10_0_g170307 ) ));
				float4 temp_output_17_0_g170301 = lerpResult131_g170302;
				float4 temp_output_3_0_g170301 = TVE_WindParams;
				float4 ifLocalVar18_g170301 = 0;
				UNITY_BRANCH 
				if( temp_output_19_0_g170301 >= 0.5 )
				ifLocalVar18_g170301 = temp_output_17_0_g170301;
				else
				ifLocalVar18_g170301 = temp_output_3_0_g170301;
				float4 lerpResult22_g170301 = lerp( temp_output_3_0_g170301 , temp_output_17_0_g170301 , temp_output_19_0_g170301);
				#ifdef SHADER_API_MOBILE
				float4 staticSwitch24_g170301 = lerpResult22_g170301;
				#else
				float4 staticSwitch24_g170301 = ifLocalVar18_g170301;
				#endif
				float4 temp_output_610_0_g170298 = staticSwitch24_g170301;
				float3 appendResult643_g170298 = (float3((temp_output_610_0_g170298).rg , (temp_output_610_0_g170298).b));
				float3 lerpResult623_g170298 = lerp( appendResult566_g170298 , appendResult643_g170298 , (temp_output_610_0_g170298).a);
				#ifdef TVE_MOTION_WIND_ELEMENT
				float3 staticSwitch612_g170298 = lerpResult623_g170298;
				#else
				float3 staticSwitch612_g170298 = appendResult566_g170298;
				#endif
				float3 temp_output_1946_567_g170256 = staticSwitch612_g170298;
				float2 break83_g170281 = ((temp_output_1946_567_g170256).xy*2.0 + -1.0);
				float3 appendResult79_g170281 = (float3(break83_g170281.x , 0.0 , break83_g170281.y));
				half2 Small_Direction1489_g170256 = (( mul( GetWorldToObjectMatrix(), float4( appendResult79_g170281 , 0.0 ) ).xyz * ase_parentObjectScale )).xz;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float2 staticSwitch1485_g170256 = Small_Direction1489_g170256;
				#else
				float2 staticSwitch1485_g170256 = Base_Direction893_g170256;
				#endif
				half2 Wave_Direction1486_g170256 = staticSwitch1485_g170256;
				float2 break1828_g170256 = -Wave_Direction1486_g170256;
				float3 appendResult1830_g170256 = (float3(break1828_g170256.x , 0.0 , break1828_g170256.y));
				float dotResult1831_g170256 = dot( normalizeResult1832_g170256 , appendResult1830_g170256 );
				float lerpResult1826_g170256 = lerp( 1.0 , (dotResult1831_g170256*0.5 + 0.5) , _MotionFrontValue);
				half Motion_FrontMask1142_g170256 = lerpResult1826_g170256;
				float2 break1922_g170256 = Small_Direction1489_g170256;
				half Small_Intensity1881_g170256 = length( Small_Direction1489_g170256 );
				float3 appendResult1920_g170256 = (float3(break1922_g170256.x , Small_Intensity1881_g170256 , break1922_g170256.y));
				half Small_Noise1427_g170256 = (temp_output_1946_567_g170256).z;
				float3 appendResult1921_g170256 = (float3(Small_Noise1427_g170256 , (Small_Noise1427_g170256*0.8 + -0.4) , Small_Noise1427_g170256));
				half3 Small_Motion789_g170256 = ( _MotionSmallIntensityValue * Small_Mask640_g170256 * Motion_FrontMask1142_g170256 * appendResult1920_g170256 * appendResult1921_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float3 staticSwitch495_g170256 = Small_Motion789_g170256;
				#else
				float3 staticSwitch495_g170256 = temp_cast_5;
				#endif
				float3 temp_cast_16 = (0.0).xxx;
				float4 break1710_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170263 = _motion_tiny_vert_mode;
				float temp_output_30_0_g170263 = ( break1710_g170256.x * break33_g170263.x );
				float temp_output_29_0_g170263 = ( break1710_g170256.y * break33_g170263.y );
				float temp_output_31_0_g170263 = ( break1710_g170256.z * break33_g170263.z );
				float temp_output_28_0_g170263 = ( temp_output_30_0_g170263 + temp_output_29_0_g170263 + temp_output_31_0_g170263 + ( break1710_g170256.w * break33_g170263.w ) );
				float temp_output_1729_0_g170256 = temp_output_28_0_g170263;
				float4 break33_g170268 = _motion_tiny_proc_mode;
				float temp_output_30_0_g170268 = ( (Model_BoundsData1322_g170256).z * break33_g170268.x );
				float temp_output_29_0_g170268 = ( (Model_BoundsData1322_g170256).w * break33_g170268.y );
				float temp_output_1735_0_g170256 = ( temp_output_30_0_g170268 + temp_output_29_0_g170268 );
				float lerpResult1867_g170256 = lerp( temp_output_1729_0_g170256 , temp_output_1735_0_g170256 , _motion_tiny_mask_mode);
				half Tiny_Mask_Legacy1807_g170256 = break1804_g170256.y;
				#ifdef TVE_LEGACY
				float staticSwitch1810_g170256 = Tiny_Mask_Legacy1807_g170256;
				#else
				float staticSwitch1810_g170256 = lerpResult1867_g170256;
				#endif
				float clampResult17_g170272 = clamp( staticSwitch1810_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170273 = _MotionTinyMaskRemap.x;
				float temp_output_10_0_g170273 = ( _MotionTinyMaskRemap.y - temp_output_7_0_g170273 );
				float temp_output_6_0_g170274 = saturate( ( ( clampResult17_g170272 - temp_output_7_0_g170273 ) / ( temp_output_10_0_g170273 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170274 = ( temp_output_6_0_g170274 + ( _MotionTinyMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170274 = temp_output_6_0_g170274;
				#endif
				half Tiny_Mask218_g170256 = staticSwitch14_g170274;
				half3 Input_Position500_g170275 = Model_PositionWO162_g170256;
				float2 temp_output_498_0_g170275 = (Input_Position500_g170275).xz;
				float4 tex2DNode460_g170275 = SAMPLE_TEXTURE2D_LOD( _MotionNoiseTex, sampler_Linear_Repeat, temp_output_498_0_g170275, 0.0 );
				float3 appendResult462_g170275 = (float3(tex2DNode460_g170275.a , tex2DNode460_g170275.a , tex2DNode460_g170275.a));
				half3 Flutter_Texture489_g170275 = (appendResult462_g170275*2.0 + -1.0);
				half3 Tiny_Direction859_g170256 = Flutter_Texture489_g170275;
				half3 Model_PositionWS1819_g170256 = temp_output_1567_16_g170256;
				half Motion_FadeMask1820_g170256 = ( 1.0 - saturate( ( distance( _WorldSpaceCameraPos , Model_PositionWS1819_g170256 ) / _MotionDistValue ) ) );
				half Base_Intensity1878_g170256 = length( Base_Direction893_g170256 );
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1899_g170256 = Small_Intensity1881_g170256;
				#else
				float staticSwitch1899_g170256 = Base_Intensity1878_g170256;
				#endif
				half Wave_Intensity1900_g170256 = staticSwitch1899_g170256;
				half Base_Noise1159_g170256 = (temp_output_1947_567_g170256).z;
				#ifdef TVE_MOTION_SMALL_SQUASH
				float staticSwitch1453_g170256 = Small_Noise1427_g170256;
				#else
				float staticSwitch1453_g170256 = Base_Noise1159_g170256;
				#endif
				half Wave_Noise1475_g170256 = staticSwitch1453_g170256;
				half3 Tiny_Motion1451_g170256 = ( _MotionTinyIntensityValue * Tiny_Mask218_g170256 * Tiny_Direction859_g170256 * Motion_FrontMask1142_g170256 * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * Wave_Noise1475_g170256 );
				#ifdef TVE_MOTION_TINY_FLUTTER
				float3 staticSwitch414_g170256 = Tiny_Motion1451_g170256;
				#else
				float3 staticSwitch414_g170256 = temp_cast_16;
				#endif
				half3 Final_PositionADD1569_g170256 = ( staticSwitch495_g170256 + staticSwitch414_g170256 );
				float3 In_PositionAddOS16_g170265 = Final_PositionADD1569_g170256;
				float3 temp_output_1567_24_g170256 = Out_PivotOS15_g170257;
				float3 In_PivotOS16_g170265 = temp_output_1567_24_g170256;
				float3 In_PivotWS16_g170265 = Out_PivotWS15_g170257;
				float3 In_PivotWO16_g170265 = temp_output_1567_19_g170256;
				float3 temp_output_1567_20_g170256 = Out_NormalOS15_g170257;
				float3 In_NormalOS16_g170265 = temp_output_1567_20_g170256;
				float3 In_NormalWS16_g170265 = Out_NormalWS15_g170257;
				float3 In_NormalRawOS16_g170265 = Out_NormalRawOS15_g170257;
				float3 In_NormalRawWS16_g170265 = Out_NormalRawWS15_g170257;
				float4 In_TangentOS16_g170265 = Out_TangentOS15_g170257;
				float3 In_ViewDirWS16_g170265 = Out_ViewDirWS15_g170257;
				float4 In_VertexData16_g170265 = temp_output_1567_29_g170256;
				float4 In_MotionData16_g170265 = temp_output_1567_27_g170256;
				float4 In_BoundsData16_g170265 = temp_output_1567_30_g170256;
				float2 temp_cast_17 = (0.0).xx;
				float4 break748_g170256 = Model_VertexMasks518_g170256;
				float4 break33_g170264 = _motion_base_vert_mode;
				float temp_output_30_0_g170264 = ( break748_g170256.x * break33_g170264.x );
				float temp_output_29_0_g170264 = ( break748_g170256.y * break33_g170264.y );
				float temp_output_31_0_g170264 = ( break748_g170256.z * break33_g170264.z );
				float temp_output_28_0_g170264 = ( temp_output_30_0_g170264 + temp_output_29_0_g170264 + temp_output_31_0_g170264 + ( break748_g170256.w * break33_g170264.w ) );
				float temp_output_1731_0_g170256 = temp_output_28_0_g170264;
				float4 break33_g170266 = _motion_base_proc_mode;
				float temp_output_30_0_g170266 = ( (Model_BoundsData1322_g170256).z * break33_g170266.x );
				float temp_output_29_0_g170266 = ( (Model_BoundsData1322_g170256).w * break33_g170266.y );
				float temp_output_1733_0_g170256 = ( temp_output_30_0_g170266 + temp_output_29_0_g170266 );
				float lerpResult1863_g170256 = lerp( temp_output_1731_0_g170256 , temp_output_1733_0_g170256 , _motion_base_mask_mode);
				float clampResult17_g170259 = clamp( lerpResult1863_g170256 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170260 = _MotionBaseMaskRemap.x;
				float temp_output_10_0_g170260 = ( _MotionBaseMaskRemap.y - temp_output_7_0_g170260 );
				float temp_output_6_0_g170261 = saturate( ( ( clampResult17_g170259 - temp_output_7_0_g170260 ) / ( temp_output_10_0_g170260 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170261 = ( temp_output_6_0_g170261 + ( _MotionBaseMaskMode * 0.0 ) );
				#else
				float staticSwitch14_g170261 = temp_output_6_0_g170261;
				#endif
				half Base_Mask217_g170256 = staticSwitch14_g170261;
				half Flow_Delay1939_g170256 = _MotionDelayValue;
				float lerpResult1908_g170256 = lerp( 1.0 , ( Base_Intensity1878_g170256 * Base_Intensity1878_g170256 ) , Flow_Delay1939_g170256);
				#ifdef TVE_MOTION_BASE_BENDING
				float2 staticSwitch1573_g170256 = ( _MotionBaseIntensityValue * Base_Mask217_g170256 * Base_Noise1159_g170256 * Base_Direction893_g170256 * lerpResult1908_g170256 );
				#else
				float2 staticSwitch1573_g170256 = temp_cast_17;
				#endif
				half2 Base_Motion1440_g170256 = staticSwitch1573_g170256;
				half2 Final_VertexBend1570_g170256 = Base_Motion1440_g170256;
				float4 In_RotationData16_g170265 = float4( Final_VertexBend1570_g170256, 0.0 , 0.0 );
				Data16_g170265.Dummy = In_Dummy16_g170265;
				Data16_g170265.PositionOS = In_PositionOS16_g170265;
				Data16_g170265.PositionWS = In_PositionWS16_g170265;
				Data16_g170265.PositionWO = In_PositionWO16_g170265;
				Data16_g170265.PositionRawOS = In_PositionRawOS16_g170265;
				Data16_g170265.PositionAddOS = In_PositionAddOS16_g170265;
				Data16_g170265.PivotOS = In_PivotOS16_g170265;
				Data16_g170265.PivotWS = In_PivotWS16_g170265;
				Data16_g170265.PivotWO = In_PivotWO16_g170265;
				Data16_g170265.NormalOS = In_NormalOS16_g170265;
				Data16_g170265.NormalWS = In_NormalWS16_g170265;
				Data16_g170265.NormalRawOS = In_NormalRawOS16_g170265;
				Data16_g170265.NormalRawWS = In_NormalRawWS16_g170265;
				Data16_g170265.TangentOS = In_TangentOS16_g170265;
				Data16_g170265.ViewDirWS = In_ViewDirWS16_g170265;
				Data16_g170265.VertexData = In_VertexData16_g170265;
				Data16_g170265.MotionData = In_MotionData16_g170265;
				Data16_g170265.BoundsData = In_BoundsData16_g170265;
				Data16_g170265.RotationData = In_RotationData16_g170265;
				TVEModelData Data15_g170453 = Data16_g170265;
				float Out_Dummy15_g170453 = 0;
				float3 Out_PositionOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170453 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170453 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170453 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170453 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170453 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170453 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170453 = float3( 0,0,0 );
				float4 Out_VertexData15_g170453 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170453 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170453 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170453 = float4( 0,0,0,0 );
				Out_Dummy15_g170453 = Data15_g170453.Dummy;
				Out_PositionOS15_g170453 = Data15_g170453.PositionOS;
				Out_PositionWS15_g170453 = Data15_g170453.PositionWS;
				Out_PositionWO15_g170453 = Data15_g170453.PositionWO;
				Out_PositionRawOS15_g170453 = Data15_g170453.PositionRawOS;
				Out_PositionAddOS15_g170453 = Data15_g170453.PositionAddOS;
				Out_PivotOS15_g170453 = Data15_g170453.PivotOS;
				Out_PivotWS15_g170453 = Data15_g170453.PivotWS;
				Out_PivotWO15_g170453 = Data15_g170453.PivotWO;
				Out_NormalOS15_g170453 = Data15_g170453.NormalOS;
				Out_NormalWS15_g170453 = Data15_g170453.NormalWS;
				Out_NormalRawOS15_g170453 = Data15_g170453.NormalRawOS;
				Out_NormalRawWS15_g170453 = Data15_g170453.NormalRawWS;
				Out_TangentOS15_g170453 = Data15_g170453.TangentOS;
				Out_ViewDirWS15_g170453 = Data15_g170453.ViewDirWS;
				Out_VertexData15_g170453 = Data15_g170453.VertexData;
				Out_MotionData15_g170453 = Data15_g170453.MotionData;
				Out_BoundsData15_g170453 = Data15_g170453.BoundsData;
				Out_RotationData15_g170453 = Data15_g170453.RotationData;
				half3 Model_PositionOS147_g170452 = Out_PositionOS15_g170453;
				half3 Input_False58_g170458 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170455 = Model_PositionOS147_g170452;
				half3 VertexPos40_g170456 = VertexPos40_g170455;
				float3 appendResult74_g170456 = (float3(VertexPos40_g170456.x , 0.0 , 0.0));
				half3 VertexPosRotationAxis50_g170456 = appendResult74_g170456;
				float3 break84_g170456 = VertexPos40_g170456;
				float3 appendResult81_g170456 = (float3(0.0 , break84_g170456.y , break84_g170456.z));
				half3 VertexPosOtherAxis82_g170456 = appendResult81_g170456;
				float4 temp_output_1567_33_g170452 = Out_RotationData15_g170453;
				half4 Model_VertexBend1569_g170452 = temp_output_1567_33_g170452;
				half2 Angle44_g170455 = (Model_VertexBend1569_g170452).xy;
				half Angle44_g170456 = (Angle44_g170455).y;
				half3 VertexPos40_g170457 = ( VertexPosRotationAxis50_g170456 + ( VertexPosOtherAxis82_g170456 * cos( Angle44_g170456 ) ) + ( cross( float3(1,0,0) , VertexPosOtherAxis82_g170456 ) * sin( Angle44_g170456 ) ) );
				float3 appendResult74_g170457 = (float3(0.0 , 0.0 , VertexPos40_g170457.z));
				half3 VertexPosRotationAxis50_g170457 = appendResult74_g170457;
				float3 break84_g170457 = VertexPos40_g170457;
				float3 appendResult81_g170457 = (float3(break84_g170457.x , break84_g170457.y , 0.0));
				half3 VertexPosOtherAxis82_g170457 = appendResult81_g170457;
				half Angle44_g170457 = -(Angle44_g170455).x;
				half3 Input_True57_g170458 = ( VertexPosRotationAxis50_g170457 + ( VertexPosOtherAxis82_g170457 * cos( Angle44_g170457 ) ) + ( cross( float3(0,0,1) , VertexPosOtherAxis82_g170457 ) * sin( Angle44_g170457 ) ) );
				#ifdef TVE_MOTION_BASE_BENDING
				float3 staticSwitch65_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch65_g170458 = Input_False58_g170458;
				#endif
				#ifdef TVE_MOTION_PUSH_BENDING
				float3 staticSwitch67_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch67_g170458 = staticSwitch65_g170458;
				#endif
				#ifdef TVE_BLANKET_BENDING
				float3 staticSwitch69_g170458 = Input_True57_g170458;
				#else
				float3 staticSwitch69_g170458 = staticSwitch67_g170458;
				#endif
				float3 temp_output_1578_0_g170452 = staticSwitch69_g170458;
				float3 temp_output_1567_31_g170452 = Out_PositionAddOS15_g170453;
				half3 Model_PositionADD1568_g170452 = temp_output_1567_31_g170452;
				half3 Final_PositionOS178_g170452 = ( temp_output_1578_0_g170452 + Model_PositionADD1568_g170452 );
				float3 In_PositionOS16_g170454 = Final_PositionOS178_g170452;
				float3 In_PositionWS16_g170454 = Out_PositionWS15_g170453;
				float3 In_PositionWO16_g170454 = Out_PositionWO15_g170453;
				float3 In_PositionRawOS16_g170454 = Out_PositionRawOS15_g170453;
				float3 In_PositionAddOS16_g170454 = temp_output_1567_31_g170452;
				float3 In_PivotOS16_g170454 = Out_PivotOS15_g170453;
				float3 In_PivotWS16_g170454 = Out_PivotWS15_g170453;
				float3 In_PivotWO16_g170454 = Out_PivotWO15_g170453;
				float3 In_NormalOS16_g170454 = Out_NormalOS15_g170453;
				float3 In_NormalWS16_g170454 = Out_NormalWS15_g170453;
				float3 In_NormalRawOS16_g170454 = Out_NormalRawOS15_g170453;
				float3 In_NormalRawWS16_g170454 = Out_NormalRawWS15_g170453;
				float4 In_TangentOS16_g170454 = Out_TangentOS15_g170453;
				float3 In_ViewDirWS16_g170454 = Out_ViewDirWS15_g170453;
				float4 In_VertexData16_g170454 = Out_VertexData15_g170453;
				float4 In_MotionData16_g170454 = Out_MotionData15_g170453;
				float4 In_BoundsData16_g170454 = Out_BoundsData15_g170453;
				float4 In_RotationData16_g170454 = temp_output_1567_33_g170452;
				Data16_g170454.Dummy = In_Dummy16_g170454;
				Data16_g170454.PositionOS = In_PositionOS16_g170454;
				Data16_g170454.PositionWS = In_PositionWS16_g170454;
				Data16_g170454.PositionWO = In_PositionWO16_g170454;
				Data16_g170454.PositionRawOS = In_PositionRawOS16_g170454;
				Data16_g170454.PositionAddOS = In_PositionAddOS16_g170454;
				Data16_g170454.PivotOS = In_PivotOS16_g170454;
				Data16_g170454.PivotWS = In_PivotWS16_g170454;
				Data16_g170454.PivotWO = In_PivotWO16_g170454;
				Data16_g170454.NormalOS = In_NormalOS16_g170454;
				Data16_g170454.NormalWS = In_NormalWS16_g170454;
				Data16_g170454.NormalRawOS = In_NormalRawOS16_g170454;
				Data16_g170454.NormalRawWS = In_NormalRawWS16_g170454;
				Data16_g170454.TangentOS = In_TangentOS16_g170454;
				Data16_g170454.ViewDirWS = In_ViewDirWS16_g170454;
				Data16_g170454.VertexData = In_VertexData16_g170454;
				Data16_g170454.MotionData = In_MotionData16_g170454;
				Data16_g170454.BoundsData = In_BoundsData16_g170454;
				Data16_g170454.RotationData = In_RotationData16_g170454;
				TVEModelData Data15_g170476 = Data16_g170454;
				float Out_Dummy15_g170476 = 0;
				float3 Out_PositionOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170476 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170476 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170476 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170476 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170476 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170476 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170476 = float3( 0,0,0 );
				float4 Out_VertexData15_g170476 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170476 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170476 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170476 = float4( 0,0,0,0 );
				Out_Dummy15_g170476 = Data15_g170476.Dummy;
				Out_PositionOS15_g170476 = Data15_g170476.PositionOS;
				Out_PositionWS15_g170476 = Data15_g170476.PositionWS;
				Out_PositionWO15_g170476 = Data15_g170476.PositionWO;
				Out_PositionRawOS15_g170476 = Data15_g170476.PositionRawOS;
				Out_PositionAddOS15_g170476 = Data15_g170476.PositionAddOS;
				Out_PivotOS15_g170476 = Data15_g170476.PivotOS;
				Out_PivotWS15_g170476 = Data15_g170476.PivotWS;
				Out_PivotWO15_g170476 = Data15_g170476.PivotWO;
				Out_NormalOS15_g170476 = Data15_g170476.NormalOS;
				Out_NormalWS15_g170476 = Data15_g170476.NormalWS;
				Out_NormalRawOS15_g170476 = Data15_g170476.NormalRawOS;
				Out_NormalRawWS15_g170476 = Data15_g170476.NormalRawWS;
				Out_TangentOS15_g170476 = Data15_g170476.TangentOS;
				Out_ViewDirWS15_g170476 = Data15_g170476.ViewDirWS;
				Out_VertexData15_g170476 = Data15_g170476.VertexData;
				Out_MotionData15_g170476 = Data15_g170476.MotionData;
				Out_BoundsData15_g170476 = Data15_g170476.BoundsData;
				Out_RotationData15_g170476 = Data15_g170476.RotationData;
				float3 In_PositionOS16_g170477 = Out_PositionOS15_g170476;
				float3 In_PositionWS16_g170477 = Out_PositionWS15_g170476;
				float3 In_PositionWO16_g170477 = Out_PositionWO15_g170476;
				float3 temp_output_1567_26_g170475 = Out_PositionRawOS15_g170476;
				float3 In_PositionRawOS16_g170477 = temp_output_1567_26_g170475;
				float3 In_PositionAddOS16_g170477 = Out_PositionAddOS15_g170476;
				float3 In_PivotOS16_g170477 = Out_PivotOS15_g170476;
				float3 In_PivotWS16_g170477 = Out_PivotWS15_g170476;
				float3 In_PivotWO16_g170477 = Out_PivotWO15_g170476;
				half3 Model_NormalOS1568_g170475 = Out_NormalOS15_g170476;
				float3 lerpResult1617_g170475 = lerp( Model_NormalOS1568_g170475 , half3(0,1,0) , _NormalFlattenValue);
				half3 Model_PositionRAW1592_g170475 = temp_output_1567_26_g170475;
				float3 normalizeResult1641_g170475 = ASESafeNormalize( ( Model_PositionRAW1592_g170475 + _NormalSphereOffsetValue ) );
				float3 lerpResult1616_g170475 = lerp( lerpResult1617_g170475 , normalizeResult1641_g170475 , _NormalSphereValue);
				float4 temp_output_1567_30_g170475 = Out_BoundsData15_g170476;
				half4 Model_VertexData1608_g170475 = temp_output_1567_30_g170475;
				float4 break1673_g170475 = Model_VertexData1608_g170475;
				float4 break33_g170478 = _normal_vert_mode;
				float temp_output_30_0_g170478 = ( break1673_g170475.x * break33_g170478.x );
				float temp_output_29_0_g170478 = ( break1673_g170475.y * break33_g170478.y );
				float temp_output_31_0_g170478 = ( break1673_g170475.z * break33_g170478.z );
				float temp_output_28_0_g170478 = ( temp_output_30_0_g170478 + temp_output_29_0_g170478 + temp_output_31_0_g170478 + ( break1673_g170475.w * break33_g170478.w ) );
				float clampResult17_g170480 = clamp( temp_output_28_0_g170478 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170479 = _NormalMeshRemap.x;
				float temp_output_10_0_g170479 = ( _NormalMeshRemap.y - temp_output_7_0_g170479 );
				float lerpResult1682_g170475 = lerp( 1.0 , saturate( ( ( clampResult17_g170480 - temp_output_7_0_g170479 ) / ( temp_output_10_0_g170479 + 0.0001 ) ) ) , _NormalMeshValue);
				float temp_output_6_0_g170481 = lerpResult1682_g170475;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170481 = ( temp_output_6_0_g170481 + ( _NormalMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170481 = temp_output_6_0_g170481;
				#endif
				float temp_output_1679_0_g170475 = staticSwitch14_g170481;
				half Normal_MeskMask1684_g170475 = temp_output_1679_0_g170475;
				float3 lerpResult1667_g170475 = lerp( Model_NormalOS1568_g170475 , lerpResult1616_g170475 , Normal_MeskMask1684_g170475);
				half3 Final_NormalOS1666_g170475 = lerpResult1667_g170475;
				float3 In_NormalOS16_g170477 = Final_NormalOS1666_g170475;
				float3 temp_output_1567_21_g170475 = Out_NormalWS15_g170476;
				float3 In_NormalWS16_g170477 = temp_output_1567_21_g170475;
				float3 In_NormalRawOS16_g170477 = Out_NormalRawOS15_g170476;
				float3 In_NormalRawWS16_g170477 = Out_NormalRawWS15_g170476;
				float4 In_TangentOS16_g170477 = Out_TangentOS15_g170476;
				float3 In_ViewDirWS16_g170477 = Out_ViewDirWS15_g170476;
				float4 In_VertexData16_g170477 = Out_VertexData15_g170476;
				float4 In_MotionData16_g170477 = Out_MotionData15_g170476;
				float4 In_BoundsData16_g170477 = temp_output_1567_30_g170475;
				float4 In_RotationData16_g170477 = Out_RotationData15_g170476;
				Data16_g170477.Dummy = In_Dummy16_g170477;
				Data16_g170477.PositionOS = In_PositionOS16_g170477;
				Data16_g170477.PositionWS = In_PositionWS16_g170477;
				Data16_g170477.PositionWO = In_PositionWO16_g170477;
				Data16_g170477.PositionRawOS = In_PositionRawOS16_g170477;
				Data16_g170477.PositionAddOS = In_PositionAddOS16_g170477;
				Data16_g170477.PivotOS = In_PivotOS16_g170477;
				Data16_g170477.PivotWS = In_PivotWS16_g170477;
				Data16_g170477.PivotWO = In_PivotWO16_g170477;
				Data16_g170477.NormalOS = In_NormalOS16_g170477;
				Data16_g170477.NormalWS = In_NormalWS16_g170477;
				Data16_g170477.NormalRawOS = In_NormalRawOS16_g170477;
				Data16_g170477.NormalRawWS = In_NormalRawWS16_g170477;
				Data16_g170477.TangentOS = In_TangentOS16_g170477;
				Data16_g170477.ViewDirWS = In_ViewDirWS16_g170477;
				Data16_g170477.VertexData = In_VertexData16_g170477;
				Data16_g170477.MotionData = In_MotionData16_g170477;
				Data16_g170477.BoundsData = In_BoundsData16_g170477;
				Data16_g170477.RotationData = In_RotationData16_g170477;
				TVEModelData Data15_g170493 = Data16_g170477;
				float Out_Dummy15_g170493 = 0;
				float3 Out_PositionOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170493 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170493 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170493 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170493 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170493 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170493 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170493 = float3( 0,0,0 );
				float4 Out_VertexData15_g170493 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170493 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170493 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170493 = float4( 0,0,0,0 );
				Out_Dummy15_g170493 = Data15_g170493.Dummy;
				Out_PositionOS15_g170493 = Data15_g170493.PositionOS;
				Out_PositionWS15_g170493 = Data15_g170493.PositionWS;
				Out_PositionWO15_g170493 = Data15_g170493.PositionWO;
				Out_PositionRawOS15_g170493 = Data15_g170493.PositionRawOS;
				Out_PositionAddOS15_g170493 = Data15_g170493.PositionAddOS;
				Out_PivotOS15_g170493 = Data15_g170493.PivotOS;
				Out_PivotWS15_g170493 = Data15_g170493.PivotWS;
				Out_PivotWO15_g170493 = Data15_g170493.PivotWO;
				Out_NormalOS15_g170493 = Data15_g170493.NormalOS;
				Out_NormalWS15_g170493 = Data15_g170493.NormalWS;
				Out_NormalRawOS15_g170493 = Data15_g170493.NormalRawOS;
				Out_NormalRawWS15_g170493 = Data15_g170493.NormalRawWS;
				Out_TangentOS15_g170493 = Data15_g170493.TangentOS;
				Out_ViewDirWS15_g170493 = Data15_g170493.ViewDirWS;
				Out_VertexData15_g170493 = Data15_g170493.VertexData;
				Out_MotionData15_g170493 = Data15_g170493.MotionData;
				Out_BoundsData15_g170493 = Data15_g170493.BoundsData;
				Out_RotationData15_g170493 = Data15_g170493.RotationData;
				float3 temp_output_217_24_g170492 = Out_PivotOS15_g170493;
				float3 In_PositionOS16_g170494 = ( Out_PositionOS15_g170493 + temp_output_217_24_g170492 );
				float3 In_PositionWS16_g170494 = Out_PositionWS15_g170493;
				float3 In_PositionWO16_g170494 = Out_PositionWO15_g170493;
				float3 In_PositionRawOS16_g170494 = Out_PositionRawOS15_g170493;
				float3 In_PositionAddOS16_g170494 = Out_PositionAddOS15_g170493;
				float3 In_PivotOS16_g170494 = temp_output_217_24_g170492;
				float3 In_PivotWS16_g170494 = Out_PivotWS15_g170493;
				float3 In_PivotWO16_g170494 = Out_PivotWO15_g170493;
				float3 In_NormalOS16_g170494 = Out_NormalOS15_g170493;
				float3 In_NormalWS16_g170494 = Out_NormalWS15_g170493;
				float3 In_NormalRawOS16_g170494 = Out_NormalRawOS15_g170493;
				float3 In_NormalRawWS16_g170494 = Out_NormalRawWS15_g170493;
				float4 In_TangentOS16_g170494 = Out_TangentOS15_g170493;
				float3 In_ViewDirWS16_g170494 = Out_ViewDirWS15_g170493;
				float4 In_VertexData16_g170494 = Out_VertexData15_g170493;
				float4 In_MotionData16_g170494 = Out_MotionData15_g170493;
				float4 In_BoundsData16_g170494 = Out_BoundsData15_g170493;
				float4 In_RotationData16_g170494 = Out_RotationData15_g170493;
				Data16_g170494.Dummy = In_Dummy16_g170494;
				Data16_g170494.PositionOS = In_PositionOS16_g170494;
				Data16_g170494.PositionWS = In_PositionWS16_g170494;
				Data16_g170494.PositionWO = In_PositionWO16_g170494;
				Data16_g170494.PositionRawOS = In_PositionRawOS16_g170494;
				Data16_g170494.PositionAddOS = In_PositionAddOS16_g170494;
				Data16_g170494.PivotOS = In_PivotOS16_g170494;
				Data16_g170494.PivotWS = In_PivotWS16_g170494;
				Data16_g170494.PivotWO = In_PivotWO16_g170494;
				Data16_g170494.NormalOS = In_NormalOS16_g170494;
				Data16_g170494.NormalWS = In_NormalWS16_g170494;
				Data16_g170494.NormalRawOS = In_NormalRawOS16_g170494;
				Data16_g170494.NormalRawWS = In_NormalRawWS16_g170494;
				Data16_g170494.TangentOS = In_TangentOS16_g170494;
				Data16_g170494.ViewDirWS = In_ViewDirWS16_g170494;
				Data16_g170494.VertexData = In_VertexData16_g170494;
				Data16_g170494.MotionData = In_MotionData16_g170494;
				Data16_g170494.BoundsData = In_BoundsData16_g170494;
				Data16_g170494.RotationData = In_RotationData16_g170494;
				TVEModelData Data15_g170505 = Data16_g170494;
				float Out_Dummy15_g170505 = 0;
				float3 Out_PositionOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170505 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170505 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170505 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170505 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170505 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170505 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170505 = float3( 0,0,0 );
				float4 Out_VertexData15_g170505 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170505 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170505 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170505 = float4( 0,0,0,0 );
				Out_Dummy15_g170505 = Data15_g170505.Dummy;
				Out_PositionOS15_g170505 = Data15_g170505.PositionOS;
				Out_PositionWS15_g170505 = Data15_g170505.PositionWS;
				Out_PositionWO15_g170505 = Data15_g170505.PositionWO;
				Out_PositionRawOS15_g170505 = Data15_g170505.PositionRawOS;
				Out_PositionAddOS15_g170505 = Data15_g170505.PositionAddOS;
				Out_PivotOS15_g170505 = Data15_g170505.PivotOS;
				Out_PivotWS15_g170505 = Data15_g170505.PivotWS;
				Out_PivotWO15_g170505 = Data15_g170505.PivotWO;
				Out_NormalOS15_g170505 = Data15_g170505.NormalOS;
				Out_NormalWS15_g170505 = Data15_g170505.NormalWS;
				Out_NormalRawOS15_g170505 = Data15_g170505.NormalRawOS;
				Out_NormalRawWS15_g170505 = Data15_g170505.NormalRawWS;
				Out_TangentOS15_g170505 = Data15_g170505.TangentOS;
				Out_ViewDirWS15_g170505 = Data15_g170505.ViewDirWS;
				Out_VertexData15_g170505 = Data15_g170505.VertexData;
				Out_MotionData15_g170505 = Data15_g170505.MotionData;
				Out_BoundsData15_g170505 = Data15_g170505.BoundsData;
				Out_RotationData15_g170505 = Data15_g170505.RotationData;
				float3 temp_output_31_0_g170502 = Out_PositionOS15_g170505;
				
				float4 temp_output_6_0_g170518 = Out_TangentOS15_g170505;
				float2 uv_WetnessDropsTex = inputMesh.ase_texcoord.xy * _WetnessDropsTex_ST.xy + _WetnessDropsTex_ST.zw;
				half4 Dummy_Data2262 = ( ( ( _VariationLiteInfo + _VariationColoring ) + ( _VariationCategory + _VariationEnd ) + ( _VariationIntensityValue + _VariationColorTwo + _VariationColorOne ) + ( _VariationMultiValue + _VariationNoiseRemap + _VariationNoisePivotsValue1 + _VariationNoiseTillingValue ) ) + ( ( _TintingLiteInfo + _TintingColoring ) + ( _TintingCategory + _TintingEnd + _TintingSpace + _TintingBakeMode + _TintingElementMode ) + ( _TintingIntensityValue + _TintingColor + _TintingGrayValue ) + ( _TintingMultiValue + _TintingLumaValue + _TintingLumaRemap ) + ( _TintingMeshMode + _TintingMeshRemap + _TintingMeshValue + _TintingBlendRemap ) + 0.0 ) + ( ( _DrynessLiteInfo + _DrynessColoring ) + ( _DrynessCategory + _DrynessEnd + _DrynessSpace + _DrynessElementMode + _DrynessBakeMode ) + ( _DrynessIntensityValue + _DrynessColor + _DrynessGrayValue + _DrynessShiftValue + _DrynessSmoothnessValue + _DrynessSubsurfaceValue ) + ( _DrynessMultiValue + _DrynessLumaValue + _DrynessLumaRemap ) + ( _DrynessMeshMode + _DrynessMeshRemap + _DrynessMeshValue + _DrynessBlendRemap ) + 0.0 ) + ( ( _WetnessLiteInfo + _WetnessColoring ) + ( _WetnessCategory + _WetnessEnd + _WetnessElementMode + _WetnessBakeMode ) + ( _WetnessIntensityValue + _WetnessContrastValue + _WetnessSmoothnessValue ) + ( _WetnessWaterIntensityValue + _WetnessWaterColor + _WetnessWaterBaseValue + _WetnessWaterBlendRemap ) + ( SAMPLE_TEXTURE2D_LOD( _WetnessDropsTex, sampler_WetnessDropsTex, uv_WetnessDropsTex, 0.0 ) + ( _WetnessDropsIntensityValue + _WetnessDropsNormalValue + _WetnessDropsTillingValue + _WetnessDropsDistValue ) ) ) + ( ( _CutoutLiteInfo + _CutoutColoring ) + ( _CutoutCategory + _CutoutEnd + _CutoutSpace + _CutoutElementMode + _CutoutBakeMode ) + ( _CutoutIntensityValue + _CutoutShadowMode ) + ( _CutoutMultiValue + _CutoutAlphaValue + _CutoutNoiseValue + _CutoutNoiseTillingValue ) + ( _CutoutMeshValue + _CutoutMeshMode + _CutoutMeshRemap ) ) + ( ( _DitherLiteInfo + _DitherColoring ) + ( _DitherCategory + _DitherEnd ) + ( _DitherConstantValue + ( _DitherProximityValue + _DitherProximityDistValue ) + ( _DitherGlancingValue + _DitherGlancingAngleValue ) + ( _DitherDistanceValue + _DitherDistanceMaxValue + _DitherDistanceMinValue ) + _DitherShadowMode ) + ( _DitherMultiValue + _DitherNoiseTillingValue ) ) + ( ( _PerspectiveLiteInfo + _PerspectiveColoring ) + ( _PerspectiveCategory + _PerspectiveEnd ) + ( _PerspectiveIntensityValue + _PerspectiveAngleValue ) ) + ( ( _SizeFadeLiteInfo + _SizeFadeColoring ) + ( _SizeFadeCategory + _SizeFadeEnd + _SizeFadeElementMode ) + ( _SizeFadeIntensityValue + _SizeFadeScaleMode + _SizeFadeScaleValue + _SizeFadeDistMinValue + _SizeFadeDistMaxValue ) ) );
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170518 = ( temp_output_6_0_g170518 + ( Dummy_Data2262 * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170518 = temp_output_6_0_g170518;
				#endif
				
				outputPackedVaryingsMeshToPS.ase_texcoord8.xyz = vertexToFrag73_g156892;
				outputPackedVaryingsMeshToPS.ase_texcoord9.xyz = vertexToFrag76_g156892;
				float3 ase_worldTangent = TransformObjectToWorldDir(inputMesh.tangentOS.xyz);
				float ase_vertexTangentSign = inputMesh.tangentOS.w * ( unity_WorldTransformParams.w >= 0.0 ? 1.0 : -1.0 );
				float3 ase_worldBitangent = cross( ase_worldNormal, ase_worldTangent ) * ase_vertexTangentSign;
				outputPackedVaryingsMeshToPS.ase_texcoord10.xyz = ase_worldBitangent;
				float temp_output_6_0_g170282 = ( _MotionHighlightValue * Motion_FadeMask1820_g170256 * Wave_Intensity1900_g170256 * ( Base_Mask217_g170256 * Base_Mask217_g170256 ) * ( Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 * Wave_Noise1475_g170256 ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170282 = ( temp_output_6_0_g170282 + ( _MotionHighlightColor.r * 0.0 ) );
				#else
				float staticSwitch14_g170282 = temp_output_6_0_g170282;
				#endif
				half Wave_Mask2416 = staticSwitch14_g170282;
				float4 appendResult23_g170398 = (float4(0.0 , 0.0 , 0.0 , Wave_Mask2416));
				float4 vertexToFrag24_g170398 = appendResult23_g170398;
				outputPackedVaryingsMeshToPS.ase_texcoord11 = vertexToFrag24_g170398;
				
				outputPackedVaryingsMeshToPS.ase_texcoord7 = inputMesh.ase_texcoord;
				outputPackedVaryingsMeshToPS.ase_color = inputMesh.ase_color;
				
				//setting value to unused interpolator channels and avoid initialization warnings
				outputPackedVaryingsMeshToPS.ase_texcoord8.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord9.w = 0;
				outputPackedVaryingsMeshToPS.ase_texcoord10.w = 0;

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				float3 defaultVertexValue = inputMesh.positionOS.xyz;
				#else
				float3 defaultVertexValue = float3( 0, 0, 0 );
				#endif
				float3 vertexValue =  ( temp_output_31_0_g170502 + _DisableSRPBatcher );

				#ifdef ASE_ABSOLUTE_VERTEX_POS
				inputMesh.positionOS.xyz = vertexValue;
				#else
				inputMesh.positionOS.xyz += vertexValue;
				#endif
				inputMesh.normalOS = Out_NormalOS15_g170505;
				inputMesh.tangentOS = staticSwitch14_g170518;
				return inputMesh;
			}

			PackedVaryingsMeshToPS VertexFunction(AttributesMesh inputMesh)
			{
				PackedVaryingsMeshToPS outputPackedVaryingsMeshToPS = (PackedVaryingsMeshToPS)0;
				AttributesMesh defaultMesh = inputMesh;

				UNITY_SETUP_INSTANCE_ID(inputMesh);
				UNITY_TRANSFER_INSTANCE_ID(inputMesh, outputPackedVaryingsMeshToPS);
				UNITY_INITIALIZE_VERTEX_OUTPUT_STEREO( outputPackedVaryingsMeshToPS );

				inputMesh = ApplyMeshModification( inputMesh, _TimeParameters.xyz, outputPackedVaryingsMeshToPS);

				float3 positionRWS = TransformObjectToWorld(inputMesh.positionOS);
				float3 normalWS = TransformObjectToWorldNormal(inputMesh.normalOS);
				float4 tangentWS = float4(TransformObjectToWorldDir(inputMesh.tangentOS.xyz), inputMesh.tangentOS.w);

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
				float4 VPASSpreviousPositionCS;
				float4 VPASSpositionCS = mul(UNITY_MATRIX_UNJITTERED_VP, float4(positionRWS, 1.0));

				bool forceNoMotion = unity_MotionVectorsParams.y == 0.0;
				if (forceNoMotion)
				{
					VPASSpreviousPositionCS = float4(0.0, 0.0, 0.0, 1.0);
				}
				else
				{
					bool hasDeformation = unity_MotionVectorsParams.x > 0.0;
					float3 effectivePositionOS = (hasDeformation ? inputMesh.previousPositionOS : defaultMesh.positionOS);
					#if defined(_ADD_PRECOMPUTED_VELOCITY)
					effectivePositionOS -= inputMesh.precomputedVelocity;
					#endif

					#if defined(HAVE_MESH_MODIFICATION)
						AttributesMesh previousMesh = defaultMesh;
						previousMesh.positionOS = effectivePositionOS ;
						PackedVaryingsMeshToPS test = (PackedVaryingsMeshToPS)0;
						float3 curTime = _TimeParameters.xyz;
						previousMesh = ApplyMeshModification(previousMesh, _LastTimeParameters.xyz, test);
						_TimeParameters.xyz = curTime;
						float3 previousPositionRWS = TransformPreviousObjectToWorld(previousMesh.positionOS);
					#else
						float3 previousPositionRWS = TransformPreviousObjectToWorld(effectivePositionOS);
					#endif

					#ifdef ATTRIBUTES_NEED_NORMAL
						float3 normalWS = TransformPreviousObjectToWorldNormal(defaultMesh.normalOS);
					#else
						float3 normalWS = float3(0.0, 0.0, 0.0);
					#endif

					#if defined(HAVE_VERTEX_MODIFICATION)
						ApplyVertexModification(inputMesh, normalWS, previousPositionRWS, _LastTimeParameters.xyz);
					#endif

					VPASSpreviousPositionCS = mul(UNITY_MATRIX_PREV_VP, float4(previousPositionRWS, 1.0));
				}
				#endif

				outputPackedVaryingsMeshToPS.positionCS = TransformWorldToHClip(positionRWS);
				outputPackedVaryingsMeshToPS.positionRWS.xyz = positionRWS;
				outputPackedVaryingsMeshToPS.normalWS.xyz = normalWS;
				outputPackedVaryingsMeshToPS.tangentWS.xyzw = tangentWS;
				outputPackedVaryingsMeshToPS.uv1.xyzw = inputMesh.uv1;
				outputPackedVaryingsMeshToPS.uv2.xyzw = inputMesh.uv2;

				#ifdef _WRITE_TRANSPARENT_MOTION_VECTOR
					outputPackedVaryingsMeshToPS.vpassPositionCS = float3(VPASSpositionCS.xyw);
					outputPackedVaryingsMeshToPS.vpassPreviousPositionCS = float3(VPASSpreviousPositionCS.xyw);
				#endif
				return outputPackedVaryingsMeshToPS;
			}

			#if defined(ASE_TESSELLATION)
			struct VertexControl
			{
				float3 positionOS : INTERNALTESSPOS;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				float4 ase_texcoord3 : TEXCOORD3;
				float4 ase_color : COLOR;
				float4 ase_texcoord : TEXCOORD0;

				UNITY_VERTEX_INPUT_INSTANCE_ID
			};

			struct TessellationFactors
			{
				float edge[3] : SV_TessFactor;
				float inside : SV_InsideTessFactor;
			};

			VertexControl Vert ( AttributesMesh v )
			{
				VertexControl o;
				UNITY_SETUP_INSTANCE_ID(v);
				UNITY_TRANSFER_INSTANCE_ID(v, o);
				o.positionOS = v.positionOS;
				o.normalOS = v.normalOS;
				o.tangentOS = v.tangentOS;
				o.ase_texcoord3 = v.ase_texcoord3;
				o.ase_color = v.ase_color;
				o.ase_texcoord = v.ase_texcoord;
				return o;
			}

			TessellationFactors TessellationFunction (InputPatch<VertexControl,3> v)
			{
				TessellationFactors o;
				float4 tf = 1;
				float tessValue = _TessValue; float tessMin = _TessMin; float tessMax = _TessMax;
				float edgeLength = _TessEdgeLength; float tessMaxDisp = _TessMaxDisp;
				#if (SHADEROPTIONS_CAMERA_RELATIVE_RENDERING != 0)
				float3 cameraPos = 0;
				#else
				float3 cameraPos = _WorldSpaceCameraPos;
				#endif
				#if defined(ASE_FIXED_TESSELLATION)
				tf = FixedTess( tessValue );
				#elif defined(ASE_DISTANCE_TESSELLATION)
				tf = DistanceBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), tessValue, tessMin, tessMax, GetObjectToWorldMatrix(), cameraPos );
				#elif defined(ASE_LENGTH_TESSELLATION)
				tf = EdgeLengthBasedTess(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, GetObjectToWorldMatrix(), cameraPos, _ScreenParams );
				#elif defined(ASE_LENGTH_CULL_TESSELLATION)
				tf = EdgeLengthBasedTessCull(float4(v[0].positionOS,1), float4(v[1].positionOS,1), float4(v[2].positionOS,1), edgeLength, tessMaxDisp, GetObjectToWorldMatrix(), cameraPos, _ScreenParams, _FrustumPlanes );
				#endif
				o.edge[0] = tf.x; o.edge[1] = tf.y; o.edge[2] = tf.z; o.inside = tf.w;
				return o;
			}

			[domain("tri")]
			[partitioning("fractional_odd")]
			[outputtopology("triangle_cw")]
			[patchconstantfunc("TessellationFunction")]
			[outputcontrolpoints(3)]
			VertexControl HullFunction(InputPatch<VertexControl, 3> patch, uint id : SV_OutputControlPointID)
			{
			   return patch[id];
			}

			[domain("tri")]
			PackedVaryingsMeshToPS DomainFunction(TessellationFactors factors, OutputPatch<VertexControl, 3> patch, float3 bary : SV_DomainLocation)
			{
				AttributesMesh o = (AttributesMesh) 0;
				o.positionOS = patch[0].positionOS * bary.x + patch[1].positionOS * bary.y + patch[2].positionOS * bary.z;
				o.normalOS = patch[0].normalOS * bary.x + patch[1].normalOS * bary.y + patch[2].normalOS * bary.z;
				o.tangentOS = patch[0].tangentOS * bary.x + patch[1].tangentOS * bary.y + patch[2].tangentOS * bary.z;
				o.ase_texcoord3 = patch[0].ase_texcoord3 * bary.x + patch[1].ase_texcoord3 * bary.y + patch[2].ase_texcoord3 * bary.z;
				o.ase_color = patch[0].ase_color * bary.x + patch[1].ase_color * bary.y + patch[2].ase_color * bary.z;
				o.ase_texcoord = patch[0].ase_texcoord * bary.x + patch[1].ase_texcoord * bary.y + patch[2].ase_texcoord * bary.z;
				#if defined(ASE_PHONG_TESSELLATION)
				float3 pp[3];
				for (int i = 0; i < 3; ++i)
					pp[i] = o.positionOS.xyz - patch[i].normalOS * (dot(o.positionOS.xyz, patch[i].normalOS) - dot(patch[i].positionOS.xyz, patch[i].normalOS));
				float phongStrength = _TessPhongStrength;
				o.positionOS.xyz = phongStrength * (pp[0]*bary.x + pp[1]*bary.y + pp[2]*bary.z) + (1.0f-phongStrength) * o.positionOS.xyz;
				#endif
				UNITY_TRANSFER_INSTANCE_ID(patch[0], o);
				return VertexFunction(o);
			}
			#else
			PackedVaryingsMeshToPS Vert ( AttributesMesh v )
			{
				return VertexFunction( v );
			}
			#endif

			#if defined(WRITE_NORMAL_BUFFER) && defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target2
			#elif defined(WRITE_NORMAL_BUFFER) || defined(WRITE_MSAA_DEPTH)
			#define SV_TARGET_DECAL SV_Target1
			#else
			#define SV_TARGET_DECAL SV_Target0
			#endif

			void Frag( PackedVaryingsMeshToPS packedInput
						#if defined(SCENESELECTIONPASS) || defined(SCENEPICKINGPASS)
						, out float4 outColor : SV_Target0
						#else
							#ifdef WRITE_MSAA_DEPTH
							, out float4 depthColor : SV_Target0
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target1
								#endif
							#else
								#ifdef WRITE_NORMAL_BUFFER
								, out float4 outNormalBuffer : SV_Target0
								#endif
							#endif

							#if defined(WRITE_DECAL_BUFFER) && !defined(_DISABLE_DECALS)
							, out float4 outDecalBuffer : SV_TARGET_DECAL
							#endif
						#endif

						#if defined(_DEPTHOFFSET_ON) && !defined(SCENEPICKINGPASS)
						, out float outputDepth : DEPTH_OFFSET_SEMANTIC
						#endif
						
					)
			{
			UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
			UNITY_SETUP_INSTANCE_ID(packedInput);

				float3 positionRWS = packedInput.positionRWS.xyz;

				FragInputs input;
				ZERO_INITIALIZE(FragInputs, input);

				input.tangentToWorld = k_identity3x3;
				input.positionSS = packedInput.positionCS;

				input.positionRWS = positionRWS;

				#if _DOUBLESIDED_ON && SHADER_STAGE_FRAGMENT
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false);
				#elif SHADER_STAGE_FRAGMENT
				#if defined(ASE_NEED_CULLFACE)
				input.isFrontFace = IS_FRONT_VFACE( packedInput.cullFace, true, false );
				#endif
				#endif
				half isFrontFace = input.isFrontFace;

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS);

				float3 V = GetWorldSpaceNormalizeViewDir(input.positionRWS);

				PickingSurfaceDescription surfaceDescription = (PickingSurfaceDescription)0;
				float localCustomAlphaClip19_g170509 = ( 0.0 );
				float localBreakData4_g170508 = ( 0.0 );
				float localCompData3_g170497 = ( 0.0 );
				TVEVisualData Data3_g170497 = (TVEVisualData)0;
				half Dummy145_g170495 = ( _SubsurfaceCategory + _SubsurfaceEnd + ( _SubsurfaceDirectValue + _SubsurfaceNormalValue + _SubsurfaceAmbientValue + _SubsurfaceShadowValue ) + _SubsurfaceElementMode );
				float In_Dummy3_g170497 = Dummy145_g170495;
				float localBreakData4_g170496 = ( 0.0 );
				float localCompData3_g170472 = ( 0.0 );
				TVEVisualData Data3_g170472 = (TVEVisualData)0;
				half Dummy145_g170460 = ( _EmissiveCategory + _EmissiveEnd + ( _EmissivePowerMode + _EmissivePowerValue ) + _EmissiveElementMode + _EmissiveFlagMode );
				float In_Dummy3_g170472 = Dummy145_g170460;
				float localBreakData4_g170471 = ( 0.0 );
				float localCompData3_g170425 = ( 0.0 );
				TVEVisualData Data3_g170425 = (TVEVisualData)0;
				float2 uv_OverlayGlitterTex = packedInput.ase_texcoord7.xy * _OverlayGlitterTex_ST.xy + _OverlayGlitterTex_ST.zw;
				half4 Dummy594_g170422 = ( ( _OverlayCategory + _OverlayEnd + _OverlaySpace + _OverlayElementMode + _OverlayBakeMode ) + ( _OverlayLiteInfo + _OverlayColoringOn + _OverlayColoringOff ) + ( SAMPLE_TEXTURE2D( _OverlayGlitterTex, sampler_OverlayGlitterTex, uv_OverlayGlitterTex ) + _OverlayGlitterTillingValue + _OverlayGlitterIntensityValue + _OverlayGlitterColor + _OverlayGlitterDistValue ) );
				float In_Dummy3_g170425 = Dummy594_g170422.r;
				float localBreakData4_g170423 = ( 0.0 );
				float localCompData3_g170421 = ( 0.0 );
				TVEVisualData Data3_g170421 = (TVEVisualData)0;
				float In_Dummy3_g170421 = 0.0;
				float localBreakData4_g170420 = ( 0.0 );
				float localCompData3_g170413 = ( 0.0 );
				TVEVisualData Data3_g170413 = (TVEVisualData)0;
				half Dummy220_g170409 = ( _GradientCategory + _GradientEnd + _GradientBakeMode );
				float In_Dummy3_g170413 = Dummy220_g170409;
				float localBreakData4_g170412 = ( 0.0 );
				float localCompData3_g170401 = ( 0.0 );
				TVEVisualData Data3_g170401 = (TVEVisualData)0;
				half Dummy202_g170399 = ( _OcclusionCategory + _OcclusionEnd + _OcclusionBakeMode );
				float In_Dummy3_g170401 = Dummy202_g170399;
				float localBreakData4_g170400 = ( 0.0 );
				float localCompData3_g170382 = ( 0.0 );
				TVEVisualData Data3_g170382 = (TVEVisualData)0;
				half4 Dummy944_g170365 = ( ( _DetailCategory + _DetailEnd ) + ( _ThirdSampleMode + _ThirdCoordMode + _ThirdCoordValue ) + ( _ThirdMaskSampleMode + _ThirdMaskCoordMode + _ThirdMaskCoordValue ) + _ThirdElementMode + _ThirdBakeMode );
				float In_Dummy3_g170382 = Dummy944_g170365.x;
				float localBreakData4_g170381 = ( 0.0 );
				float localCompData3_g170342 = ( 0.0 );
				TVEVisualData Data3_g170342 = (TVEVisualData)0;
				half4 Dummy946_g170331 = ( ( _LayerCategory + _LayerEnd ) + ( _SecondSampleMode + _SecondCoordMode + _SecondCoordValue ) + ( _SecondMaskSampleMode + _SecondMaskCoordMode + _SecondMaskCoordValue ) + _SecondElementMode + _SecondBakeMode );
				float In_Dummy3_g170342 = Dummy946_g170331.x;
				float localBreakData4_g170345 = ( 0.0 );
				float localCompData3_g170323 = ( 0.0 );
				TVEVisualData Data3_g170323 = (TVEVisualData)0;
				half4 Dummy130_g170313 = ( _MainCategory + _MainEnd + ( _MainSampleMode + _MainCoordMode + _MainCoordValue ) );
				float In_Dummy3_g170323 = Dummy130_g170313.x;
				TEXTURE2D(Texture276_g170324) = _MainAlbedoTex;
				float localFilterTexture19_g170327 = ( 0.0 );
				SamplerState SamplerDefault19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170327 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170327 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170327 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170327 = SamplerDefault19_g170327;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170327 = SamplerDefault19_g170327;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170327 = SamplerPoint19_g170327;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170327 = SamplerLow19_g170327;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170327 = SamplerMedium19_g170327;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170327 = SamplerHigh19_g170327;
				#endif
				SamplerState Sampler276_g170324 = SS19_g170327;
				half4 Local_Coords180_g170313 = _main_coord_value;
				float4 temp_output_37_0_g170324 = Local_Coords180_g170313;
				half4 Coords276_g170324 = temp_output_37_0_g170324;
				half2 TexCoord276_g170324 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170324 = SampleMain( Texture276_g170324 , Sampler276_g170324 , Coords276_g170324 , TexCoord276_g170324 );
				TEXTURE2D(Texture275_g170324) = _MainAlbedoTex;
				SamplerState Sampler275_g170324 = SS19_g170327;
				half4 Coords275_g170324 = temp_output_37_0_g170324;
				half2 TexCoord275_g170324 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170324 = SampleExtra( Texture275_g170324 , Sampler275_g170324 , Coords275_g170324 , TexCoord275_g170324 );
				TEXTURE2D(Texture238_g170324) = _MainAlbedoTex;
				SamplerState Sampler238_g170324 = SS19_g170327;
				half4 Coords238_g170324 = temp_output_37_0_g170324;
				TVEModelData Data16_g156906 = (TVEModelData)0;
				float In_Dummy16_g156906 = 0.0;
				float3 In_PositionOS16_g156906 = float3( 0,0,0 );
				float3 vertexToFrag73_g156892 = packedInput.ase_texcoord8.xyz;
				half3 PositionWS122_g156892 = vertexToFrag73_g156892;
				float3 In_PositionWS16_g156906 = PositionWS122_g156892;
				float3 vertexToFrag76_g156892 = packedInput.ase_texcoord9.xyz;
				half3 PivotWS121_g156892 = vertexToFrag76_g156892;
				#ifdef TVE_SCOPE_DYNAMIC
				float3 staticSwitch204_g156892 = ( PositionWS122_g156892 - PivotWS121_g156892 );
				#else
				float3 staticSwitch204_g156892 = PositionWS122_g156892;
				#endif
				half3 PositionWO132_g156892 = ( staticSwitch204_g156892 - TVE_WorldOrigin );
				float3 In_PositionWO16_g156906 = PositionWO132_g156892;
				float3 In_PositionRawOS16_g156906 = float3( 0,0,0 );
				float3 In_PositionAddOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotOS16_g156906 = float3( 0,0,0 );
				float3 In_PivotWS16_g156906 = PivotWS121_g156892;
				half3 PivotWO133_g156892 = ( PivotWS121_g156892 - TVE_WorldOrigin );
				float3 In_PivotWO16_g156906 = PivotWO133_g156892;
				float3 In_NormalOS16_g156906 = float3( 0,0,0 );
				float3 normalizedWorldNormal = normalize( packedInput.normalWS );
				half3 Normal_WS95_g156892 = normalizedWorldNormal;
				float3 In_NormalWS16_g156906 = Normal_WS95_g156892;
				float3 In_NormalRawOS16_g156906 = float3( 0,0,0 );
				float3 In_NormalRawWS16_g156906 = float3( 0,0,0 );
				float4 In_TangentOS16_g156906 = float4( 0,1,0,1 );
				float3 normalizeResult296_g156892 = normalize( ( _WorldSpaceCameraPos - PositionWS122_g156892 ) );
				half3 ViewDirWS169_g156892 = normalizeResult296_g156892;
				float3 In_ViewDirWS16_g156906 = ViewDirWS169_g156892;
				half4 VertexMasks171_g156892 = packedInput.ase_color;
				float4 In_VertexData16_g156906 = VertexMasks171_g156892;
				float4 In_MotionData16_g156906 = float4( 0,0,0,0 );
				float4 In_BoundsData16_g156906 = float4( 1,1,1,1 );
				float4 In_RotationData16_g156906 = float4( 0,0,0,0 );
				Data16_g156906.Dummy = In_Dummy16_g156906;
				Data16_g156906.PositionOS = In_PositionOS16_g156906;
				Data16_g156906.PositionWS = In_PositionWS16_g156906;
				Data16_g156906.PositionWO = In_PositionWO16_g156906;
				Data16_g156906.PositionRawOS = In_PositionRawOS16_g156906;
				Data16_g156906.PositionAddOS = In_PositionAddOS16_g156906;
				Data16_g156906.PivotOS = In_PivotOS16_g156906;
				Data16_g156906.PivotWS = In_PivotWS16_g156906;
				Data16_g156906.PivotWO = In_PivotWO16_g156906;
				Data16_g156906.NormalOS = In_NormalOS16_g156906;
				Data16_g156906.NormalWS = In_NormalWS16_g156906;
				Data16_g156906.NormalRawOS = In_NormalRawOS16_g156906;
				Data16_g156906.NormalRawWS = In_NormalRawWS16_g156906;
				Data16_g156906.TangentOS = In_TangentOS16_g156906;
				Data16_g156906.ViewDirWS = In_ViewDirWS16_g156906;
				Data16_g156906.VertexData = In_VertexData16_g156906;
				Data16_g156906.MotionData = In_MotionData16_g156906;
				Data16_g156906.BoundsData = In_BoundsData16_g156906;
				Data16_g156906.RotationData = In_RotationData16_g156906;
				TVEModelData Data15_g170314 = Data16_g156906;
				float Out_Dummy15_g170314 = 0;
				float3 Out_PositionOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170314 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170314 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170314 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170314 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170314 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170314 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170314 = float3( 0,0,0 );
				float4 Out_VertexData15_g170314 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170314 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170314 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170314 = float4( 0,0,0,0 );
				Out_Dummy15_g170314 = Data15_g170314.Dummy;
				Out_PositionOS15_g170314 = Data15_g170314.PositionOS;
				Out_PositionWS15_g170314 = Data15_g170314.PositionWS;
				Out_PositionWO15_g170314 = Data15_g170314.PositionWO;
				Out_PositionRawOS15_g170314 = Data15_g170314.PositionRawOS;
				Out_PositionAddOS15_g170314 = Data15_g170314.PositionAddOS;
				Out_PivotOS15_g170314 = Data15_g170314.PivotOS;
				Out_PivotWS15_g170314 = Data15_g170314.PivotWS;
				Out_PivotWO15_g170314 = Data15_g170314.PivotWO;
				Out_NormalOS15_g170314 = Data15_g170314.NormalOS;
				Out_NormalWS15_g170314 = Data15_g170314.NormalWS;
				Out_NormalRawOS15_g170314 = Data15_g170314.NormalRawOS;
				Out_NormalRawWS15_g170314 = Data15_g170314.NormalRawWS;
				Out_TangentOS15_g170314 = Data15_g170314.TangentOS;
				Out_ViewDirWS15_g170314 = Data15_g170314.ViewDirWS;
				Out_VertexData15_g170314 = Data15_g170314.VertexData;
				Out_MotionData15_g170314 = Data15_g170314.MotionData;
				Out_BoundsData15_g170314 = Data15_g170314.BoundsData;
				Out_RotationData15_g170314 = Data15_g170314.RotationData;
				half3 Model_PositionWO222_g170313 = Out_PositionWO15_g170314;
				float3 temp_output_279_0_g170324 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170324 = temp_output_279_0_g170324;
				half4 localSamplePlanar2D238_g170324 = SamplePlanar2D( Texture238_g170324 , Sampler238_g170324 , Coords238_g170324 , WorldPosition238_g170324 );
				TEXTURE2D(Texture246_g170324) = _MainAlbedoTex;
				SamplerState Sampler246_g170324 = SS19_g170327;
				half4 Coords246_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition246_g170324 = temp_output_279_0_g170324;
				half3 Model_NormalWS226_g170313 = Out_NormalWS15_g170314;
				float3 temp_output_280_0_g170324 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170324 = temp_output_280_0_g170324;
				half4 localSamplePlanar3D246_g170324 = SamplePlanar3D( Texture246_g170324 , Sampler246_g170324 , Coords246_g170324 , WorldPosition246_g170324 , WorldNormal246_g170324 );
				TEXTURE2D(Texture234_g170324) = _MainAlbedoTex;
				SamplerState Sampler234_g170324 = SS19_g170327;
				float4 Coords234_g170324 = temp_output_37_0_g170324;
				float3 WorldPosition234_g170324 = temp_output_279_0_g170324;
				float4 localSampleStochastic2D234_g170324 = SampleStochastic2D( Texture234_g170324 , Sampler234_g170324 , Coords234_g170324 , WorldPosition234_g170324 );
				TEXTURE2D(Texture263_g170324) = _MainAlbedoTex;
				SamplerState Sampler263_g170324 = SS19_g170327;
				half4 Coords263_g170324 = temp_output_37_0_g170324;
				half3 WorldPosition263_g170324 = temp_output_279_0_g170324;
				half3 WorldNormal263_g170324 = temp_output_280_0_g170324;
				half4 localSampleStochastic3D263_g170324 = SampleStochastic3D( Texture263_g170324 , Sampler263_g170324 , Coords263_g170324 , WorldPosition263_g170324 , WorldNormal263_g170324 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch184_g170313 = localSampleExtra275_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch184_g170313 = localSamplePlanar2D238_g170324;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch184_g170313 = localSamplePlanar3D246_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch184_g170313 = localSampleStochastic2D234_g170324;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch184_g170313 = localSampleStochastic3D263_g170324;
				#else
				float4 staticSwitch184_g170313 = localSampleMain276_g170324;
				#endif
				half4 Local_AlbedoTex185_g170313 = staticSwitch184_g170313;
				float3 lerpResult53_g170313 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex185_g170313).xyz , _MainAlbedoValue);
				half3 Local_AlbedoRGB107_g170313 = lerpResult53_g170313;
				TEXTURE2D(Texture276_g170326) = _MainShaderTex;
				float localFilterTexture30_g170329 = ( 0.0 );
				SamplerState SamplerDefault30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170329 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170329 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170329 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170329 = SamplerDefault30_g170329;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170329 = SamplerDefault30_g170329;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170329 = SamplerPoint30_g170329;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170329 = SamplerLow30_g170329;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170329 = SamplerMedium30_g170329;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170329 = SamplerHigh30_g170329;
				#endif
				SamplerState Sampler276_g170326 = SS30_g170329;
				float4 temp_output_37_0_g170326 = Local_Coords180_g170313;
				half4 Coords276_g170326 = temp_output_37_0_g170326;
				half2 TexCoord276_g170326 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170326 = SampleMain( Texture276_g170326 , Sampler276_g170326 , Coords276_g170326 , TexCoord276_g170326 );
				TEXTURE2D(Texture275_g170326) = _MainShaderTex;
				SamplerState Sampler275_g170326 = SS30_g170329;
				half4 Coords275_g170326 = temp_output_37_0_g170326;
				half2 TexCoord275_g170326 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170326 = SampleExtra( Texture275_g170326 , Sampler275_g170326 , Coords275_g170326 , TexCoord275_g170326 );
				TEXTURE2D(Texture238_g170326) = _MainShaderTex;
				SamplerState Sampler238_g170326 = SS30_g170329;
				half4 Coords238_g170326 = temp_output_37_0_g170326;
				float3 temp_output_279_0_g170326 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170326 = temp_output_279_0_g170326;
				half4 localSamplePlanar2D238_g170326 = SamplePlanar2D( Texture238_g170326 , Sampler238_g170326 , Coords238_g170326 , WorldPosition238_g170326 );
				TEXTURE2D(Texture246_g170326) = _MainShaderTex;
				SamplerState Sampler246_g170326 = SS30_g170329;
				half4 Coords246_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition246_g170326 = temp_output_279_0_g170326;
				float3 temp_output_280_0_g170326 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170326 = temp_output_280_0_g170326;
				half4 localSamplePlanar3D246_g170326 = SamplePlanar3D( Texture246_g170326 , Sampler246_g170326 , Coords246_g170326 , WorldPosition246_g170326 , WorldNormal246_g170326 );
				TEXTURE2D(Texture234_g170326) = _MainShaderTex;
				SamplerState Sampler234_g170326 = SS30_g170329;
				float4 Coords234_g170326 = temp_output_37_0_g170326;
				float3 WorldPosition234_g170326 = temp_output_279_0_g170326;
				float4 localSampleStochastic2D234_g170326 = SampleStochastic2D( Texture234_g170326 , Sampler234_g170326 , Coords234_g170326 , WorldPosition234_g170326 );
				TEXTURE2D(Texture263_g170326) = _MainShaderTex;
				SamplerState Sampler263_g170326 = SS30_g170329;
				half4 Coords263_g170326 = temp_output_37_0_g170326;
				half3 WorldPosition263_g170326 = temp_output_279_0_g170326;
				half3 WorldNormal263_g170326 = temp_output_280_0_g170326;
				half4 localSampleStochastic3D263_g170326 = SampleStochastic3D( Texture263_g170326 , Sampler263_g170326 , Coords263_g170326 , WorldPosition263_g170326 , WorldNormal263_g170326 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch198_g170313 = localSampleExtra275_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch198_g170313 = localSamplePlanar2D238_g170326;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch198_g170313 = localSamplePlanar3D246_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch198_g170313 = localSampleStochastic2D234_g170326;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch198_g170313 = localSampleStochastic3D263_g170326;
				#else
				float4 staticSwitch198_g170313 = localSampleMain276_g170326;
				#endif
				half4 Local_MasksTex199_g170313 = staticSwitch198_g170313;
				float lerpResult23_g170313 = lerp( 1.0 , (Local_MasksTex199_g170313).y , _MainOcclusionValue);
				float4 appendResult73_g170313 = (float4(( (Local_MasksTex199_g170313).x * _MainMetallicValue ) , lerpResult23_g170313 , (Local_MasksTex199_g170313).z , ( (Local_MasksTex199_g170313).w * _MainSmoothnessValue )));
				half4 Local_Masks109_g170313 = appendResult73_g170313;
				float clampResult17_g170319 = clamp( (Local_Masks109_g170313).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170320 = _MainMultiRemap.x;
				float temp_output_10_0_g170320 = ( _MainMultiRemap.y - temp_output_7_0_g170320 );
				half Local_MultiMask78_g170313 = saturate( ( ( clampResult17_g170319 - temp_output_7_0_g170320 ) / ( temp_output_10_0_g170320 + 0.0001 ) ) );
				float lerpResult58_g170313 = lerp( 1.0 , Local_MultiMask78_g170313 , _MainColorMode);
				float4 lerpResult62_g170313 = lerp( _MainColorTwo , _MainColor , lerpResult58_g170313);
				half3 Local_ColorRGB93_g170313 = (lerpResult62_g170313).rgb;
				half3 Local_Albedo139_g170313 = ( Local_AlbedoRGB107_g170313 * Local_ColorRGB93_g170313 );
				float3 In_Albedo3_g170323 = Local_Albedo139_g170313;
				TEXTURE2D(Texture276_g170325) = _MainNormalTex;
				float localFilterTexture29_g170328 = ( 0.0 );
				SamplerState SamplerDefault29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170328 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170328 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170328 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170328 = SamplerDefault29_g170328;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170328 = SamplerDefault29_g170328;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170328 = SamplerPoint29_g170328;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170328 = SamplerLow29_g170328;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170328 = SamplerMedium29_g170328;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170328 = SamplerHigh29_g170328;
				#endif
				SamplerState Sampler276_g170325 = SS29_g170328;
				float4 temp_output_37_0_g170325 = Local_Coords180_g170313;
				half4 Coords276_g170325 = temp_output_37_0_g170325;
				half2 TexCoord276_g170325 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170325 = SampleMain( Texture276_g170325 , Sampler276_g170325 , Coords276_g170325 , TexCoord276_g170325 );
				TEXTURE2D(Texture275_g170325) = _MainNormalTex;
				SamplerState Sampler275_g170325 = SS29_g170328;
				half4 Coords275_g170325 = temp_output_37_0_g170325;
				half2 TexCoord275_g170325 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170325 = SampleExtra( Texture275_g170325 , Sampler275_g170325 , Coords275_g170325 , TexCoord275_g170325 );
				TEXTURE2D(Texture238_g170325) = _MainNormalTex;
				SamplerState Sampler238_g170325 = SS29_g170328;
				half4 Coords238_g170325 = temp_output_37_0_g170325;
				float3 temp_output_279_0_g170325 = Model_PositionWO222_g170313;
				half3 WorldPosition238_g170325 = temp_output_279_0_g170325;
				half4 localSamplePlanar2D238_g170325 = SamplePlanar2D( Texture238_g170325 , Sampler238_g170325 , Coords238_g170325 , WorldPosition238_g170325 );
				TEXTURE2D(Texture246_g170325) = _MainNormalTex;
				SamplerState Sampler246_g170325 = SS29_g170328;
				half4 Coords246_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition246_g170325 = temp_output_279_0_g170325;
				float3 temp_output_280_0_g170325 = Model_NormalWS226_g170313;
				half3 WorldNormal246_g170325 = temp_output_280_0_g170325;
				half4 localSamplePlanar3D246_g170325 = SamplePlanar3D( Texture246_g170325 , Sampler246_g170325 , Coords246_g170325 , WorldPosition246_g170325 , WorldNormal246_g170325 );
				TEXTURE2D(Texture234_g170325) = _MainNormalTex;
				SamplerState Sampler234_g170325 = SS29_g170328;
				float4 Coords234_g170325 = temp_output_37_0_g170325;
				float3 WorldPosition234_g170325 = temp_output_279_0_g170325;
				float4 localSampleStochastic2D234_g170325 = SampleStochastic2D( Texture234_g170325 , Sampler234_g170325 , Coords234_g170325 , WorldPosition234_g170325 );
				TEXTURE2D(Texture263_g170325) = _MainNormalTex;
				SamplerState Sampler263_g170325 = SS29_g170328;
				half4 Coords263_g170325 = temp_output_37_0_g170325;
				half3 WorldPosition263_g170325 = temp_output_279_0_g170325;
				half3 WorldNormal263_g170325 = temp_output_280_0_g170325;
				half4 localSampleStochastic3D263_g170325 = SampleStochastic3D( Texture263_g170325 , Sampler263_g170325 , Coords263_g170325 , WorldPosition263_g170325 , WorldNormal263_g170325 );
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float4 staticSwitch193_g170313 = localSampleExtra275_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float4 staticSwitch193_g170313 = localSamplePlanar2D238_g170325;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float4 staticSwitch193_g170313 = localSamplePlanar3D246_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch193_g170313 = localSampleStochastic2D234_g170325;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch193_g170313 = localSampleStochastic3D263_g170325;
				#else
				float4 staticSwitch193_g170313 = localSampleMain276_g170325;
				#endif
				half4 Local_NormaTex191_g170313 = staticSwitch193_g170313;
				half4 Normal_Packed45_g170315 = Local_NormaTex191_g170313;
				float2 appendResult58_g170315 = (float2(( (Normal_Packed45_g170315).x * (Normal_Packed45_g170315).w ) , (Normal_Packed45_g170315).y));
				half2 Normal_Default50_g170315 = appendResult58_g170315;
				half2 Normal_ASTC41_g170315 = (Normal_Packed45_g170315).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170315 = Normal_ASTC41_g170315;
				#else
				float2 staticSwitch38_g170315 = Normal_Default50_g170315;
				#endif
				half2 Normal_NO_DTX544_g170315 = (Normal_Packed45_g170315).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170315 = Normal_NO_DTX544_g170315;
				#else
				float2 staticSwitch37_g170315 = staticSwitch38_g170315;
				#endif
				float2 temp_output_26_0_g170313 = ( (staticSwitch37_g170315*2.0 + -1.0) * _MainNormalValue );
				float3 ase_worldBitangent = packedInput.ase_texcoord10.xyz;
				float3x3 ase_worldToTangent = float3x3(packedInput.tangentWS.xyz,ase_worldBitangent,packedInput.normalWS);
				half2 Normal_Planar45_g170316 = temp_output_26_0_g170313;
				float2 break71_g170316 = Normal_Planar45_g170316;
				float3 appendResult72_g170316 = (float3(break71_g170316.x , 0.0 , break71_g170316.y));
				float2 temp_output_205_0_g170313 = (mul( ase_worldToTangent, appendResult72_g170316 )).xy;
				#if defined( TVE_MAIN_SAMPLE_MAIN_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_EXTRA_UV )
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_PLANAR_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#elif defined( TVE_MAIN_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch204_g170313 = temp_output_205_0_g170313;
				#else
				float2 staticSwitch204_g170313 = temp_output_26_0_g170313;
				#endif
				half2 Local_NormalTS108_g170313 = staticSwitch204_g170313;
				float2 In_NormalTS3_g170323 = Local_NormalTS108_g170313;
				float3 appendResult68_g170317 = (float3(Local_NormalTS108_g170313 , 1.0));
				float3 tanToWorld0 = float3( packedInput.tangentWS.xyz.x, ase_worldBitangent.x, packedInput.normalWS.x );
				float3 tanToWorld1 = float3( packedInput.tangentWS.xyz.y, ase_worldBitangent.y, packedInput.normalWS.y );
				float3 tanToWorld2 = float3( packedInput.tangentWS.xyz.z, ase_worldBitangent.z, packedInput.normalWS.z );
				float3 tanNormal74_g170317 = appendResult68_g170317;
				float3 worldNormal74_g170317 = normalize( float3(dot(tanToWorld0,tanNormal74_g170317), dot(tanToWorld1,tanNormal74_g170317), dot(tanToWorld2,tanNormal74_g170317)) );
				half3 Local_NormalWS250_g170313 = worldNormal74_g170317;
				float3 In_NormalWS3_g170323 = Local_NormalWS250_g170313;
				float4 In_Shader3_g170323 = Local_Masks109_g170313;
				float4 In_Emissive3_g170323 = half4(1,1,1,1);
				float3 temp_output_3_0_g170318 = Local_Albedo139_g170313;
				float dotResult20_g170318 = dot( temp_output_3_0_g170318 , float3(0.2126,0.7152,0.0722) );
				half Local_Grayscale110_g170313 = dotResult20_g170318;
				float In_Grayscale3_g170323 = Local_Grayscale110_g170313;
				float clampResult144_g170313 = clamp( saturate( ( Local_Grayscale110_g170313 * 5.0 ) ) , 0.2 , 1.0 );
				half Local_Luminosity145_g170313 = clampResult144_g170313;
				float In_Luminosity3_g170323 = Local_Luminosity145_g170313;
				float In_MultiMask3_g170323 = Local_MultiMask78_g170313;
				float temp_output_187_0_g170313 = (Local_AlbedoTex185_g170313).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch236_g170313 = ( temp_output_187_0_g170313 - _MainAlphaClipValue );
				#else
				float staticSwitch236_g170313 = temp_output_187_0_g170313;
				#endif
				half Local_AlphaClip111_g170313 = staticSwitch236_g170313;
				float In_AlphaClip3_g170323 = Local_AlphaClip111_g170313;
				half Local_AlphaFade246_g170313 = (lerpResult62_g170313).a;
				float In_AlphaFade3_g170323 = Local_AlphaFade246_g170313;
				float3 temp_cast_5 = (1.0).xxx;
				float3 In_Translucency3_g170323 = temp_cast_5;
				float In_Transmission3_g170323 = 1.0;
				float In_Thickness3_g170323 = 0.0;
				float In_Diffusion3_g170323 = 0.0;
				Data3_g170323.Dummy = In_Dummy3_g170323;
				Data3_g170323.Albedo = In_Albedo3_g170323;
				Data3_g170323.NormalTS = In_NormalTS3_g170323;
				Data3_g170323.NormalWS = In_NormalWS3_g170323;
				Data3_g170323.Shader = In_Shader3_g170323;
				Data3_g170323.Emissive= In_Emissive3_g170323;
				Data3_g170323.MultiMask = In_MultiMask3_g170323;
				Data3_g170323.Grayscale = In_Grayscale3_g170323;
				Data3_g170323.Luminosity = In_Luminosity3_g170323;
				Data3_g170323.AlphaClip = In_AlphaClip3_g170323;
				Data3_g170323.AlphaFade = In_AlphaFade3_g170323;
				Data3_g170323.Translucency = In_Translucency3_g170323;
				Data3_g170323.Transmission = In_Transmission3_g170323;
				Data3_g170323.Thickness = In_Thickness3_g170323;
				Data3_g170323.Diffusion = In_Diffusion3_g170323;
				TVEVisualData Data4_g170345 = Data3_g170323;
				float Out_Dummy4_g170345 = 0;
				float3 Out_Albedo4_g170345 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170345 = float2( 0,0 );
				float3 Out_NormalWS4_g170345 = float3( 0,0,0 );
				float4 Out_Shader4_g170345 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170345 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170345 = 0;
				float Out_Grayscale4_g170345 = 0;
				float Out_Luminosity4_g170345 = 0;
				float Out_AlphaClip4_g170345 = 0;
				float Out_AlphaFade4_g170345 = 0;
				float3 Out_Translucency4_g170345 = float3( 0,0,0 );
				float Out_Transmission4_g170345 = 0;
				float Out_Thickness4_g170345 = 0;
				float Out_Diffusion4_g170345 = 0;
				Out_Dummy4_g170345 = Data4_g170345.Dummy;
				Out_Albedo4_g170345 = Data4_g170345.Albedo;
				Out_NormalTS4_g170345 = Data4_g170345.NormalTS;
				Out_NormalWS4_g170345 = Data4_g170345.NormalWS;
				Out_Shader4_g170345 = Data4_g170345.Shader;
				Out_Emissive4_g170345= Data4_g170345.Emissive;
				Out_MultiMask4_g170345 = Data4_g170345.MultiMask;
				Out_Grayscale4_g170345 = Data4_g170345.Grayscale;
				Out_Luminosity4_g170345= Data4_g170345.Luminosity;
				Out_AlphaClip4_g170345 = Data4_g170345.AlphaClip;
				Out_AlphaFade4_g170345 = Data4_g170345.AlphaFade;
				Out_Translucency4_g170345 = Data4_g170345.Translucency;
				Out_Transmission4_g170345 = Data4_g170345.Transmission;
				Out_Thickness4_g170345 = Data4_g170345.Thickness;
				Out_Diffusion4_g170345 = Data4_g170345.Diffusion;
				half3 Visual_Albedo527_g170331 = Out_Albedo4_g170345;
				TEXTURE2D(Texture276_g170332) = _SecondAlbedoTex;
				float localFilterTexture19_g170362 = ( 0.0 );
				SamplerState SamplerDefault19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170362 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170362 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170362 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170362 = SamplerDefault19_g170362;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170362 = SamplerDefault19_g170362;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170362 = SamplerPoint19_g170362;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170362 = SamplerLow19_g170362;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170362 = SamplerMedium19_g170362;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170362 = SamplerHigh19_g170362;
				#endif
				SamplerState Sampler276_g170332 = SS19_g170362;
				half4 Local_LayerCoords790_g170331 = _second_coord_value;
				float4 temp_output_37_0_g170332 = Local_LayerCoords790_g170331;
				half4 Coords276_g170332 = temp_output_37_0_g170332;
				half2 TexCoord276_g170332 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170332 = SampleMain( Texture276_g170332 , Sampler276_g170332 , Coords276_g170332 , TexCoord276_g170332 );
				TEXTURE2D(Texture275_g170332) = _SecondAlbedoTex;
				SamplerState Sampler275_g170332 = SS19_g170362;
				half4 Coords275_g170332 = temp_output_37_0_g170332;
				half2 TexCoord275_g170332 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170332 = SampleExtra( Texture275_g170332 , Sampler275_g170332 , Coords275_g170332 , TexCoord275_g170332 );
				TEXTURE2D(Texture238_g170332) = _SecondAlbedoTex;
				SamplerState Sampler238_g170332 = SS19_g170362;
				half4 Coords238_g170332 = temp_output_37_0_g170332;
				TVEModelData Data15_g170343 = Data16_g156906;
				float Out_Dummy15_g170343 = 0;
				float3 Out_PositionOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170343 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170343 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170343 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170343 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170343 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170343 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170343 = float3( 0,0,0 );
				float4 Out_VertexData15_g170343 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170343 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170343 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170343 = float4( 0,0,0,0 );
				Out_Dummy15_g170343 = Data15_g170343.Dummy;
				Out_PositionOS15_g170343 = Data15_g170343.PositionOS;
				Out_PositionWS15_g170343 = Data15_g170343.PositionWS;
				Out_PositionWO15_g170343 = Data15_g170343.PositionWO;
				Out_PositionRawOS15_g170343 = Data15_g170343.PositionRawOS;
				Out_PositionAddOS15_g170343 = Data15_g170343.PositionAddOS;
				Out_PivotOS15_g170343 = Data15_g170343.PivotOS;
				Out_PivotWS15_g170343 = Data15_g170343.PivotWS;
				Out_PivotWO15_g170343 = Data15_g170343.PivotWO;
				Out_NormalOS15_g170343 = Data15_g170343.NormalOS;
				Out_NormalWS15_g170343 = Data15_g170343.NormalWS;
				Out_NormalRawOS15_g170343 = Data15_g170343.NormalRawOS;
				Out_NormalRawWS15_g170343 = Data15_g170343.NormalRawWS;
				Out_TangentOS15_g170343 = Data15_g170343.TangentOS;
				Out_ViewDirWS15_g170343 = Data15_g170343.ViewDirWS;
				Out_VertexData15_g170343 = Data15_g170343.VertexData;
				Out_MotionData15_g170343 = Data15_g170343.MotionData;
				Out_BoundsData15_g170343 = Data15_g170343.BoundsData;
				Out_RotationData15_g170343 = Data15_g170343.RotationData;
				half3 Model_PositionWO636_g170331 = Out_PositionWO15_g170343;
				float3 temp_output_279_0_g170332 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170332 = temp_output_279_0_g170332;
				half4 localSamplePlanar2D238_g170332 = SamplePlanar2D( Texture238_g170332 , Sampler238_g170332 , Coords238_g170332 , WorldPosition238_g170332 );
				TEXTURE2D(Texture246_g170332) = _SecondAlbedoTex;
				SamplerState Sampler246_g170332 = SS19_g170362;
				half4 Coords246_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition246_g170332 = temp_output_279_0_g170332;
				half3 Model_NormalWS869_g170331 = Out_NormalWS15_g170343;
				float3 temp_output_280_0_g170332 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170332 = temp_output_280_0_g170332;
				half4 localSamplePlanar3D246_g170332 = SamplePlanar3D( Texture246_g170332 , Sampler246_g170332 , Coords246_g170332 , WorldPosition246_g170332 , WorldNormal246_g170332 );
				TEXTURE2D(Texture234_g170332) = _SecondAlbedoTex;
				SamplerState Sampler234_g170332 = SS19_g170362;
				float4 Coords234_g170332 = temp_output_37_0_g170332;
				float3 WorldPosition234_g170332 = temp_output_279_0_g170332;
				float4 localSampleStochastic2D234_g170332 = SampleStochastic2D( Texture234_g170332 , Sampler234_g170332 , Coords234_g170332 , WorldPosition234_g170332 );
				TEXTURE2D(Texture263_g170332) = _SecondAlbedoTex;
				SamplerState Sampler263_g170332 = SS19_g170362;
				half4 Coords263_g170332 = temp_output_37_0_g170332;
				half3 WorldPosition263_g170332 = temp_output_279_0_g170332;
				half3 WorldNormal263_g170332 = temp_output_280_0_g170332;
				half4 localSampleStochastic3D263_g170332 = SampleStochastic3D( Texture263_g170332 , Sampler263_g170332 , Coords263_g170332 , WorldPosition263_g170332 , WorldNormal263_g170332 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170331 = localSampleExtra275_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170331 = localSamplePlanar2D238_g170332;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170331 = localSamplePlanar3D246_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170331 = localSampleStochastic2D234_g170332;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170331 = localSampleStochastic3D263_g170332;
				#else
				float4 staticSwitch693_g170331 = localSampleMain276_g170332;
				#endif
				half4 Local_AlbedoTex777_g170331 = staticSwitch693_g170331;
				float3 lerpResult716_g170331 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170331).xyz , _SecondAlbedoValue);
				half3 Local_AlbedoRGB771_g170331 = lerpResult716_g170331;
				TEXTURE2D(Texture276_g170334) = _SecondShaderTex;
				float localFilterTexture30_g170364 = ( 0.0 );
				SamplerState SamplerDefault30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170364 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170364 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170364 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170364 = SamplerDefault30_g170364;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170364 = SamplerDefault30_g170364;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170364 = SamplerPoint30_g170364;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170364 = SamplerLow30_g170364;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170364 = SamplerMedium30_g170364;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170364 = SamplerHigh30_g170364;
				#endif
				SamplerState Sampler276_g170334 = SS30_g170364;
				float4 temp_output_37_0_g170334 = Local_LayerCoords790_g170331;
				half4 Coords276_g170334 = temp_output_37_0_g170334;
				half2 TexCoord276_g170334 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170334 = SampleMain( Texture276_g170334 , Sampler276_g170334 , Coords276_g170334 , TexCoord276_g170334 );
				TEXTURE2D(Texture275_g170334) = _SecondShaderTex;
				SamplerState Sampler275_g170334 = SS30_g170364;
				half4 Coords275_g170334 = temp_output_37_0_g170334;
				half2 TexCoord275_g170334 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170334 = SampleExtra( Texture275_g170334 , Sampler275_g170334 , Coords275_g170334 , TexCoord275_g170334 );
				TEXTURE2D(Texture238_g170334) = _SecondShaderTex;
				SamplerState Sampler238_g170334 = SS30_g170364;
				half4 Coords238_g170334 = temp_output_37_0_g170334;
				float3 temp_output_279_0_g170334 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170334 = temp_output_279_0_g170334;
				half4 localSamplePlanar2D238_g170334 = SamplePlanar2D( Texture238_g170334 , Sampler238_g170334 , Coords238_g170334 , WorldPosition238_g170334 );
				TEXTURE2D(Texture246_g170334) = _SecondShaderTex;
				SamplerState Sampler246_g170334 = SS30_g170364;
				half4 Coords246_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition246_g170334 = temp_output_279_0_g170334;
				float3 temp_output_280_0_g170334 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170334 = temp_output_280_0_g170334;
				half4 localSamplePlanar3D246_g170334 = SamplePlanar3D( Texture246_g170334 , Sampler246_g170334 , Coords246_g170334 , WorldPosition246_g170334 , WorldNormal246_g170334 );
				TEXTURE2D(Texture234_g170334) = _SecondShaderTex;
				SamplerState Sampler234_g170334 = SS30_g170364;
				float4 Coords234_g170334 = temp_output_37_0_g170334;
				float3 WorldPosition234_g170334 = temp_output_279_0_g170334;
				float4 localSampleStochastic2D234_g170334 = SampleStochastic2D( Texture234_g170334 , Sampler234_g170334 , Coords234_g170334 , WorldPosition234_g170334 );
				TEXTURE2D(Texture263_g170334) = _SecondShaderTex;
				SamplerState Sampler263_g170334 = SS30_g170364;
				half4 Coords263_g170334 = temp_output_37_0_g170334;
				half3 WorldPosition263_g170334 = temp_output_279_0_g170334;
				half3 WorldNormal263_g170334 = temp_output_280_0_g170334;
				half4 localSampleStochastic3D263_g170334 = SampleStochastic3D( Texture263_g170334 , Sampler263_g170334 , Coords263_g170334 , WorldPosition263_g170334 , WorldNormal263_g170334 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170331 = localSampleExtra275_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170331 = localSamplePlanar2D238_g170334;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170331 = localSamplePlanar3D246_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170331 = localSampleStochastic2D234_g170334;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170331 = localSampleStochastic3D263_g170334;
				#else
				float4 staticSwitch722_g170331 = localSampleMain276_g170334;
				#endif
				half4 Local_ShaderTex775_g170331 = staticSwitch722_g170331;
				float lerpResult739_g170331 = lerp( 1.0 , (Local_ShaderTex775_g170331).y , _SecondOcclusionValue);
				float4 appendResult749_g170331 = (float4(( (Local_ShaderTex775_g170331).x * _SecondMetallicValue ) , lerpResult739_g170331 , (Local_ShaderTex775_g170331).z , ( (Local_ShaderTex775_g170331).w * _SecondSmoothnessValue )));
				half4 Local_Masks750_g170331 = appendResult749_g170331;
				float clampResult17_g170338 = clamp( (Local_Masks750_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170339 = _SecondMultiRemap.x;
				float temp_output_10_0_g170339 = ( _SecondMultiRemap.y - temp_output_7_0_g170339 );
				float temp_output_765_0_g170331 = saturate( ( ( clampResult17_g170338 - temp_output_7_0_g170339 ) / ( temp_output_10_0_g170339 + 0.0001 ) ) );
				half Local_MultiMask767_g170331 = temp_output_765_0_g170331;
				float lerpResult705_g170331 = lerp( 1.0 , Local_MultiMask767_g170331 , _SecondColorMode);
				float4 lerpResult706_g170331 = lerp( _SecondColorTwo , _SecondColor , lerpResult705_g170331);
				half3 Local_ColorRGB774_g170331 = (lerpResult706_g170331).rgb;
				half3 Local_Albedo768_g170331 = ( Local_AlbedoRGB771_g170331 * Local_ColorRGB774_g170331 );
				float3 lerpResult985_g170331 = lerp( Local_Albedo768_g170331 , ( Visual_Albedo527_g170331 * Local_Albedo768_g170331 * 4.594794 ) , _SecondBlendAlbedoValue);
				TEXTURE2D(Texture276_g170335) = _SecondMaskTex;
				SamplerState Sampler276_g170335 = sampler_Linear_Repeat;
				half4 Local_BlendCoords813_g170331 = _second_mask_coord_value;
				float4 temp_output_37_0_g170335 = Local_BlendCoords813_g170331;
				half4 Coords276_g170335 = temp_output_37_0_g170335;
				half2 TexCoord276_g170335 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170335 = SampleMain( Texture276_g170335 , Sampler276_g170335 , Coords276_g170335 , TexCoord276_g170335 );
				TEXTURE2D(Texture275_g170335) = _SecondMaskTex;
				SamplerState Sampler275_g170335 = sampler_Linear_Repeat;
				half4 Coords275_g170335 = temp_output_37_0_g170335;
				half2 TexCoord275_g170335 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170335 = SampleExtra( Texture275_g170335 , Sampler275_g170335 , Coords275_g170335 , TexCoord275_g170335 );
				TEXTURE2D(Texture238_g170335) = _SecondMaskTex;
				SamplerState Sampler238_g170335 = sampler_Linear_Repeat;
				half4 Coords238_g170335 = temp_output_37_0_g170335;
				float3 temp_output_279_0_g170335 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170335 = temp_output_279_0_g170335;
				half4 localSamplePlanar2D238_g170335 = SamplePlanar2D( Texture238_g170335 , Sampler238_g170335 , Coords238_g170335 , WorldPosition238_g170335 );
				TEXTURE2D(Texture246_g170335) = _SecondMaskTex;
				SamplerState Sampler246_g170335 = sampler_Linear_Repeat;
				half4 Coords246_g170335 = temp_output_37_0_g170335;
				half3 WorldPosition246_g170335 = temp_output_279_0_g170335;
				float3 temp_output_280_0_g170335 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170335 = temp_output_280_0_g170335;
				half4 localSamplePlanar3D246_g170335 = SamplePlanar3D( Texture246_g170335 , Sampler246_g170335 , Coords246_g170335 , WorldPosition246_g170335 , WorldNormal246_g170335 );
				#if defined( TVE_SECOND_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170331 = localSampleExtra275_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170331 = localSamplePlanar2D238_g170335;
				#elif defined( TVE_SECOND_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170331 = localSamplePlanar3D246_g170335;
				#else
				float4 staticSwitch817_g170331 = localSampleMain276_g170335;
				#endif
				half4 Local_MaskTex861_g170331 = staticSwitch817_g170331;
				float clampResult17_g170349 = clamp( (Local_MaskTex861_g170331).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170348 = _SecondMaskRemap.x;
				float temp_output_10_0_g170348 = ( _SecondMaskRemap.y - temp_output_7_0_g170348 );
				float lerpResult1015_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170349 - temp_output_7_0_g170348 ) / ( temp_output_10_0_g170348 + 0.0001 ) ) ) , _SecondMaskValue);
				half Blend_TexMask429_g170331 = lerpResult1015_g170331;
				half3 Visual_NormalWS951_g170331 = Out_NormalWS4_g170345;
				float clampResult17_g170350 = clamp( saturate( (Visual_NormalWS951_g170331).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170351 = _SecondProjRemap.x;
				float temp_output_10_0_g170351 = ( _SecondProjRemap.y - temp_output_7_0_g170351 );
				float lerpResult996_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170350 - temp_output_7_0_g170351 ) / ( temp_output_10_0_g170351 + 0.0001 ) ) ) , _SecondProjValue);
				half Blend_ProjMask434_g170331 = lerpResult996_g170331;
				half4 Model_VertexMasks964_g170331 = Out_VertexData15_g170343;
				float4 break965_g170331 = Model_VertexMasks964_g170331;
				float4 break33_g170352 = _second_vert_mode;
				float temp_output_30_0_g170352 = ( break965_g170331.x * break33_g170352.x );
				float temp_output_29_0_g170352 = ( break965_g170331.y * break33_g170352.y );
				float temp_output_31_0_g170352 = ( break965_g170331.z * break33_g170352.z );
				float temp_output_28_0_g170352 = ( temp_output_30_0_g170352 + temp_output_29_0_g170352 + temp_output_31_0_g170352 + ( break965_g170331.w * break33_g170352.w ) );
				float clampResult17_g170346 = clamp( temp_output_28_0_g170352 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170347 = _SecondMeshRemap.x;
				float temp_output_10_0_g170347 = ( _SecondMeshRemap.y - temp_output_7_0_g170347 );
				float lerpResult1017_g170331 = lerp( 1.0 , saturate( ( ( clampResult17_g170346 - temp_output_7_0_g170347 ) / ( temp_output_10_0_g170347 + 0.0001 ) ) ) , _SecondMeshValue);
				float temp_output_6_0_g170360 = lerpResult1017_g170331;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170360 = ( temp_output_6_0_g170360 + ( _SecondMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170360 = temp_output_6_0_g170360;
				#endif
				float temp_output_987_0_g170331 = staticSwitch14_g170360;
				half Blend_VertMask918_g170331 = temp_output_987_0_g170331;
				float localBuildGlobalData204_g157340 = ( 0.0 );
				TVEGlobalData Data204_g157340 = (TVEGlobalData)0;
				half Dummy211_g157340 = ( _GlobalLiteInfo + ( _GlobalCategory + _GlobalEnd ) );
				float In_Dummy204_g157340 = Dummy211_g157340;
				float4 temp_output_362_164_g157340 = TVE_CoatParams;
				half4 Coat_Params302_g157340 = temp_output_362_164_g157340;
				float4 In_CoatParams204_g157340 = Coat_Params302_g157340;
				float4 temp_output_361_164_g157340 = TVE_PaintParams;
				half4 Paint_Params71_g157340 = temp_output_361_164_g157340;
				float4 In_PaintParams204_g157340 = Paint_Params71_g157340;
				float4 temp_output_365_163_g157340 = TVE_GlowParams;
				half4 Glow_Params248_g157340 = temp_output_365_163_g157340;
				float4 In_GlowParams204_g157340 = Glow_Params248_g157340;
				float4 temp_output_363_141_g157340 = TVE_AtmoParams;
				half4 Atmo_Params80_g157340 = temp_output_363_141_g157340;
				float4 In_AtmoParams204_g157340 = Atmo_Params80_g157340;
				float4 temp_output_364_139_g157340 = TVE_FormParams;
				half4 Form_Params112_g157340 = temp_output_364_139_g157340;
				float4 In_FormParams204_g157340 = Form_Params112_g157340;
				float4 temp_output_366_145_g157340 = TVE_WindParams;
				half4 Wind_Params88_g157340 = temp_output_366_145_g157340;
				float4 In_WindParams204_g157340 = Wind_Params88_g157340;
				float4 temp_output_367_145_g157340 = TVE_PushParams;
				half4 Push_Params335_g157340 = temp_output_367_145_g157340;
				float4 In_PushParams204_g157340 = Push_Params335_g157340;
				Data204_g157340.Dummy = In_Dummy204_g157340;
				Data204_g157340.CoatParams = In_CoatParams204_g157340;
				Data204_g157340.PaintParams = In_PaintParams204_g157340;
				Data204_g157340.GlowParams = In_GlowParams204_g157340;
				Data204_g157340.AtmoParams = In_AtmoParams204_g157340;
				Data204_g157340.FormParams= In_FormParams204_g157340;
				Data204_g157340.WindParams = In_WindParams204_g157340;
				Data204_g157340.PushParams = In_PushParams204_g157340;
				TVEGlobalData Data15_g170344 = Data204_g157340;
				float Out_Dummy15_g170344 = 0;
				float4 Out_CoatParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170344 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170344 = float4( 0,0,0,0 );
				Out_Dummy15_g170344 = Data15_g170344.Dummy;
				Out_CoatParams15_g170344 = Data15_g170344.CoatParams;
				Out_PaintParams15_g170344 = Data15_g170344.PaintParams;
				Out_GlowParams15_g170344 = Data15_g170344.GlowParams;
				Out_AtmoParams15_g170344= Data15_g170344.AtmoParams;
				Out_FadeParams15_g170344= Data15_g170344.FadeParams;
				Out_FormParams15_g170344 = Data15_g170344.FormParams;
				Out_LandParams15_g170344 = Data15_g170344.LandParams;
				Out_WindParams15_g170344 = Data15_g170344.WindParams;
				Out_PushParams15_g170344 = Data15_g170344.PushParams;
				half4 Global_CoatParams975_g170331 = Out_CoatParams15_g170344;
				float lerpResult1013_g170331 = lerp( 1.0 , (Global_CoatParams975_g170331).z , TVE_IsEnabled);
				#ifdef TVE_SECOND_ELEMENT
				float staticSwitch971_g170331 = lerpResult1013_g170331;
				#else
				float staticSwitch971_g170331 = 1.0;
				#endif
				half Blend_GlobalMask972_g170331 = staticSwitch971_g170331;
				float temp_output_432_0_g170331 = ( _SecondIntensityValue * Blend_TexMask429_g170331 * Blend_ProjMask434_g170331 * Blend_VertMask918_g170331 * Blend_GlobalMask972_g170331 );
				float clampResult17_g170354 = clamp( temp_output_432_0_g170331 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170353 = _SecondBlendRemap.x;
				float temp_output_10_0_g170353 = ( _SecondBlendRemap.y - temp_output_7_0_g170353 );
				half Blend_Mask412_g170331 = ( saturate( ( ( clampResult17_g170354 - temp_output_7_0_g170353 ) / ( temp_output_10_0_g170353 + 0.0001 ) ) ) * _SecondBlendIntensityValue );
				float3 lerpResult403_g170331 = lerp( Visual_Albedo527_g170331 , lerpResult985_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float3 staticSwitch415_g170331 = lerpResult403_g170331;
				#else
				float3 staticSwitch415_g170331 = Visual_Albedo527_g170331;
				#endif
				half3 Final_Albedo601_g170331 = staticSwitch415_g170331;
				float3 In_Albedo3_g170342 = Final_Albedo601_g170331;
				half2 Visual_NormalTS529_g170331 = Out_NormalTS4_g170345;
				float2 lerpResult40_g170356 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170331 , _SecondBlendNormalValue);
				TEXTURE2D(Texture276_g170333) = _SecondNormalTex;
				float localFilterTexture29_g170363 = ( 0.0 );
				SamplerState SamplerDefault29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170363 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170363 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170363 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170363 = SamplerDefault29_g170363;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170363 = SamplerDefault29_g170363;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170363 = SamplerPoint29_g170363;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170363 = SamplerLow29_g170363;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170363 = SamplerMedium29_g170363;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170363 = SamplerHigh29_g170363;
				#endif
				SamplerState Sampler276_g170333 = SS29_g170363;
				float4 temp_output_37_0_g170333 = Local_LayerCoords790_g170331;
				half4 Coords276_g170333 = temp_output_37_0_g170333;
				half2 TexCoord276_g170333 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170333 = SampleMain( Texture276_g170333 , Sampler276_g170333 , Coords276_g170333 , TexCoord276_g170333 );
				TEXTURE2D(Texture275_g170333) = _SecondNormalTex;
				SamplerState Sampler275_g170333 = SS29_g170363;
				half4 Coords275_g170333 = temp_output_37_0_g170333;
				half2 TexCoord275_g170333 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170333 = SampleExtra( Texture275_g170333 , Sampler275_g170333 , Coords275_g170333 , TexCoord275_g170333 );
				TEXTURE2D(Texture238_g170333) = _SecondNormalTex;
				SamplerState Sampler238_g170333 = SS29_g170363;
				half4 Coords238_g170333 = temp_output_37_0_g170333;
				float3 temp_output_279_0_g170333 = Model_PositionWO636_g170331;
				half3 WorldPosition238_g170333 = temp_output_279_0_g170333;
				half4 localSamplePlanar2D238_g170333 = SamplePlanar2D( Texture238_g170333 , Sampler238_g170333 , Coords238_g170333 , WorldPosition238_g170333 );
				TEXTURE2D(Texture246_g170333) = _SecondNormalTex;
				SamplerState Sampler246_g170333 = SS29_g170363;
				half4 Coords246_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition246_g170333 = temp_output_279_0_g170333;
				float3 temp_output_280_0_g170333 = Model_NormalWS869_g170331;
				half3 WorldNormal246_g170333 = temp_output_280_0_g170333;
				half4 localSamplePlanar3D246_g170333 = SamplePlanar3D( Texture246_g170333 , Sampler246_g170333 , Coords246_g170333 , WorldPosition246_g170333 , WorldNormal246_g170333 );
				TEXTURE2D(Texture234_g170333) = _SecondNormalTex;
				SamplerState Sampler234_g170333 = SS29_g170363;
				float4 Coords234_g170333 = temp_output_37_0_g170333;
				float3 WorldPosition234_g170333 = temp_output_279_0_g170333;
				float4 localSampleStochastic2D234_g170333 = SampleStochastic2D( Texture234_g170333 , Sampler234_g170333 , Coords234_g170333 , WorldPosition234_g170333 );
				TEXTURE2D(Texture263_g170333) = _SecondNormalTex;
				SamplerState Sampler263_g170333 = SS29_g170363;
				half4 Coords263_g170333 = temp_output_37_0_g170333;
				half3 WorldPosition263_g170333 = temp_output_279_0_g170333;
				half3 WorldNormal263_g170333 = temp_output_280_0_g170333;
				half4 localSampleStochastic3D263_g170333 = SampleStochastic3D( Texture263_g170333 , Sampler263_g170333 , Coords263_g170333 , WorldPosition263_g170333 , WorldNormal263_g170333 );
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170331 = localSampleExtra275_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170331 = localSamplePlanar2D238_g170333;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170331 = localSamplePlanar3D246_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170331 = localSampleStochastic2D234_g170333;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170331 = localSampleStochastic3D263_g170333;
				#else
				float4 staticSwitch698_g170331 = localSampleMain276_g170333;
				#endif
				half4 Local_NormalTex776_g170331 = staticSwitch698_g170331;
				half4 Normal_Packed45_g170336 = Local_NormalTex776_g170331;
				float2 appendResult58_g170336 = (float2(( (Normal_Packed45_g170336).x * (Normal_Packed45_g170336).w ) , (Normal_Packed45_g170336).y));
				half2 Normal_Default50_g170336 = appendResult58_g170336;
				half2 Normal_ASTC41_g170336 = (Normal_Packed45_g170336).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170336 = Normal_ASTC41_g170336;
				#else
				float2 staticSwitch38_g170336 = Normal_Default50_g170336;
				#endif
				half2 Normal_NO_DTX544_g170336 = (Normal_Packed45_g170336).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170336 = Normal_NO_DTX544_g170336;
				#else
				float2 staticSwitch37_g170336 = staticSwitch38_g170336;
				#endif
				float2 temp_output_724_0_g170331 = ( (staticSwitch37_g170336*2.0 + -1.0) * _SecondNormalValue );
				half2 Normal_Planar45_g170337 = temp_output_724_0_g170331;
				float2 break71_g170337 = Normal_Planar45_g170337;
				float3 appendResult72_g170337 = (float3(break71_g170337.x , 0.0 , break71_g170337.y));
				float2 temp_output_858_0_g170331 = (mul( ase_worldToTangent, appendResult72_g170337 )).xy;
				#if defined( TVE_SECOND_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#elif defined( TVE_SECOND_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170331 = temp_output_858_0_g170331;
				#else
				float2 staticSwitch727_g170331 = temp_output_724_0_g170331;
				#endif
				half2 Local_NormalTS729_g170331 = staticSwitch727_g170331;
				float2 temp_output_36_0_g170356 = ( lerpResult40_g170356 + Local_NormalTS729_g170331 );
				float2 lerpResult405_g170331 = lerp( Visual_NormalTS529_g170331 , temp_output_36_0_g170356 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float2 staticSwitch418_g170331 = lerpResult405_g170331;
				#else
				float2 staticSwitch418_g170331 = Visual_NormalTS529_g170331;
				#endif
				half2 Final_NormalTS612_g170331 = staticSwitch418_g170331;
				float2 In_NormalTS3_g170342 = Final_NormalTS612_g170331;
				float3 appendResult68_g170357 = (float3(Final_NormalTS612_g170331 , 1.0));
				float3 tanNormal74_g170357 = appendResult68_g170357;
				float3 worldNormal74_g170357 = normalize( float3(dot(tanToWorld0,tanNormal74_g170357), dot(tanToWorld1,tanNormal74_g170357), dot(tanToWorld2,tanNormal74_g170357)) );
				half3 Final_NormalWS950_g170331 = worldNormal74_g170357;
				float3 In_NormalWS3_g170342 = Final_NormalWS950_g170331;
				half4 Visual_Shader531_g170331 = Out_Shader4_g170345;
				float4 lerpResult994_g170331 = lerp( Local_Masks750_g170331 , ( Visual_Shader531_g170331 * Local_Masks750_g170331 ) , _SecondBlendShaderValue);
				float4 lerpResult440_g170331 = lerp( Visual_Shader531_g170331 , lerpResult994_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float4 staticSwitch451_g170331 = lerpResult440_g170331;
				#else
				float4 staticSwitch451_g170331 = Visual_Shader531_g170331;
				#endif
				half4 Final_Masks613_g170331 = staticSwitch451_g170331;
				float4 In_Shader3_g170342 = Final_Masks613_g170331;
				float4 In_Emissive3_g170342 = Out_Emissive4_g170345;
				float3 temp_output_3_0_g170359 = Final_Albedo601_g170331;
				float dotResult20_g170359 = dot( temp_output_3_0_g170359 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170331 = dotResult20_g170359;
				float In_Grayscale3_g170342 = Final_Grayscale615_g170331;
				float clampResult651_g170331 = clamp( saturate( ( Final_Grayscale615_g170331 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170331 = clampResult651_g170331;
				float In_Luminosity3_g170342 = Final_Luminosity652_g170331;
				half Visual_MultiMask547_g170331 = Out_MultiMask4_g170345;
				float lerpResult477_g170331 = lerp( Visual_MultiMask547_g170331 , Local_MultiMask767_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch482_g170331 = lerpResult477_g170331;
				#else
				float staticSwitch482_g170331 = Visual_MultiMask547_g170331;
				#endif
				half Final_MultiMask572_g170331 = staticSwitch482_g170331;
				float In_MultiMask3_g170342 = Final_MultiMask572_g170331;
				half Visual_AlphaClip559_g170331 = Out_AlphaClip4_g170345;
				float temp_output_718_0_g170331 = (Local_AlbedoTex777_g170331).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch932_g170331 = ( temp_output_718_0_g170331 - _SecondAlphaClipValue );
				#else
				float staticSwitch932_g170331 = temp_output_718_0_g170331;
				#endif
				half Local_AlphaClip772_g170331 = staticSwitch932_g170331;
				float lerpResult448_g170331 = lerp( Visual_AlphaClip559_g170331 , Local_AlphaClip772_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch564_g170331 = lerpResult448_g170331;
				#else
				float staticSwitch564_g170331 = Visual_AlphaClip559_g170331;
				#endif
				half Final_AlphaClip602_g170331 = staticSwitch564_g170331;
				float In_AlphaClip3_g170342 = Final_AlphaClip602_g170331;
				half Visual_AlphaFade588_g170331 = Out_AlphaFade4_g170345;
				half Local_AlphaFade773_g170331 = (lerpResult706_g170331).a;
				float lerpResult604_g170331 = lerp( Visual_AlphaFade588_g170331 , Local_AlphaFade773_g170331 , Blend_Mask412_g170331);
				#ifdef TVE_SECOND
				float staticSwitch608_g170331 = lerpResult604_g170331;
				#else
				float staticSwitch608_g170331 = Visual_AlphaFade588_g170331;
				#endif
				half Final_AlphaFade611_g170331 = staticSwitch608_g170331;
				float In_AlphaFade3_g170342 = Final_AlphaFade611_g170331;
				float3 In_Translucency3_g170342 = Out_Translucency4_g170345;
				float In_Transmission3_g170342 = Out_Transmission4_g170345;
				float In_Thickness3_g170342 = Out_Thickness4_g170345;
				float In_Diffusion3_g170342 = Out_Diffusion4_g170345;
				Data3_g170342.Dummy = In_Dummy3_g170342;
				Data3_g170342.Albedo = In_Albedo3_g170342;
				Data3_g170342.NormalTS = In_NormalTS3_g170342;
				Data3_g170342.NormalWS = In_NormalWS3_g170342;
				Data3_g170342.Shader = In_Shader3_g170342;
				Data3_g170342.Emissive= In_Emissive3_g170342;
				Data3_g170342.MultiMask = In_MultiMask3_g170342;
				Data3_g170342.Grayscale = In_Grayscale3_g170342;
				Data3_g170342.Luminosity = In_Luminosity3_g170342;
				Data3_g170342.AlphaClip = In_AlphaClip3_g170342;
				Data3_g170342.AlphaFade = In_AlphaFade3_g170342;
				Data3_g170342.Translucency = In_Translucency3_g170342;
				Data3_g170342.Transmission = In_Transmission3_g170342;
				Data3_g170342.Thickness = In_Thickness3_g170342;
				Data3_g170342.Diffusion = In_Diffusion3_g170342;
				TVEVisualData Data4_g170381 = Data3_g170342;
				float Out_Dummy4_g170381 = 0;
				float3 Out_Albedo4_g170381 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170381 = float2( 0,0 );
				float3 Out_NormalWS4_g170381 = float3( 0,0,0 );
				float4 Out_Shader4_g170381 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170381 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170381 = 0;
				float Out_Grayscale4_g170381 = 0;
				float Out_Luminosity4_g170381 = 0;
				float Out_AlphaClip4_g170381 = 0;
				float Out_AlphaFade4_g170381 = 0;
				float3 Out_Translucency4_g170381 = float3( 0,0,0 );
				float Out_Transmission4_g170381 = 0;
				float Out_Thickness4_g170381 = 0;
				float Out_Diffusion4_g170381 = 0;
				Out_Dummy4_g170381 = Data4_g170381.Dummy;
				Out_Albedo4_g170381 = Data4_g170381.Albedo;
				Out_NormalTS4_g170381 = Data4_g170381.NormalTS;
				Out_NormalWS4_g170381 = Data4_g170381.NormalWS;
				Out_Shader4_g170381 = Data4_g170381.Shader;
				Out_Emissive4_g170381= Data4_g170381.Emissive;
				Out_MultiMask4_g170381 = Data4_g170381.MultiMask;
				Out_Grayscale4_g170381 = Data4_g170381.Grayscale;
				Out_Luminosity4_g170381= Data4_g170381.Luminosity;
				Out_AlphaClip4_g170381 = Data4_g170381.AlphaClip;
				Out_AlphaFade4_g170381 = Data4_g170381.AlphaFade;
				Out_Translucency4_g170381 = Data4_g170381.Translucency;
				Out_Transmission4_g170381 = Data4_g170381.Transmission;
				Out_Thickness4_g170381 = Data4_g170381.Thickness;
				Out_Diffusion4_g170381 = Data4_g170381.Diffusion;
				half3 Visual_Albedo527_g170365 = Out_Albedo4_g170381;
				TEXTURE2D(Texture276_g170366) = _ThirdAlbedoTex;
				float localFilterTexture19_g170395 = ( 0.0 );
				SamplerState SamplerDefault19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170395 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170395 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170395 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170395 = SamplerDefault19_g170395;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170395 = SamplerDefault19_g170395;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170395 = SamplerPoint19_g170395;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170395 = SamplerLow19_g170395;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170395 = SamplerMedium19_g170395;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170395 = SamplerHigh19_g170395;
				#endif
				SamplerState Sampler276_g170366 = SS19_g170395;
				half4 Local_LayerCoords790_g170365 = _third_coord_value;
				float4 temp_output_37_0_g170366 = Local_LayerCoords790_g170365;
				half4 Coords276_g170366 = temp_output_37_0_g170366;
				half2 TexCoord276_g170366 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170366 = SampleMain( Texture276_g170366 , Sampler276_g170366 , Coords276_g170366 , TexCoord276_g170366 );
				TEXTURE2D(Texture275_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler275_g170366 = SS19_g170395;
				half4 Coords275_g170366 = temp_output_37_0_g170366;
				half2 TexCoord275_g170366 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170366 = SampleExtra( Texture275_g170366 , Sampler275_g170366 , Coords275_g170366 , TexCoord275_g170366 );
				TEXTURE2D(Texture238_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler238_g170366 = SS19_g170395;
				half4 Coords238_g170366 = temp_output_37_0_g170366;
				TVEModelData Data15_g170393 = Data16_g156906;
				float Out_Dummy15_g170393 = 0;
				float3 Out_PositionOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170393 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170393 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170393 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170393 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170393 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170393 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170393 = float3( 0,0,0 );
				float4 Out_VertexData15_g170393 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170393 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170393 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170393 = float4( 0,0,0,0 );
				Out_Dummy15_g170393 = Data15_g170393.Dummy;
				Out_PositionOS15_g170393 = Data15_g170393.PositionOS;
				Out_PositionWS15_g170393 = Data15_g170393.PositionWS;
				Out_PositionWO15_g170393 = Data15_g170393.PositionWO;
				Out_PositionRawOS15_g170393 = Data15_g170393.PositionRawOS;
				Out_PositionAddOS15_g170393 = Data15_g170393.PositionAddOS;
				Out_PivotOS15_g170393 = Data15_g170393.PivotOS;
				Out_PivotWS15_g170393 = Data15_g170393.PivotWS;
				Out_PivotWO15_g170393 = Data15_g170393.PivotWO;
				Out_NormalOS15_g170393 = Data15_g170393.NormalOS;
				Out_NormalWS15_g170393 = Data15_g170393.NormalWS;
				Out_NormalRawOS15_g170393 = Data15_g170393.NormalRawOS;
				Out_NormalRawWS15_g170393 = Data15_g170393.NormalRawWS;
				Out_TangentOS15_g170393 = Data15_g170393.TangentOS;
				Out_ViewDirWS15_g170393 = Data15_g170393.ViewDirWS;
				Out_VertexData15_g170393 = Data15_g170393.VertexData;
				Out_MotionData15_g170393 = Data15_g170393.MotionData;
				Out_BoundsData15_g170393 = Data15_g170393.BoundsData;
				Out_RotationData15_g170393 = Data15_g170393.RotationData;
				half3 Model_PositionWO636_g170365 = Out_PositionWO15_g170393;
				float3 temp_output_279_0_g170366 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170366 = temp_output_279_0_g170366;
				half4 localSamplePlanar2D238_g170366 = SamplePlanar2D( Texture238_g170366 , Sampler238_g170366 , Coords238_g170366 , WorldPosition238_g170366 );
				TEXTURE2D(Texture246_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler246_g170366 = SS19_g170395;
				half4 Coords246_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition246_g170366 = temp_output_279_0_g170366;
				half3 Model_NormalWS869_g170365 = Out_NormalWS15_g170393;
				float3 temp_output_280_0_g170366 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170366 = temp_output_280_0_g170366;
				half4 localSamplePlanar3D246_g170366 = SamplePlanar3D( Texture246_g170366 , Sampler246_g170366 , Coords246_g170366 , WorldPosition246_g170366 , WorldNormal246_g170366 );
				TEXTURE2D(Texture234_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler234_g170366 = SS19_g170395;
				float4 Coords234_g170366 = temp_output_37_0_g170366;
				float3 WorldPosition234_g170366 = temp_output_279_0_g170366;
				float4 localSampleStochastic2D234_g170366 = SampleStochastic2D( Texture234_g170366 , Sampler234_g170366 , Coords234_g170366 , WorldPosition234_g170366 );
				TEXTURE2D(Texture263_g170366) = _ThirdAlbedoTex;
				SamplerState Sampler263_g170366 = SS19_g170395;
				half4 Coords263_g170366 = temp_output_37_0_g170366;
				half3 WorldPosition263_g170366 = temp_output_279_0_g170366;
				half3 WorldNormal263_g170366 = temp_output_280_0_g170366;
				half4 localSampleStochastic3D263_g170366 = SampleStochastic3D( Texture263_g170366 , Sampler263_g170366 , Coords263_g170366 , WorldPosition263_g170366 , WorldNormal263_g170366 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch693_g170365 = localSampleExtra275_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch693_g170365 = localSamplePlanar2D238_g170366;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch693_g170365 = localSamplePlanar3D246_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch693_g170365 = localSampleStochastic2D234_g170366;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch693_g170365 = localSampleStochastic3D263_g170366;
				#else
				float4 staticSwitch693_g170365 = localSampleMain276_g170366;
				#endif
				half4 Local_AlbedoTex777_g170365 = staticSwitch693_g170365;
				float3 lerpResult716_g170365 = lerp( float3( 1,1,1 ) , (Local_AlbedoTex777_g170365).xyz , _ThirdAlbedoValue);
				half3 Local_AlbedoRGB771_g170365 = lerpResult716_g170365;
				TEXTURE2D(Texture276_g170368) = _ThirdShaderTex;
				float localFilterTexture30_g170397 = ( 0.0 );
				SamplerState SamplerDefault30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerPoint30_g170397 = sampler_Point_Repeat;
				SamplerState SamplerLow30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerMedium30_g170397 = sampler_Linear_Repeat;
				SamplerState SamplerHigh30_g170397 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS30_g170397 = SamplerDefault30_g170397;
				#if defined (TVE_FILTER_DEFAULT)
				    SS30_g170397 = SamplerDefault30_g170397;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS30_g170397 = SamplerPoint30_g170397;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS30_g170397 = SamplerLow30_g170397;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS30_g170397 = SamplerMedium30_g170397;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS30_g170397 = SamplerHigh30_g170397;
				#endif
				SamplerState Sampler276_g170368 = SS30_g170397;
				float4 temp_output_37_0_g170368 = Local_LayerCoords790_g170365;
				half4 Coords276_g170368 = temp_output_37_0_g170368;
				half2 TexCoord276_g170368 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170368 = SampleMain( Texture276_g170368 , Sampler276_g170368 , Coords276_g170368 , TexCoord276_g170368 );
				TEXTURE2D(Texture275_g170368) = _ThirdShaderTex;
				SamplerState Sampler275_g170368 = SS30_g170397;
				half4 Coords275_g170368 = temp_output_37_0_g170368;
				half2 TexCoord275_g170368 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170368 = SampleExtra( Texture275_g170368 , Sampler275_g170368 , Coords275_g170368 , TexCoord275_g170368 );
				TEXTURE2D(Texture238_g170368) = _ThirdShaderTex;
				SamplerState Sampler238_g170368 = SS30_g170397;
				half4 Coords238_g170368 = temp_output_37_0_g170368;
				float3 temp_output_279_0_g170368 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170368 = temp_output_279_0_g170368;
				half4 localSamplePlanar2D238_g170368 = SamplePlanar2D( Texture238_g170368 , Sampler238_g170368 , Coords238_g170368 , WorldPosition238_g170368 );
				TEXTURE2D(Texture246_g170368) = _ThirdShaderTex;
				SamplerState Sampler246_g170368 = SS30_g170397;
				half4 Coords246_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition246_g170368 = temp_output_279_0_g170368;
				float3 temp_output_280_0_g170368 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170368 = temp_output_280_0_g170368;
				half4 localSamplePlanar3D246_g170368 = SamplePlanar3D( Texture246_g170368 , Sampler246_g170368 , Coords246_g170368 , WorldPosition246_g170368 , WorldNormal246_g170368 );
				TEXTURE2D(Texture234_g170368) = _ThirdShaderTex;
				SamplerState Sampler234_g170368 = SS30_g170397;
				float4 Coords234_g170368 = temp_output_37_0_g170368;
				float3 WorldPosition234_g170368 = temp_output_279_0_g170368;
				float4 localSampleStochastic2D234_g170368 = SampleStochastic2D( Texture234_g170368 , Sampler234_g170368 , Coords234_g170368 , WorldPosition234_g170368 );
				TEXTURE2D(Texture263_g170368) = _ThirdShaderTex;
				SamplerState Sampler263_g170368 = SS30_g170397;
				half4 Coords263_g170368 = temp_output_37_0_g170368;
				half3 WorldPosition263_g170368 = temp_output_279_0_g170368;
				half3 WorldNormal263_g170368 = temp_output_280_0_g170368;
				half4 localSampleStochastic3D263_g170368 = SampleStochastic3D( Texture263_g170368 , Sampler263_g170368 , Coords263_g170368 , WorldPosition263_g170368 , WorldNormal263_g170368 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch722_g170365 = localSampleExtra275_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch722_g170365 = localSamplePlanar2D238_g170368;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch722_g170365 = localSamplePlanar3D246_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch722_g170365 = localSampleStochastic2D234_g170368;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch722_g170365 = localSampleStochastic3D263_g170368;
				#else
				float4 staticSwitch722_g170365 = localSampleMain276_g170368;
				#endif
				half4 Local_ShaderTex775_g170365 = staticSwitch722_g170365;
				float lerpResult739_g170365 = lerp( 1.0 , (Local_ShaderTex775_g170365).y , _ThirdOcclusionValue);
				float4 appendResult749_g170365 = (float4(( (Local_ShaderTex775_g170365).x * _ThirdMetallicValue ) , lerpResult739_g170365 , (Local_ShaderTex775_g170365).z , ( (Local_ShaderTex775_g170365).w * _ThirdSmoothnessValue )));
				half4 Local_Masks750_g170365 = appendResult749_g170365;
				float clampResult17_g170371 = clamp( (Local_Masks750_g170365).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170372 = _ThirdMultiRemap.x;
				float temp_output_10_0_g170372 = ( _ThirdMultiRemap.y - temp_output_7_0_g170372 );
				float temp_output_765_0_g170365 = saturate( ( ( clampResult17_g170371 - temp_output_7_0_g170372 ) / ( temp_output_10_0_g170372 + 0.0001 ) ) );
				half Local_MultiMask767_g170365 = temp_output_765_0_g170365;
				float lerpResult705_g170365 = lerp( 1.0 , Local_MultiMask767_g170365 , _ThirdColorMode);
				float4 lerpResult706_g170365 = lerp( _ThirdColorTwo , _ThirdColor , lerpResult705_g170365);
				half3 Local_ColorRGB774_g170365 = (lerpResult706_g170365).rgb;
				half3 Local_Albedo768_g170365 = ( Local_AlbedoRGB771_g170365 * Local_ColorRGB774_g170365 );
				float3 lerpResult985_g170365 = lerp( Local_Albedo768_g170365 , ( Visual_Albedo527_g170365 * Local_Albedo768_g170365 * 4.594794 ) , _ThirdBlendAlbedoValue);
				TEXTURE2D(Texture276_g170392) = _ThirdMaskTex;
				SamplerState Sampler276_g170392 = sampler_Linear_Repeat;
				half4 Local_MaskCoords813_g170365 = _third_mask_coord_value;
				float4 temp_output_37_0_g170392 = Local_MaskCoords813_g170365;
				half4 Coords276_g170392 = temp_output_37_0_g170392;
				half2 TexCoord276_g170392 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170392 = SampleMain( Texture276_g170392 , Sampler276_g170392 , Coords276_g170392 , TexCoord276_g170392 );
				TEXTURE2D(Texture275_g170392) = _ThirdMaskTex;
				SamplerState Sampler275_g170392 = sampler_Linear_Repeat;
				half4 Coords275_g170392 = temp_output_37_0_g170392;
				half2 TexCoord275_g170392 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170392 = SampleExtra( Texture275_g170392 , Sampler275_g170392 , Coords275_g170392 , TexCoord275_g170392 );
				TEXTURE2D(Texture238_g170392) = _ThirdMaskTex;
				SamplerState Sampler238_g170392 = sampler_Linear_Repeat;
				half4 Coords238_g170392 = temp_output_37_0_g170392;
				float3 temp_output_279_0_g170392 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170392 = temp_output_279_0_g170392;
				half4 localSamplePlanar2D238_g170392 = SamplePlanar2D( Texture238_g170392 , Sampler238_g170392 , Coords238_g170392 , WorldPosition238_g170392 );
				TEXTURE2D(Texture246_g170392) = _ThirdMaskTex;
				SamplerState Sampler246_g170392 = sampler_Linear_Repeat;
				half4 Coords246_g170392 = temp_output_37_0_g170392;
				half3 WorldPosition246_g170392 = temp_output_279_0_g170392;
				float3 temp_output_280_0_g170392 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170392 = temp_output_280_0_g170392;
				half4 localSamplePlanar3D246_g170392 = SamplePlanar3D( Texture246_g170392 , Sampler246_g170392 , Coords246_g170392 , WorldPosition246_g170392 , WorldNormal246_g170392 );
				#if defined( TVE_THIRD_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch817_g170365 = localSampleExtra275_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_2D )
				float4 staticSwitch817_g170365 = localSamplePlanar2D238_g170392;
				#elif defined( TVE_THIRD_MASK_SAMPLE_PLANAR_3D )
				float4 staticSwitch817_g170365 = localSamplePlanar3D246_g170392;
				#else
				float4 staticSwitch817_g170365 = localSampleMain276_g170392;
				#endif
				half4 Local_MaskTex861_g170365 = staticSwitch817_g170365;
				float clampResult17_g170376 = clamp( (Local_MaskTex861_g170365).y , 0.0001 , 0.9999 );
				float temp_output_7_0_g170377 = _ThirdMaskRemap.x;
				float temp_output_10_0_g170377 = ( _ThirdMaskRemap.y - temp_output_7_0_g170377 );
				float lerpResult1028_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170376 - temp_output_7_0_g170377 ) / ( temp_output_10_0_g170377 + 0.0001 ) ) ) , _ThirdMaskValue);
				half Detail_TexMask429_g170365 = lerpResult1028_g170365;
				half4 Model_VertexMasks960_g170365 = Out_VertexData15_g170393;
				float4 break961_g170365 = Model_VertexMasks960_g170365;
				float4 break33_g170380 = _third_vert_mode;
				float temp_output_30_0_g170380 = ( break961_g170365.x * break33_g170380.x );
				float temp_output_29_0_g170380 = ( break961_g170365.y * break33_g170380.y );
				float temp_output_31_0_g170380 = ( break961_g170365.z * break33_g170380.z );
				float temp_output_28_0_g170380 = ( temp_output_30_0_g170380 + temp_output_29_0_g170380 + temp_output_31_0_g170380 + ( break961_g170365.w * break33_g170380.w ) );
				float clampResult17_g170374 = clamp( temp_output_28_0_g170380 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170375 = _ThirdMeshRemap.x;
				float temp_output_10_0_g170375 = ( _ThirdMeshRemap.y - temp_output_7_0_g170375 );
				float lerpResult1026_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170374 - temp_output_7_0_g170375 ) / ( temp_output_10_0_g170375 + 0.0001 ) ) ) , _ThirdMeshValue);
				float temp_output_6_0_g170391 = lerpResult1026_g170365;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170391 = ( temp_output_6_0_g170391 + ( _ThirdMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170391 = temp_output_6_0_g170391;
				#endif
				float temp_output_992_0_g170365 = staticSwitch14_g170391;
				half Blend_VertMask913_g170365 = temp_output_992_0_g170365;
				half3 Visual_NormalWS953_g170365 = Out_NormalWS4_g170381;
				float clampResult17_g170378 = clamp( saturate( (Visual_NormalWS953_g170365).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170379 = _ThirdProjRemap.x;
				float temp_output_10_0_g170379 = ( _ThirdProjRemap.y - temp_output_7_0_g170379 );
				float lerpResult1004_g170365 = lerp( 1.0 , saturate( ( ( clampResult17_g170378 - temp_output_7_0_g170379 ) / ( temp_output_10_0_g170379 + 0.0001 ) ) ) , _ThirdProjValue);
				half Blend_ProjMask912_g170365 = lerpResult1004_g170365;
				TVEGlobalData Data15_g170383 = Data204_g157340;
				float Out_Dummy15_g170383 = 0;
				float4 Out_CoatParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170383 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170383 = float4( 0,0,0,0 );
				Out_Dummy15_g170383 = Data15_g170383.Dummy;
				Out_CoatParams15_g170383 = Data15_g170383.CoatParams;
				Out_PaintParams15_g170383 = Data15_g170383.PaintParams;
				Out_GlowParams15_g170383 = Data15_g170383.GlowParams;
				Out_AtmoParams15_g170383= Data15_g170383.AtmoParams;
				Out_FadeParams15_g170383= Data15_g170383.FadeParams;
				Out_FormParams15_g170383 = Data15_g170383.FormParams;
				Out_LandParams15_g170383 = Data15_g170383.LandParams;
				Out_WindParams15_g170383 = Data15_g170383.WindParams;
				Out_PushParams15_g170383 = Data15_g170383.PushParams;
				half4 Global_CoatParams972_g170365 = Out_CoatParams15_g170383;
				float lerpResult1023_g170365 = lerp( 1.0 , (Global_CoatParams972_g170365).y , TVE_IsEnabled);
				#ifdef TVE_THIRD_ELEMENT
				float staticSwitch965_g170365 = lerpResult1023_g170365;
				#else
				float staticSwitch965_g170365 = 1.0;
				#endif
				half Blend_GlobalMask968_g170365 = staticSwitch965_g170365;
				float temp_output_432_0_g170365 = ( _ThirdIntensityValue * Detail_TexMask429_g170365 * Blend_VertMask913_g170365 * Blend_ProjMask912_g170365 * Blend_GlobalMask968_g170365 );
				float clampResult17_g170385 = clamp( temp_output_432_0_g170365 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170384 = _ThirdBlendRemap.x;
				float temp_output_10_0_g170384 = ( _ThirdBlendRemap.y - temp_output_7_0_g170384 );
				half Detail_Mask412_g170365 = ( saturate( ( ( clampResult17_g170385 - temp_output_7_0_g170384 ) / ( temp_output_10_0_g170384 + 0.0001 ) ) ) * _ThirdBlendIntensityValue );
				float3 lerpResult989_g170365 = lerp( Visual_Albedo527_g170365 , lerpResult985_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float3 staticSwitch415_g170365 = lerpResult989_g170365;
				#else
				float3 staticSwitch415_g170365 = Visual_Albedo527_g170365;
				#endif
				half3 Final_Albedo601_g170365 = staticSwitch415_g170365;
				float3 In_Albedo3_g170382 = Final_Albedo601_g170365;
				half2 Visual_NormalTS529_g170365 = Out_NormalTS4_g170381;
				float2 lerpResult40_g170387 = lerp( float2( 0,0 ) , Visual_NormalTS529_g170365 , _ThirdBlendNormalValue);
				TEXTURE2D(Texture276_g170367) = _ThirdNormalTex;
				float localFilterTexture29_g170396 = ( 0.0 );
				SamplerState SamplerDefault29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170396 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170396 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170396 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170396 = SamplerDefault29_g170396;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170396 = SamplerDefault29_g170396;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170396 = SamplerPoint29_g170396;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170396 = SamplerLow29_g170396;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170396 = SamplerMedium29_g170396;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170396 = SamplerHigh29_g170396;
				#endif
				SamplerState Sampler276_g170367 = SS29_g170396;
				float4 temp_output_37_0_g170367 = Local_LayerCoords790_g170365;
				half4 Coords276_g170367 = temp_output_37_0_g170367;
				half2 TexCoord276_g170367 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170367 = SampleMain( Texture276_g170367 , Sampler276_g170367 , Coords276_g170367 , TexCoord276_g170367 );
				TEXTURE2D(Texture275_g170367) = _ThirdNormalTex;
				SamplerState Sampler275_g170367 = SS29_g170396;
				half4 Coords275_g170367 = temp_output_37_0_g170367;
				half2 TexCoord275_g170367 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170367 = SampleExtra( Texture275_g170367 , Sampler275_g170367 , Coords275_g170367 , TexCoord275_g170367 );
				TEXTURE2D(Texture238_g170367) = _ThirdNormalTex;
				SamplerState Sampler238_g170367 = SS29_g170396;
				half4 Coords238_g170367 = temp_output_37_0_g170367;
				float3 temp_output_279_0_g170367 = Model_PositionWO636_g170365;
				half3 WorldPosition238_g170367 = temp_output_279_0_g170367;
				half4 localSamplePlanar2D238_g170367 = SamplePlanar2D( Texture238_g170367 , Sampler238_g170367 , Coords238_g170367 , WorldPosition238_g170367 );
				TEXTURE2D(Texture246_g170367) = _ThirdNormalTex;
				SamplerState Sampler246_g170367 = SS29_g170396;
				half4 Coords246_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition246_g170367 = temp_output_279_0_g170367;
				float3 temp_output_280_0_g170367 = Model_NormalWS869_g170365;
				half3 WorldNormal246_g170367 = temp_output_280_0_g170367;
				half4 localSamplePlanar3D246_g170367 = SamplePlanar3D( Texture246_g170367 , Sampler246_g170367 , Coords246_g170367 , WorldPosition246_g170367 , WorldNormal246_g170367 );
				TEXTURE2D(Texture234_g170367) = _ThirdNormalTex;
				SamplerState Sampler234_g170367 = SS29_g170396;
				float4 Coords234_g170367 = temp_output_37_0_g170367;
				float3 WorldPosition234_g170367 = temp_output_279_0_g170367;
				float4 localSampleStochastic2D234_g170367 = SampleStochastic2D( Texture234_g170367 , Sampler234_g170367 , Coords234_g170367 , WorldPosition234_g170367 );
				TEXTURE2D(Texture263_g170367) = _ThirdNormalTex;
				SamplerState Sampler263_g170367 = SS29_g170396;
				half4 Coords263_g170367 = temp_output_37_0_g170367;
				half3 WorldPosition263_g170367 = temp_output_279_0_g170367;
				half3 WorldNormal263_g170367 = temp_output_280_0_g170367;
				half4 localSampleStochastic3D263_g170367 = SampleStochastic3D( Texture263_g170367 , Sampler263_g170367 , Coords263_g170367 , WorldPosition263_g170367 , WorldNormal263_g170367 );
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float4 staticSwitch698_g170365 = localSampleExtra275_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float4 staticSwitch698_g170365 = localSamplePlanar2D238_g170367;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float4 staticSwitch698_g170365 = localSamplePlanar3D246_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch698_g170365 = localSampleStochastic2D234_g170367;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch698_g170365 = localSampleStochastic3D263_g170367;
				#else
				float4 staticSwitch698_g170365 = localSampleMain276_g170367;
				#endif
				half4 Local_NormalTex776_g170365 = staticSwitch698_g170365;
				half4 Normal_Packed45_g170369 = Local_NormalTex776_g170365;
				float2 appendResult58_g170369 = (float2(( (Normal_Packed45_g170369).x * (Normal_Packed45_g170369).w ) , (Normal_Packed45_g170369).y));
				half2 Normal_Default50_g170369 = appendResult58_g170369;
				half2 Normal_ASTC41_g170369 = (Normal_Packed45_g170369).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170369 = Normal_ASTC41_g170369;
				#else
				float2 staticSwitch38_g170369 = Normal_Default50_g170369;
				#endif
				half2 Normal_NO_DTX544_g170369 = (Normal_Packed45_g170369).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170369 = Normal_NO_DTX544_g170369;
				#else
				float2 staticSwitch37_g170369 = staticSwitch38_g170369;
				#endif
				float2 temp_output_724_0_g170365 = ( (staticSwitch37_g170369*2.0 + -1.0) * _ThirdNormalValue );
				half2 Normal_Planar45_g170370 = temp_output_724_0_g170365;
				float2 break71_g170370 = Normal_Planar45_g170370;
				float3 appendResult72_g170370 = (float3(break71_g170370.x , 0.0 , break71_g170370.y));
				float2 temp_output_858_0_g170365 = (mul( ase_worldToTangent, appendResult72_g170370 )).xy;
				#if defined( TVE_THIRD_SAMPLE_MAIN_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_EXTRA_UV )
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_PLANAR_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_2D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#elif defined( TVE_THIRD_SAMPLE_STOCHASTIC_3D )
				float2 staticSwitch727_g170365 = temp_output_858_0_g170365;
				#else
				float2 staticSwitch727_g170365 = temp_output_724_0_g170365;
				#endif
				half2 Local_NormalTS729_g170365 = staticSwitch727_g170365;
				float2 temp_output_36_0_g170387 = ( lerpResult40_g170387 + Local_NormalTS729_g170365 );
				float2 lerpResult405_g170365 = lerp( Visual_NormalTS529_g170365 , temp_output_36_0_g170387 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float2 staticSwitch418_g170365 = lerpResult405_g170365;
				#else
				float2 staticSwitch418_g170365 = Visual_NormalTS529_g170365;
				#endif
				half2 Final_NormalTS612_g170365 = staticSwitch418_g170365;
				float2 In_NormalTS3_g170382 = Final_NormalTS612_g170365;
				float3 appendResult68_g170388 = (float3(Final_NormalTS612_g170365 , 1.0));
				float3 tanNormal74_g170388 = appendResult68_g170388;
				float3 worldNormal74_g170388 = normalize( float3(dot(tanToWorld0,tanNormal74_g170388), dot(tanToWorld1,tanNormal74_g170388), dot(tanToWorld2,tanNormal74_g170388)) );
				half3 Final_NormalWS956_g170365 = worldNormal74_g170388;
				float3 In_NormalWS3_g170382 = Final_NormalWS956_g170365;
				half4 Visual_Shader531_g170365 = Out_Shader4_g170381;
				float4 lerpResult1000_g170365 = lerp( Local_Masks750_g170365 , ( Visual_Shader531_g170365 * Local_Masks750_g170365 ) , _ThirdBlendShaderValue);
				float4 lerpResult998_g170365 = lerp( Visual_Shader531_g170365 , lerpResult1000_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float4 staticSwitch451_g170365 = lerpResult998_g170365;
				#else
				float4 staticSwitch451_g170365 = Visual_Shader531_g170365;
				#endif
				half4 Final_Masks613_g170365 = staticSwitch451_g170365;
				float4 In_Shader3_g170382 = Final_Masks613_g170365;
				float4 In_Emissive3_g170382 = Out_Emissive4_g170381;
				float3 temp_output_3_0_g170390 = Final_Albedo601_g170365;
				float dotResult20_g170390 = dot( temp_output_3_0_g170390 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale615_g170365 = dotResult20_g170390;
				float In_Grayscale3_g170382 = Final_Grayscale615_g170365;
				float clampResult651_g170365 = clamp( saturate( ( Final_Grayscale615_g170365 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity652_g170365 = clampResult651_g170365;
				float In_Luminosity3_g170382 = Final_Luminosity652_g170365;
				half Visual_MultiMask547_g170365 = Out_MultiMask4_g170381;
				float lerpResult477_g170365 = lerp( Visual_MultiMask547_g170365 , Local_MultiMask767_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch482_g170365 = lerpResult477_g170365;
				#else
				float staticSwitch482_g170365 = Visual_MultiMask547_g170365;
				#endif
				half Final_MultiMask572_g170365 = staticSwitch482_g170365;
				float In_MultiMask3_g170382 = Final_MultiMask572_g170365;
				half Visual_AlphaClip559_g170365 = Out_AlphaClip4_g170381;
				float temp_output_718_0_g170365 = (Local_AlbedoTex777_g170365).w;
				#ifdef TVE_ALPHA_CLIP
				float staticSwitch924_g170365 = ( temp_output_718_0_g170365 - _ThirdAlphaClipValue );
				#else
				float staticSwitch924_g170365 = temp_output_718_0_g170365;
				#endif
				half Local_AlphaClip772_g170365 = staticSwitch924_g170365;
				float lerpResult448_g170365 = lerp( Visual_AlphaClip559_g170365 , Local_AlphaClip772_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch564_g170365 = lerpResult448_g170365;
				#else
				float staticSwitch564_g170365 = Visual_AlphaClip559_g170365;
				#endif
				half Final_AlphaClip602_g170365 = staticSwitch564_g170365;
				float In_AlphaClip3_g170382 = Final_AlphaClip602_g170365;
				half Visual_AlphaFade588_g170365 = Out_AlphaFade4_g170381;
				half Local_AlphaFade773_g170365 = (lerpResult706_g170365).a;
				float lerpResult604_g170365 = lerp( Visual_AlphaFade588_g170365 , Local_AlphaFade773_g170365 , Detail_Mask412_g170365);
				#ifdef TVE_THIRD
				float staticSwitch608_g170365 = lerpResult604_g170365;
				#else
				float staticSwitch608_g170365 = Visual_AlphaFade588_g170365;
				#endif
				half Final_AlphaFade611_g170365 = staticSwitch608_g170365;
				float In_AlphaFade3_g170382 = Final_AlphaFade611_g170365;
				float3 In_Translucency3_g170382 = Out_Translucency4_g170381;
				float In_Transmission3_g170382 = Out_Transmission4_g170381;
				float In_Thickness3_g170382 = Out_Thickness4_g170381;
				float In_Diffusion3_g170382 = Out_Diffusion4_g170381;
				Data3_g170382.Dummy = In_Dummy3_g170382;
				Data3_g170382.Albedo = In_Albedo3_g170382;
				Data3_g170382.NormalTS = In_NormalTS3_g170382;
				Data3_g170382.NormalWS = In_NormalWS3_g170382;
				Data3_g170382.Shader = In_Shader3_g170382;
				Data3_g170382.Emissive= In_Emissive3_g170382;
				Data3_g170382.MultiMask = In_MultiMask3_g170382;
				Data3_g170382.Grayscale = In_Grayscale3_g170382;
				Data3_g170382.Luminosity = In_Luminosity3_g170382;
				Data3_g170382.AlphaClip = In_AlphaClip3_g170382;
				Data3_g170382.AlphaFade = In_AlphaFade3_g170382;
				Data3_g170382.Translucency = In_Translucency3_g170382;
				Data3_g170382.Transmission = In_Transmission3_g170382;
				Data3_g170382.Thickness = In_Thickness3_g170382;
				Data3_g170382.Diffusion = In_Diffusion3_g170382;
				TVEVisualData Data4_g170400 = Data3_g170382;
				float Out_Dummy4_g170400 = 0;
				float3 Out_Albedo4_g170400 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170400 = float2( 0,0 );
				float3 Out_NormalWS4_g170400 = float3( 0,0,0 );
				float4 Out_Shader4_g170400 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170400 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170400 = 0;
				float Out_Grayscale4_g170400 = 0;
				float Out_Luminosity4_g170400 = 0;
				float Out_AlphaClip4_g170400 = 0;
				float Out_AlphaFade4_g170400 = 0;
				float3 Out_Translucency4_g170400 = float3( 0,0,0 );
				float Out_Transmission4_g170400 = 0;
				float Out_Thickness4_g170400 = 0;
				float Out_Diffusion4_g170400 = 0;
				Out_Dummy4_g170400 = Data4_g170400.Dummy;
				Out_Albedo4_g170400 = Data4_g170400.Albedo;
				Out_NormalTS4_g170400 = Data4_g170400.NormalTS;
				Out_NormalWS4_g170400 = Data4_g170400.NormalWS;
				Out_Shader4_g170400 = Data4_g170400.Shader;
				Out_Emissive4_g170400= Data4_g170400.Emissive;
				Out_MultiMask4_g170400 = Data4_g170400.MultiMask;
				Out_Grayscale4_g170400 = Data4_g170400.Grayscale;
				Out_Luminosity4_g170400= Data4_g170400.Luminosity;
				Out_AlphaClip4_g170400 = Data4_g170400.AlphaClip;
				Out_AlphaFade4_g170400 = Data4_g170400.AlphaFade;
				Out_Translucency4_g170400 = Data4_g170400.Translucency;
				Out_Transmission4_g170400 = Data4_g170400.Transmission;
				Out_Thickness4_g170400 = Data4_g170400.Thickness;
				Out_Diffusion4_g170400 = Data4_g170400.Diffusion;
				half3 Visual_Albedo127_g170399 = Out_Albedo4_g170400;
				TVEModelData Data15_g170402 = Data16_g156906;
				float Out_Dummy15_g170402 = 0;
				float3 Out_PositionOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170402 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170402 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170402 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170402 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170402 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170402 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170402 = float3( 0,0,0 );
				float4 Out_VertexData15_g170402 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170402 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170402 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170402 = float4( 0,0,0,0 );
				Out_Dummy15_g170402 = Data15_g170402.Dummy;
				Out_PositionOS15_g170402 = Data15_g170402.PositionOS;
				Out_PositionWS15_g170402 = Data15_g170402.PositionWS;
				Out_PositionWO15_g170402 = Data15_g170402.PositionWO;
				Out_PositionRawOS15_g170402 = Data15_g170402.PositionRawOS;
				Out_PositionAddOS15_g170402 = Data15_g170402.PositionAddOS;
				Out_PivotOS15_g170402 = Data15_g170402.PivotOS;
				Out_PivotWS15_g170402 = Data15_g170402.PivotWS;
				Out_PivotWO15_g170402 = Data15_g170402.PivotWO;
				Out_NormalOS15_g170402 = Data15_g170402.NormalOS;
				Out_NormalWS15_g170402 = Data15_g170402.NormalWS;
				Out_NormalRawOS15_g170402 = Data15_g170402.NormalRawOS;
				Out_NormalRawWS15_g170402 = Data15_g170402.NormalRawWS;
				Out_TangentOS15_g170402 = Data15_g170402.TangentOS;
				Out_ViewDirWS15_g170402 = Data15_g170402.ViewDirWS;
				Out_VertexData15_g170402 = Data15_g170402.VertexData;
				Out_MotionData15_g170402 = Data15_g170402.MotionData;
				Out_BoundsData15_g170402 = Data15_g170402.BoundsData;
				Out_RotationData15_g170402 = Data15_g170402.RotationData;
				half4 Model_VertexData206_g170399 = Out_VertexData15_g170402;
				float4 break208_g170399 = Model_VertexData206_g170399;
				float4 break33_g170407 = _occlusion_vert_mode;
				float temp_output_30_0_g170407 = ( break208_g170399.x * break33_g170407.x );
				float temp_output_29_0_g170407 = ( break208_g170399.y * break33_g170407.y );
				float temp_output_31_0_g170407 = ( break208_g170399.z * break33_g170407.z );
				float temp_output_28_0_g170407 = ( temp_output_30_0_g170407 + temp_output_29_0_g170407 + temp_output_31_0_g170407 + ( break208_g170399.w * break33_g170407.w ) );
				float temp_output_194_0_g170399 = temp_output_28_0_g170407;
				float clampResult17_g170405 = clamp( temp_output_194_0_g170399 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170404 = _OcclusionMeshRemap.x;
				float temp_output_10_0_g170404 = ( _OcclusionMeshRemap.y - temp_output_7_0_g170404 );
				float temp_output_6_0_g170406 = saturate( ( ( clampResult17_g170405 - temp_output_7_0_g170404 ) / ( temp_output_10_0_g170404 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170406 = ( temp_output_6_0_g170406 + ( _OcclusionMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170406 = temp_output_6_0_g170406;
				#endif
				half Occlusion_Mask82_g170399 = staticSwitch14_g170406;
				float3 lerpResult75_g170399 = lerp( (_OcclusionColorTwo).rgb , (_OcclusionColorOne).rgb , Occlusion_Mask82_g170399);
				float3 lerpResult186_g170399 = lerp( Visual_Albedo127_g170399 , ( Visual_Albedo127_g170399 * lerpResult75_g170399 ) , _OcclusionIntensityValue);
				#ifdef TVE_OCCLUSION
				float3 staticSwitch171_g170399 = lerpResult186_g170399;
				#else
				float3 staticSwitch171_g170399 = Visual_Albedo127_g170399;
				#endif
				half3 Final_Albedo160_g170399 = staticSwitch171_g170399;
				float3 In_Albedo3_g170401 = Final_Albedo160_g170399;
				float2 In_NormalTS3_g170401 = Out_NormalTS4_g170400;
				float3 In_NormalWS3_g170401 = Out_NormalWS4_g170400;
				float4 In_Shader3_g170401 = Out_Shader4_g170400;
				float4 In_Emissive3_g170401 = Out_Emissive4_g170400;
				float3 temp_output_3_0_g170403 = Final_Albedo160_g170399;
				float dotResult20_g170403 = dot( temp_output_3_0_g170403 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170399 = dotResult20_g170403;
				float In_Grayscale3_g170401 = Final_Grayscale164_g170399;
				float clampResult180_g170399 = clamp( saturate( ( Final_Grayscale164_g170399 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Shading181_g170399 = clampResult180_g170399;
				float In_Luminosity3_g170401 = Final_Shading181_g170399;
				float In_MultiMask3_g170401 = Out_MultiMask4_g170400;
				float In_AlphaClip3_g170401 = Out_AlphaClip4_g170400;
				float In_AlphaFade3_g170401 = Out_AlphaFade4_g170400;
				float3 In_Translucency3_g170401 = Out_Translucency4_g170400;
				float In_Transmission3_g170401 = Out_Transmission4_g170400;
				float In_Thickness3_g170401 = Out_Thickness4_g170400;
				float In_Diffusion3_g170401 = Out_Diffusion4_g170400;
				Data3_g170401.Dummy = In_Dummy3_g170401;
				Data3_g170401.Albedo = In_Albedo3_g170401;
				Data3_g170401.NormalTS = In_NormalTS3_g170401;
				Data3_g170401.NormalWS = In_NormalWS3_g170401;
				Data3_g170401.Shader = In_Shader3_g170401;
				Data3_g170401.Emissive= In_Emissive3_g170401;
				Data3_g170401.MultiMask = In_MultiMask3_g170401;
				Data3_g170401.Grayscale = In_Grayscale3_g170401;
				Data3_g170401.Luminosity = In_Luminosity3_g170401;
				Data3_g170401.AlphaClip = In_AlphaClip3_g170401;
				Data3_g170401.AlphaFade = In_AlphaFade3_g170401;
				Data3_g170401.Translucency = In_Translucency3_g170401;
				Data3_g170401.Transmission = In_Transmission3_g170401;
				Data3_g170401.Thickness = In_Thickness3_g170401;
				Data3_g170401.Diffusion = In_Diffusion3_g170401;
				TVEVisualData Data4_g170412 = Data3_g170401;
				float Out_Dummy4_g170412 = 0;
				float3 Out_Albedo4_g170412 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170412 = float2( 0,0 );
				float3 Out_NormalWS4_g170412 = float3( 0,0,0 );
				float4 Out_Shader4_g170412 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170412 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170412 = 0;
				float Out_Grayscale4_g170412 = 0;
				float Out_Luminosity4_g170412 = 0;
				float Out_AlphaClip4_g170412 = 0;
				float Out_AlphaFade4_g170412 = 0;
				float3 Out_Translucency4_g170412 = float3( 0,0,0 );
				float Out_Transmission4_g170412 = 0;
				float Out_Thickness4_g170412 = 0;
				float Out_Diffusion4_g170412 = 0;
				Out_Dummy4_g170412 = Data4_g170412.Dummy;
				Out_Albedo4_g170412 = Data4_g170412.Albedo;
				Out_NormalTS4_g170412 = Data4_g170412.NormalTS;
				Out_NormalWS4_g170412 = Data4_g170412.NormalWS;
				Out_Shader4_g170412 = Data4_g170412.Shader;
				Out_Emissive4_g170412= Data4_g170412.Emissive;
				Out_MultiMask4_g170412 = Data4_g170412.MultiMask;
				Out_Grayscale4_g170412 = Data4_g170412.Grayscale;
				Out_Luminosity4_g170412= Data4_g170412.Luminosity;
				Out_AlphaClip4_g170412 = Data4_g170412.AlphaClip;
				Out_AlphaFade4_g170412 = Data4_g170412.AlphaFade;
				Out_Translucency4_g170412 = Data4_g170412.Translucency;
				Out_Transmission4_g170412 = Data4_g170412.Transmission;
				Out_Thickness4_g170412 = Data4_g170412.Thickness;
				Out_Diffusion4_g170412 = Data4_g170412.Diffusion;
				half3 Visual_Albedo127_g170409 = Out_Albedo4_g170412;
				TVEModelData Data15_g170410 = Data16_g156906;
				float Out_Dummy15_g170410 = 0;
				float3 Out_PositionOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170410 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170410 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170410 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170410 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170410 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170410 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170410 = float3( 0,0,0 );
				float4 Out_VertexData15_g170410 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170410 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170410 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170410 = float4( 0,0,0,0 );
				Out_Dummy15_g170410 = Data15_g170410.Dummy;
				Out_PositionOS15_g170410 = Data15_g170410.PositionOS;
				Out_PositionWS15_g170410 = Data15_g170410.PositionWS;
				Out_PositionWO15_g170410 = Data15_g170410.PositionWO;
				Out_PositionRawOS15_g170410 = Data15_g170410.PositionRawOS;
				Out_PositionAddOS15_g170410 = Data15_g170410.PositionAddOS;
				Out_PivotOS15_g170410 = Data15_g170410.PivotOS;
				Out_PivotWS15_g170410 = Data15_g170410.PivotWS;
				Out_PivotWO15_g170410 = Data15_g170410.PivotWO;
				Out_NormalOS15_g170410 = Data15_g170410.NormalOS;
				Out_NormalWS15_g170410 = Data15_g170410.NormalWS;
				Out_NormalRawOS15_g170410 = Data15_g170410.NormalRawOS;
				Out_NormalRawWS15_g170410 = Data15_g170410.NormalRawWS;
				Out_TangentOS15_g170410 = Data15_g170410.TangentOS;
				Out_ViewDirWS15_g170410 = Data15_g170410.ViewDirWS;
				Out_VertexData15_g170410 = Data15_g170410.VertexData;
				Out_MotionData15_g170410 = Data15_g170410.MotionData;
				Out_BoundsData15_g170410 = Data15_g170410.BoundsData;
				Out_RotationData15_g170410 = Data15_g170410.RotationData;
				half4 Model_VertexData224_g170409 = Out_VertexData15_g170410;
				float4 break226_g170409 = Model_VertexData224_g170409;
				float4 break33_g170411 = _gradient_vert_mode;
				float temp_output_30_0_g170411 = ( break226_g170409.x * break33_g170411.x );
				float temp_output_29_0_g170411 = ( break226_g170409.y * break33_g170411.y );
				float temp_output_31_0_g170411 = ( break226_g170409.z * break33_g170411.z );
				float temp_output_28_0_g170411 = ( temp_output_30_0_g170411 + temp_output_29_0_g170411 + temp_output_31_0_g170411 + ( break226_g170409.w * break33_g170411.w ) );
				float temp_output_211_0_g170409 = temp_output_28_0_g170411;
				float clampResult17_g170416 = clamp( temp_output_211_0_g170409 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170417 = _GradientMeshRemap.x;
				float temp_output_10_0_g170417 = ( _GradientMeshRemap.y - temp_output_7_0_g170417 );
				float temp_output_6_0_g170418 = saturate( ( ( clampResult17_g170416 - temp_output_7_0_g170417 ) / ( temp_output_10_0_g170417 + 0.0001 ) ) );
				#ifdef TVE_REGISTER
				float staticSwitch14_g170418 = ( temp_output_6_0_g170418 + ( _GradientMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170418 = temp_output_6_0_g170418;
				#endif
				half Gradient_VertMask82_g170409 = staticSwitch14_g170418;
				half Gradient_Mask200_g170409 = Gradient_VertMask82_g170409;
				float3 lerpResult75_g170409 = lerp( (_GradientColorTwo).rgb , (_GradientColorOne).rgb , Gradient_Mask200_g170409);
				float temp_output_162_11_g170409 = Out_MultiMask4_g170412;
				half Visual_MultiMask196_g170409 = temp_output_162_11_g170409;
				float lerpResult190_g170409 = lerp( 1.0 , Visual_MultiMask196_g170409 , _GradientMultiValue);
				half Gradient_MultiMask194_g170409 = lerpResult190_g170409;
				float3 lerpResult186_g170409 = lerp( Visual_Albedo127_g170409 , ( Visual_Albedo127_g170409 * lerpResult75_g170409 ) , ( _GradientIntensityValue * Gradient_MultiMask194_g170409 ));
				#ifdef TVE_GRADIENT
				float3 staticSwitch171_g170409 = lerpResult186_g170409;
				#else
				float3 staticSwitch171_g170409 = Visual_Albedo127_g170409;
				#endif
				half3 Final_Albedo160_g170409 = staticSwitch171_g170409;
				float3 In_Albedo3_g170413 = Final_Albedo160_g170409;
				float2 In_NormalTS3_g170413 = Out_NormalTS4_g170412;
				float3 In_NormalWS3_g170413 = Out_NormalWS4_g170412;
				float4 In_Shader3_g170413 = Out_Shader4_g170412;
				float4 In_Emissive3_g170413 = Out_Emissive4_g170412;
				float3 temp_output_3_0_g170414 = Final_Albedo160_g170409;
				float dotResult20_g170414 = dot( temp_output_3_0_g170414 , float3(0.2126,0.7152,0.0722) );
				half Final_Grayscale164_g170409 = dotResult20_g170414;
				float In_Grayscale3_g170413 = Final_Grayscale164_g170409;
				float clampResult180_g170409 = clamp( saturate( ( Final_Grayscale164_g170409 * 5.0 ) ) , 0.2 , 1.0 );
				half Final_Luminosity181_g170409 = clampResult180_g170409;
				float In_Luminosity3_g170413 = Final_Luminosity181_g170409;
				float In_MultiMask3_g170413 = temp_output_162_11_g170409;
				float In_AlphaClip3_g170413 = Out_AlphaClip4_g170412;
				float In_AlphaFade3_g170413 = Out_AlphaFade4_g170412;
				float3 In_Translucency3_g170413 = Out_Translucency4_g170412;
				float In_Transmission3_g170413 = Out_Transmission4_g170412;
				float In_Thickness3_g170413 = Out_Thickness4_g170412;
				float In_Diffusion3_g170413 = Out_Diffusion4_g170412;
				Data3_g170413.Dummy = In_Dummy3_g170413;
				Data3_g170413.Albedo = In_Albedo3_g170413;
				Data3_g170413.NormalTS = In_NormalTS3_g170413;
				Data3_g170413.NormalWS = In_NormalWS3_g170413;
				Data3_g170413.Shader = In_Shader3_g170413;
				Data3_g170413.Emissive= In_Emissive3_g170413;
				Data3_g170413.MultiMask = In_MultiMask3_g170413;
				Data3_g170413.Grayscale = In_Grayscale3_g170413;
				Data3_g170413.Luminosity = In_Luminosity3_g170413;
				Data3_g170413.AlphaClip = In_AlphaClip3_g170413;
				Data3_g170413.AlphaFade = In_AlphaFade3_g170413;
				Data3_g170413.Translucency = In_Translucency3_g170413;
				Data3_g170413.Transmission = In_Transmission3_g170413;
				Data3_g170413.Thickness = In_Thickness3_g170413;
				Data3_g170413.Diffusion = In_Diffusion3_g170413;
				TVEVisualData Data4_g170420 = Data3_g170413;
				float Out_Dummy4_g170420 = 0;
				float3 Out_Albedo4_g170420 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170420 = float2( 0,0 );
				float3 Out_NormalWS4_g170420 = float3( 0,0,0 );
				float4 Out_Shader4_g170420 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170420 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170420 = 0;
				float Out_Grayscale4_g170420 = 0;
				float Out_Luminosity4_g170420 = 0;
				float Out_AlphaClip4_g170420 = 0;
				float Out_AlphaFade4_g170420 = 0;
				float3 Out_Translucency4_g170420 = float3( 0,0,0 );
				float Out_Transmission4_g170420 = 0;
				float Out_Thickness4_g170420 = 0;
				float Out_Diffusion4_g170420 = 0;
				Out_Dummy4_g170420 = Data4_g170420.Dummy;
				Out_Albedo4_g170420 = Data4_g170420.Albedo;
				Out_NormalTS4_g170420 = Data4_g170420.NormalTS;
				Out_NormalWS4_g170420 = Data4_g170420.NormalWS;
				Out_Shader4_g170420 = Data4_g170420.Shader;
				Out_Emissive4_g170420= Data4_g170420.Emissive;
				Out_MultiMask4_g170420 = Data4_g170420.MultiMask;
				Out_Grayscale4_g170420 = Data4_g170420.Grayscale;
				Out_Luminosity4_g170420= Data4_g170420.Luminosity;
				Out_AlphaClip4_g170420 = Data4_g170420.AlphaClip;
				Out_AlphaFade4_g170420 = Data4_g170420.AlphaFade;
				Out_Translucency4_g170420 = Data4_g170420.Translucency;
				Out_Transmission4_g170420 = Data4_g170420.Transmission;
				Out_Thickness4_g170420 = Data4_g170420.Thickness;
				Out_Diffusion4_g170420 = Data4_g170420.Diffusion;
				half3 Visual_Albedo127_g170419 = Out_Albedo4_g170420;
				float4 vertexToFrag24_g170398 = packedInput.ase_texcoord11;
				half4 Interp_Data2426 = vertexToFrag24_g170398;
				float clampResult208_g170419 = clamp( (Interp_Data2426).w , 0.0 , 0.09 );
				#ifdef TVE_MOTION_HIGHLIGHT
				float3 staticSwitch214_g170419 = ( Visual_Albedo127_g170419 + ( ( Visual_Albedo127_g170419 * Visual_Albedo127_g170419 * 200.0 * _motion_highlight_color ) * clampResult208_g170419 ) );
				#else
				float3 staticSwitch214_g170419 = Visual_Albedo127_g170419;
				#endif
				half3 Final_Albedo160_g170419 = staticSwitch214_g170419;
				float3 In_Albedo3_g170421 = Final_Albedo160_g170419;
				float2 In_NormalTS3_g170421 = Out_NormalTS4_g170420;
				float3 In_NormalWS3_g170421 = Out_NormalWS4_g170420;
				float4 In_Shader3_g170421 = Out_Shader4_g170420;
				float4 In_Emissive3_g170421 = Out_Emissive4_g170420;
				float In_Grayscale3_g170421 = Out_Grayscale4_g170420;
				float In_Luminosity3_g170421 = Out_Luminosity4_g170420;
				float In_MultiMask3_g170421 = Out_MultiMask4_g170420;
				float In_AlphaClip3_g170421 = Out_AlphaClip4_g170420;
				float In_AlphaFade3_g170421 = Out_AlphaFade4_g170420;
				float3 In_Translucency3_g170421 = Out_Translucency4_g170420;
				float In_Transmission3_g170421 = Out_Transmission4_g170420;
				float In_Thickness3_g170421 = Out_Thickness4_g170420;
				float In_Diffusion3_g170421 = Out_Diffusion4_g170420;
				Data3_g170421.Dummy = In_Dummy3_g170421;
				Data3_g170421.Albedo = In_Albedo3_g170421;
				Data3_g170421.NormalTS = In_NormalTS3_g170421;
				Data3_g170421.NormalWS = In_NormalWS3_g170421;
				Data3_g170421.Shader = In_Shader3_g170421;
				Data3_g170421.Emissive= In_Emissive3_g170421;
				Data3_g170421.MultiMask = In_MultiMask3_g170421;
				Data3_g170421.Grayscale = In_Grayscale3_g170421;
				Data3_g170421.Luminosity = In_Luminosity3_g170421;
				Data3_g170421.AlphaClip = In_AlphaClip3_g170421;
				Data3_g170421.AlphaFade = In_AlphaFade3_g170421;
				Data3_g170421.Translucency = In_Translucency3_g170421;
				Data3_g170421.Transmission = In_Transmission3_g170421;
				Data3_g170421.Thickness = In_Thickness3_g170421;
				Data3_g170421.Diffusion = In_Diffusion3_g170421;
				TVEVisualData Data4_g170423 = Data3_g170421;
				float Out_Dummy4_g170423 = 0;
				float3 Out_Albedo4_g170423 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170423 = float2( 0,0 );
				float3 Out_NormalWS4_g170423 = float3( 0,0,0 );
				float4 Out_Shader4_g170423 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170423 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170423 = 0;
				float Out_Grayscale4_g170423 = 0;
				float Out_Luminosity4_g170423 = 0;
				float Out_AlphaClip4_g170423 = 0;
				float Out_AlphaFade4_g170423 = 0;
				float3 Out_Translucency4_g170423 = float3( 0,0,0 );
				float Out_Transmission4_g170423 = 0;
				float Out_Thickness4_g170423 = 0;
				float Out_Diffusion4_g170423 = 0;
				Out_Dummy4_g170423 = Data4_g170423.Dummy;
				Out_Albedo4_g170423 = Data4_g170423.Albedo;
				Out_NormalTS4_g170423 = Data4_g170423.NormalTS;
				Out_NormalWS4_g170423 = Data4_g170423.NormalWS;
				Out_Shader4_g170423 = Data4_g170423.Shader;
				Out_Emissive4_g170423= Data4_g170423.Emissive;
				Out_MultiMask4_g170423 = Data4_g170423.MultiMask;
				Out_Grayscale4_g170423 = Data4_g170423.Grayscale;
				Out_Luminosity4_g170423= Data4_g170423.Luminosity;
				Out_AlphaClip4_g170423 = Data4_g170423.AlphaClip;
				Out_AlphaFade4_g170423 = Data4_g170423.AlphaFade;
				Out_Translucency4_g170423 = Data4_g170423.Translucency;
				Out_Transmission4_g170423 = Data4_g170423.Transmission;
				Out_Thickness4_g170423 = Data4_g170423.Thickness;
				Out_Diffusion4_g170423 = Data4_g170423.Diffusion;
				half3 Visual_Albedo127_g170422 = Out_Albedo4_g170423;
				float3 temp_output_622_0_g170422 = (_OverlayColor).rgb;
				TEXTURE2D(Texture238_g170426) = _OverlayAlbedoTex;
				float localFilterTexture19_g170451 = ( 0.0 );
				SamplerState SamplerDefault19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerPoint19_g170451 = sampler_Point_Repeat;
				SamplerState SamplerLow19_g170451 = sampler_Linear_Repeat;
				SamplerState SamplerMedium19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh19_g170451 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS19_g170451 = SamplerDefault19_g170451;
				#if defined (TVE_FILTER_DEFAULT)
				    SS19_g170451 = SamplerDefault19_g170451;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS19_g170451 = SamplerPoint19_g170451;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS19_g170451 = SamplerLow19_g170451;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS19_g170451 = SamplerMedium19_g170451;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS19_g170451 = SamplerHigh19_g170451;
				#endif
				SamplerState Sampler238_g170426 = SS19_g170451;
				float4 temp_output_6_0_g170429 = _overlay_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170429 = ( temp_output_6_0_g170429 + ( ( _OverlaySampleMode + _OverlayCoordMode + _OverlayCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170429 = temp_output_6_0_g170429;
				#endif
				half4 Overlay_Coords639_g170422 = staticSwitch14_g170429;
				float4 temp_output_37_0_g170426 = Overlay_Coords639_g170422;
				half4 Coords238_g170426 = temp_output_37_0_g170426;
				TVEModelData Data15_g170430 = Data16_g156906;
				float Out_Dummy15_g170430 = 0;
				float3 Out_PositionOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170430 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170430 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170430 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170430 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170430 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170430 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170430 = float3( 0,0,0 );
				float4 Out_VertexData15_g170430 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170430 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170430 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170430 = float4( 0,0,0,0 );
				Out_Dummy15_g170430 = Data15_g170430.Dummy;
				Out_PositionOS15_g170430 = Data15_g170430.PositionOS;
				Out_PositionWS15_g170430 = Data15_g170430.PositionWS;
				Out_PositionWO15_g170430 = Data15_g170430.PositionWO;
				Out_PositionRawOS15_g170430 = Data15_g170430.PositionRawOS;
				Out_PositionAddOS15_g170430 = Data15_g170430.PositionAddOS;
				Out_PivotOS15_g170430 = Data15_g170430.PivotOS;
				Out_PivotWS15_g170430 = Data15_g170430.PivotWS;
				Out_PivotWO15_g170430 = Data15_g170430.PivotWO;
				Out_NormalOS15_g170430 = Data15_g170430.NormalOS;
				Out_NormalWS15_g170430 = Data15_g170430.NormalWS;
				Out_NormalRawOS15_g170430 = Data15_g170430.NormalRawOS;
				Out_NormalRawWS15_g170430 = Data15_g170430.NormalRawWS;
				Out_TangentOS15_g170430 = Data15_g170430.TangentOS;
				Out_ViewDirWS15_g170430 = Data15_g170430.ViewDirWS;
				Out_VertexData15_g170430 = Data15_g170430.VertexData;
				Out_MotionData15_g170430 = Data15_g170430.MotionData;
				Out_BoundsData15_g170430 = Data15_g170430.BoundsData;
				Out_RotationData15_g170430 = Data15_g170430.RotationData;
				half3 Model_PositionWO602_g170422 = Out_PositionWO15_g170430;
				float3 temp_output_279_0_g170426 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170426 = temp_output_279_0_g170426;
				half4 localSamplePlanar2D238_g170426 = SamplePlanar2D( Texture238_g170426 , Sampler238_g170426 , Coords238_g170426 , WorldPosition238_g170426 );
				TEXTURE2D(Texture246_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler246_g170426 = SS19_g170451;
				half4 Coords246_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition246_g170426 = temp_output_279_0_g170426;
				half3 Model_NormalWS712_g170422 = Out_NormalWS15_g170430;
				float3 temp_output_280_0_g170426 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170426 = temp_output_280_0_g170426;
				half4 localSamplePlanar3D246_g170426 = SamplePlanar3D( Texture246_g170426 , Sampler246_g170426 , Coords246_g170426 , WorldPosition246_g170426 , WorldNormal246_g170426 );
				TEXTURE2D(Texture234_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler234_g170426 = SS19_g170451;
				float4 Coords234_g170426 = temp_output_37_0_g170426;
				float3 WorldPosition234_g170426 = temp_output_279_0_g170426;
				float4 localSampleStochastic2D234_g170426 = SampleStochastic2D( Texture234_g170426 , Sampler234_g170426 , Coords234_g170426 , WorldPosition234_g170426 );
				TEXTURE2D(Texture263_g170426) = _OverlayAlbedoTex;
				SamplerState Sampler263_g170426 = SS19_g170451;
				half4 Coords263_g170426 = temp_output_37_0_g170426;
				half3 WorldPosition263_g170426 = temp_output_279_0_g170426;
				half3 WorldNormal263_g170426 = temp_output_280_0_g170426;
				half4 localSampleStochastic3D263_g170426 = SampleStochastic3D( Texture263_g170426 , Sampler263_g170426 , Coords263_g170426 , WorldPosition263_g170426 , WorldNormal263_g170426 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch676_g170422 = localSamplePlanar3D246_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch676_g170422 = localSampleStochastic2D234_g170426;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch676_g170422 = localSampleStochastic3D263_g170426;
				#else
				float4 staticSwitch676_g170422 = localSamplePlanar2D238_g170426;
				#endif
				half3 Overlay_Albedo526_g170422 = (staticSwitch676_g170422).xyz;
				#ifdef TVE_OVERLAY_TEX
				float3 staticSwitch578_g170422 = ( temp_output_622_0_g170422 * Overlay_Albedo526_g170422 );
				#else
				float3 staticSwitch578_g170422 = temp_output_622_0_g170422;
				#endif
				float3 temp_output_6_0_g170445 = staticSwitch578_g170422;
				#ifdef TVE_REGISTER
				float3 staticSwitch14_g170445 = ( temp_output_6_0_g170445 + ( _OverlayTextureMode * 0.0 ) );
				#else
				float3 staticSwitch14_g170445 = temp_output_6_0_g170445;
				#endif
				TEXTURE2D(Texture276_g170432) = _OverlayMaskTex;
				SamplerState Sampler276_g170432 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170433 = _overlay_mask_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170433 = ( temp_output_6_0_g170433 + ( ( _OverlayMaskSampleMode + _OverlayMaskCoordMode + _OverlayMaskCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170433 = temp_output_6_0_g170433;
				#endif
				half4 Local_MaskCoords886_g170422 = staticSwitch14_g170433;
				float4 temp_output_37_0_g170432 = Local_MaskCoords886_g170422;
				half4 Coords276_g170432 = temp_output_37_0_g170432;
				half2 TexCoord276_g170432 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170432 = SampleMain( Texture276_g170432 , Sampler276_g170432 , Coords276_g170432 , TexCoord276_g170432 );
				TEXTURE2D(Texture275_g170432) = _OverlayMaskTex;
				SamplerState Sampler275_g170432 = sampler_Linear_Repeat;
				half4 Coords275_g170432 = temp_output_37_0_g170432;
				half2 TexCoord275_g170432 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170432 = SampleExtra( Texture275_g170432 , Sampler275_g170432 , Coords275_g170432 , TexCoord275_g170432 );
				#if defined( TVE_OVERLAY_MASK_SAMPLE_MAIN_UV )
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#elif defined( TVE_OVERLAY_MASK_SAMPLE_EXTRA_UV )
				float4 staticSwitch894_g170422 = localSampleExtra275_g170432;
				#else
				float4 staticSwitch894_g170422 = localSampleMain276_g170432;
				#endif
				half4 Local_MaskTex885_g170422 = staticSwitch894_g170422;
				float clampResult17_g170447 = clamp( (Local_MaskTex885_g170422).z , 0.0001 , 0.9999 );
				float temp_output_7_0_g170448 = _OverlayMaskRemap.x;
				float temp_output_10_0_g170448 = ( _OverlayMaskRemap.y - temp_output_7_0_g170448 );
				float lerpResult898_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170447 - temp_output_7_0_g170448 ) / ( temp_output_10_0_g170448 + 0.0001 ) ) ) , _OverlayMaskValue);
				half Overlay_TexMask906_g170422 = lerpResult898_g170422;
				float3 temp_output_739_21_g170422 = Out_NormalWS4_g170423;
				half3 Visual_NormalWS749_g170422 = temp_output_739_21_g170422;
				float clampResult17_g170442 = clamp( saturate( (Visual_NormalWS749_g170422).y ) , 0.0001 , 0.9999 );
				float temp_output_7_0_g170441 = _OverlayProjRemap.x;
				float temp_output_10_0_g170441 = ( _OverlayProjRemap.y - temp_output_7_0_g170441 );
				float lerpResult842_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170442 - temp_output_7_0_g170441 ) / ( temp_output_10_0_g170441 + 0.0001 ) ) ) , _OverlayProjValue);
				half Overlay_MaskProj457_g170422 = lerpResult842_g170422;
				float temp_output_739_15_g170422 = Out_Luminosity4_g170423;
				half Visual_Luminosity654_g170422 = temp_output_739_15_g170422;
				float clampResult17_g170444 = clamp( Visual_Luminosity654_g170422 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170443 = _OverlayLumaRemap.x;
				float temp_output_10_0_g170443 = ( _OverlayLumaRemap.y - temp_output_7_0_g170443 );
				float lerpResult587_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170444 - temp_output_7_0_g170443 ) / ( temp_output_10_0_g170443 + 0.0001 ) ) ) , _OverlayLumaValue);
				half Overlay_MaskLuma438_g170422 = lerpResult587_g170422;
				half4 Model_VertexMasks791_g170422 = Out_VertexData15_g170430;
				float4 break792_g170422 = Model_VertexMasks791_g170422;
				float4 break33_g170434 = _overlay_vert_mode;
				float temp_output_30_0_g170434 = ( break792_g170422.x * break33_g170434.x );
				float temp_output_29_0_g170434 = ( break792_g170422.y * break33_g170434.y );
				float temp_output_31_0_g170434 = ( break792_g170422.z * break33_g170434.z );
				float temp_output_28_0_g170434 = ( temp_output_30_0_g170434 + temp_output_29_0_g170434 + temp_output_31_0_g170434 + ( break792_g170422.w * break33_g170434.w ) );
				float clampResult17_g170435 = clamp( temp_output_28_0_g170434 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170438 = _OverlayMeshRemap.x;
				float temp_output_10_0_g170438 = ( _OverlayMeshRemap.y - temp_output_7_0_g170438 );
				float lerpResult879_g170422 = lerp( 1.0 , saturate( ( ( clampResult17_g170435 - temp_output_7_0_g170438 ) / ( temp_output_10_0_g170438 + 0.0001 ) ) ) , _OverlayMeshValue);
				float temp_output_6_0_g170446 = lerpResult879_g170422;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170446 = ( temp_output_6_0_g170446 + ( _OverlayMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170446 = temp_output_6_0_g170446;
				#endif
				float temp_output_831_0_g170422 = staticSwitch14_g170446;
				half Overlay_VertMask801_g170422 = temp_output_831_0_g170422;
				half Overlay_MaskNoise427_g170422 = 1.0;
				TVEGlobalData Data15_g170424 = Data204_g157340;
				float Out_Dummy15_g170424 = 0;
				float4 Out_CoatParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170424 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170424 = float4( 0,0,0,0 );
				Out_Dummy15_g170424 = Data15_g170424.Dummy;
				Out_CoatParams15_g170424 = Data15_g170424.CoatParams;
				Out_PaintParams15_g170424 = Data15_g170424.PaintParams;
				Out_GlowParams15_g170424 = Data15_g170424.GlowParams;
				Out_AtmoParams15_g170424= Data15_g170424.AtmoParams;
				Out_FadeParams15_g170424= Data15_g170424.FadeParams;
				Out_FormParams15_g170424 = Data15_g170424.FormParams;
				Out_LandParams15_g170424 = Data15_g170424.LandParams;
				Out_WindParams15_g170424 = Data15_g170424.WindParams;
				Out_PushParams15_g170424 = Data15_g170424.PushParams;
				half4 Global_AtmoParams516_g170422 = Out_AtmoParams15_g170424;
				#ifdef TVE_OVERLAY_ELEMENT
				float staticSwitch705_g170422 = (Global_AtmoParams516_g170422).z;
				#else
				float staticSwitch705_g170422 = 1.0;
				#endif
				half Overlay_MaskGlobal429_g170422 = staticSwitch705_g170422;
				half Custom_Mask646_g170422 = 1.0;
				float temp_output_7_0_g170449 = _OverlayBlendRemap1.x;
				float temp_output_10_0_g170449 = ( _OverlayBlendRemap1.y - temp_output_7_0_g170449 );
				half Overlay_Mask494_g170422 = saturate( ( ( ( _OverlayIntensityValue * Overlay_TexMask906_g170422 * Overlay_MaskProj457_g170422 * Overlay_MaskLuma438_g170422 * Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 * Custom_Mask646_g170422 ) - temp_output_7_0_g170449 ) / ( temp_output_10_0_g170449 + 0.0001 ) ) );
				float3 lerpResult467_g170422 = lerp( Visual_Albedo127_g170422 , staticSwitch14_g170445 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float3 staticSwitch577_g170422 = lerpResult467_g170422;
				#else
				float3 staticSwitch577_g170422 = Visual_Albedo127_g170422;
				#endif
				half3 Final_Albedo493_g170422 = staticSwitch577_g170422;
				float3 In_Albedo3_g170425 = Final_Albedo493_g170422;
				half2 Visual_NormalTS535_g170422 = Out_NormalTS4_g170423;
				TEXTURE2D(Texture238_g170431) = _OverlayNormalTex;
				float localFilterTexture29_g170450 = ( 0.0 );
				SamplerState SamplerDefault29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerPoint29_g170450 = sampler_Point_Repeat;
				SamplerState SamplerLow29_g170450 = sampler_Linear_Repeat;
				SamplerState SamplerMedium29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SamplerHigh29_g170450 = sampler_Linear_Repeat_Aniso8;
				SamplerState SS29_g170450 = SamplerDefault29_g170450;
				#if defined (TVE_FILTER_DEFAULT)
				    SS29_g170450 = SamplerDefault29_g170450;
				#endif
				#if defined (TVE_FILTER_POINT)
				    SS29_g170450 = SamplerPoint29_g170450;
				#endif
				#if defined (TVE_FILTER_LOW)
				    SS29_g170450 = SamplerLow29_g170450;
				#endif
				#if defined (TVE_FILTER_MEDIUM)
				    SS29_g170450 = SamplerMedium29_g170450;
				#endif
				#if defined (TVE_FILTER_HIGH)
				    SS29_g170450 = SamplerHigh29_g170450;
				#endif
				SamplerState Sampler238_g170431 = SS29_g170450;
				float4 temp_output_37_0_g170431 = Overlay_Coords639_g170422;
				half4 Coords238_g170431 = temp_output_37_0_g170431;
				float3 temp_output_279_0_g170431 = Model_PositionWO602_g170422;
				half3 WorldPosition238_g170431 = temp_output_279_0_g170431;
				half4 localSamplePlanar2D238_g170431 = SamplePlanar2D( Texture238_g170431 , Sampler238_g170431 , Coords238_g170431 , WorldPosition238_g170431 );
				TEXTURE2D(Texture246_g170431) = _OverlayNormalTex;
				SamplerState Sampler246_g170431 = SS29_g170450;
				half4 Coords246_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition246_g170431 = temp_output_279_0_g170431;
				float3 temp_output_280_0_g170431 = Model_NormalWS712_g170422;
				half3 WorldNormal246_g170431 = temp_output_280_0_g170431;
				half4 localSamplePlanar3D246_g170431 = SamplePlanar3D( Texture246_g170431 , Sampler246_g170431 , Coords246_g170431 , WorldPosition246_g170431 , WorldNormal246_g170431 );
				TEXTURE2D(Texture234_g170431) = _OverlayNormalTex;
				SamplerState Sampler234_g170431 = SS29_g170450;
				float4 Coords234_g170431 = temp_output_37_0_g170431;
				float3 WorldPosition234_g170431 = temp_output_279_0_g170431;
				float4 localSampleStochastic2D234_g170431 = SampleStochastic2D( Texture234_g170431 , Sampler234_g170431 , Coords234_g170431 , WorldPosition234_g170431 );
				TEXTURE2D(Texture263_g170431) = _OverlayNormalTex;
				SamplerState Sampler263_g170431 = SS29_g170450;
				half4 Coords263_g170431 = temp_output_37_0_g170431;
				half3 WorldPosition263_g170431 = temp_output_279_0_g170431;
				half3 WorldNormal263_g170431 = temp_output_280_0_g170431;
				half4 localSampleStochastic3D263_g170431 = SampleStochastic3D( Texture263_g170431 , Sampler263_g170431 , Coords263_g170431 , WorldPosition263_g170431 , WorldNormal263_g170431 );
				#if defined( TVE_OVERLAY_SAMPLE_PLANAR_2D )
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_PLANAR_3D )
				float4 staticSwitch686_g170422 = localSamplePlanar3D246_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_2D )
				float4 staticSwitch686_g170422 = localSampleStochastic2D234_g170431;
				#elif defined( TVE_OVERLAY_SAMPLE_STOCHASTIC_3D )
				float4 staticSwitch686_g170422 = localSampleStochastic3D263_g170431;
				#else
				float4 staticSwitch686_g170422 = localSamplePlanar2D238_g170431;
				#endif
				half4 Normal_Packed45_g170428 = staticSwitch686_g170422;
				float2 appendResult58_g170428 = (float2(( (Normal_Packed45_g170428).x * (Normal_Packed45_g170428).w ) , (Normal_Packed45_g170428).y));
				half2 Normal_Default50_g170428 = appendResult58_g170428;
				half2 Normal_ASTC41_g170428 = (Normal_Packed45_g170428).xy;
				#ifdef UNITY_ASTC_NORMALMAP_ENCODING
				float2 staticSwitch38_g170428 = Normal_ASTC41_g170428;
				#else
				float2 staticSwitch38_g170428 = Normal_Default50_g170428;
				#endif
				half2 Normal_NO_DTX544_g170428 = (Normal_Packed45_g170428).wy;
				#ifdef UNITY_NO_DXT5nm
				float2 staticSwitch37_g170428 = Normal_NO_DTX544_g170428;
				#else
				float2 staticSwitch37_g170428 = staticSwitch38_g170428;
				#endif
				half2 Normal_Planar45_g170427 = (staticSwitch37_g170428*2.0 + -1.0);
				float2 break71_g170427 = Normal_Planar45_g170427;
				float3 appendResult72_g170427 = (float3(break71_g170427.x , 0.0 , break71_g170427.y));
				half2 Overlay_Normal528_g170422 = (mul( ase_worldToTangent, appendResult72_g170427 )).xy;
				#ifdef TVE_OVERLAY_TEX
				float2 staticSwitch579_g170422 = Overlay_Normal528_g170422;
				#else
				float2 staticSwitch579_g170422 = Visual_NormalTS535_g170422;
				#endif
				float2 lerpResult551_g170422 = lerp( Visual_NormalTS535_g170422 , ( staticSwitch579_g170422 * _OverlayNormalValue ) , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float2 staticSwitch583_g170422 = lerpResult551_g170422;
				#else
				float2 staticSwitch583_g170422 = Visual_NormalTS535_g170422;
				#endif
				half2 Final_NormalTS499_g170422 = staticSwitch583_g170422;
				float2 In_NormalTS3_g170425 = Final_NormalTS499_g170422;
				float3 In_NormalWS3_g170425 = temp_output_739_21_g170422;
				half4 Visual_Masks536_g170422 = Out_Shader4_g170423;
				float4 appendResult585_g170422 = (float4(0.0 , 1.0 , 0.0 , _OverlaySmoothnessValue));
				float4 lerpResult584_g170422 = lerp( Visual_Masks536_g170422 , appendResult585_g170422 , Overlay_Mask494_g170422);
				#ifdef TVE_OVERLAY
				float4 staticSwitch586_g170422 = lerpResult584_g170422;
				#else
				float4 staticSwitch586_g170422 = Visual_Masks536_g170422;
				#endif
				half4 Final_Masks482_g170422 = staticSwitch586_g170422;
				float4 In_Shader3_g170425 = Final_Masks482_g170422;
				float4 In_Emissive3_g170425 = Out_Emissive4_g170423;
				float temp_output_739_12_g170422 = Out_Grayscale4_g170423;
				float In_Grayscale3_g170425 = temp_output_739_12_g170422;
				float In_Luminosity3_g170425 = temp_output_739_15_g170422;
				float In_MultiMask3_g170425 = Out_MultiMask4_g170423;
				float In_AlphaClip3_g170425 = Out_AlphaClip4_g170423;
				float In_AlphaFade3_g170425 = Out_AlphaFade4_g170423;
				float3 In_Translucency3_g170425 = Out_Translucency4_g170423;
				half Visual_Transmission699_g170422 = Out_Transmission4_g170423;
				float lerpResult746_g170422 = lerp( Visual_Transmission699_g170422 , ( Visual_Transmission699_g170422 * _OverlaySubsurfaceValue ) , ( Overlay_VertMask801_g170422 * Overlay_MaskNoise427_g170422 * Overlay_MaskGlobal429_g170422 ));
				#ifdef TVE_OVERLAY
				float staticSwitch703_g170422 = lerpResult746_g170422;
				#else
				float staticSwitch703_g170422 = Visual_Transmission699_g170422;
				#endif
				half Final_Transmission702_g170422 = staticSwitch703_g170422;
				float In_Transmission3_g170425 = Final_Transmission702_g170422;
				float In_Thickness3_g170425 = Out_Thickness4_g170423;
				float In_Diffusion3_g170425 = Out_Diffusion4_g170423;
				Data3_g170425.Dummy = In_Dummy3_g170425;
				Data3_g170425.Albedo = In_Albedo3_g170425;
				Data3_g170425.NormalTS = In_NormalTS3_g170425;
				Data3_g170425.NormalWS = In_NormalWS3_g170425;
				Data3_g170425.Shader = In_Shader3_g170425;
				Data3_g170425.Emissive= In_Emissive3_g170425;
				Data3_g170425.MultiMask = In_MultiMask3_g170425;
				Data3_g170425.Grayscale = In_Grayscale3_g170425;
				Data3_g170425.Luminosity = In_Luminosity3_g170425;
				Data3_g170425.AlphaClip = In_AlphaClip3_g170425;
				Data3_g170425.AlphaFade = In_AlphaFade3_g170425;
				Data3_g170425.Translucency = In_Translucency3_g170425;
				Data3_g170425.Transmission = In_Transmission3_g170425;
				Data3_g170425.Thickness = In_Thickness3_g170425;
				Data3_g170425.Diffusion = In_Diffusion3_g170425;
				TVEVisualData Data4_g170471 = Data3_g170425;
				float Out_Dummy4_g170471 = 0;
				float3 Out_Albedo4_g170471 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170471 = float2( 0,0 );
				float3 Out_NormalWS4_g170471 = float3( 0,0,0 );
				float4 Out_Shader4_g170471 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170471 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170471 = 0;
				float Out_Grayscale4_g170471 = 0;
				float Out_Luminosity4_g170471 = 0;
				float Out_AlphaClip4_g170471 = 0;
				float Out_AlphaFade4_g170471 = 0;
				float3 Out_Translucency4_g170471 = float3( 0,0,0 );
				float Out_Transmission4_g170471 = 0;
				float Out_Thickness4_g170471 = 0;
				float Out_Diffusion4_g170471 = 0;
				Out_Dummy4_g170471 = Data4_g170471.Dummy;
				Out_Albedo4_g170471 = Data4_g170471.Albedo;
				Out_NormalTS4_g170471 = Data4_g170471.NormalTS;
				Out_NormalWS4_g170471 = Data4_g170471.NormalWS;
				Out_Shader4_g170471 = Data4_g170471.Shader;
				Out_Emissive4_g170471= Data4_g170471.Emissive;
				Out_MultiMask4_g170471 = Data4_g170471.MultiMask;
				Out_Grayscale4_g170471 = Data4_g170471.Grayscale;
				Out_Luminosity4_g170471= Data4_g170471.Luminosity;
				Out_AlphaClip4_g170471 = Data4_g170471.AlphaClip;
				Out_AlphaFade4_g170471 = Data4_g170471.AlphaFade;
				Out_Translucency4_g170471 = Data4_g170471.Translucency;
				Out_Transmission4_g170471 = Data4_g170471.Transmission;
				Out_Thickness4_g170471 = Data4_g170471.Thickness;
				Out_Diffusion4_g170471 = Data4_g170471.Diffusion;
				float3 temp_output_297_0_g170460 = Out_Albedo4_g170471;
				float3 In_Albedo3_g170472 = temp_output_297_0_g170460;
				float2 In_NormalTS3_g170472 = Out_NormalTS4_g170471;
				float3 In_NormalWS3_g170472 = Out_NormalWS4_g170471;
				float4 In_Shader3_g170472 = Out_Shader4_g170471;
				float4 temp_cast_6 = (0.0).xxxx;
				half4 Visual_Emissive255_g170460 = Out_Emissive4_g170471;
				TVEModelData Data15_g170461 = Data16_g156906;
				float Out_Dummy15_g170461 = 0;
				float3 Out_PositionOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionWO15_g170461 = float3( 0,0,0 );
				float3 Out_PositionRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_PositionAddOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotOS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWS15_g170461 = float3( 0,0,0 );
				float3 Out_PivotWO15_g170461 = float3( 0,0,0 );
				float3 Out_NormalOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalWS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawOS15_g170461 = float3( 0,0,0 );
				float3 Out_NormalRawWS15_g170461 = float3( 0,0,0 );
				float4 Out_TangentOS15_g170461 = float4( 0,0,0,0 );
				float3 Out_ViewDirWS15_g170461 = float3( 0,0,0 );
				float4 Out_VertexData15_g170461 = float4( 0,0,0,0 );
				float4 Out_MotionData15_g170461 = float4( 0,0,0,0 );
				float4 Out_BoundsData15_g170461 = float4( 0,0,0,0 );
				float4 Out_RotationData15_g170461 = float4( 0,0,0,0 );
				Out_Dummy15_g170461 = Data15_g170461.Dummy;
				Out_PositionOS15_g170461 = Data15_g170461.PositionOS;
				Out_PositionWS15_g170461 = Data15_g170461.PositionWS;
				Out_PositionWO15_g170461 = Data15_g170461.PositionWO;
				Out_PositionRawOS15_g170461 = Data15_g170461.PositionRawOS;
				Out_PositionAddOS15_g170461 = Data15_g170461.PositionAddOS;
				Out_PivotOS15_g170461 = Data15_g170461.PivotOS;
				Out_PivotWS15_g170461 = Data15_g170461.PivotWS;
				Out_PivotWO15_g170461 = Data15_g170461.PivotWO;
				Out_NormalOS15_g170461 = Data15_g170461.NormalOS;
				Out_NormalWS15_g170461 = Data15_g170461.NormalWS;
				Out_NormalRawOS15_g170461 = Data15_g170461.NormalRawOS;
				Out_NormalRawWS15_g170461 = Data15_g170461.NormalRawWS;
				Out_TangentOS15_g170461 = Data15_g170461.TangentOS;
				Out_ViewDirWS15_g170461 = Data15_g170461.ViewDirWS;
				Out_VertexData15_g170461 = Data15_g170461.VertexData;
				Out_MotionData15_g170461 = Data15_g170461.MotionData;
				Out_BoundsData15_g170461 = Data15_g170461.BoundsData;
				Out_RotationData15_g170461 = Data15_g170461.RotationData;
				half4 Model_VertexMasks216_g170460 = Out_VertexData15_g170461;
				float4 break251_g170460 = Model_VertexMasks216_g170460;
				float4 break33_g170465 = _emissive_vert_mode;
				float temp_output_30_0_g170465 = ( break251_g170460.x * break33_g170465.x );
				float temp_output_29_0_g170465 = ( break251_g170460.y * break33_g170465.y );
				float temp_output_31_0_g170465 = ( break251_g170460.z * break33_g170465.z );
				float temp_output_28_0_g170465 = ( temp_output_30_0_g170465 + temp_output_29_0_g170465 + temp_output_31_0_g170465 + ( break251_g170460.w * break33_g170465.w ) );
				float clampResult17_g170464 = clamp( temp_output_28_0_g170465 , 0.0001 , 0.9999 );
				float temp_output_7_0_g170468 = _EmissiveMeshRemap.x;
				float temp_output_10_0_g170468 = ( _EmissiveMeshRemap.y - temp_output_7_0_g170468 );
				float lerpResult303_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170464 - temp_output_7_0_g170468 ) / ( temp_output_10_0_g170468 + 0.0001 ) ) ) , _EmissiveMeshValue);
				float temp_output_6_0_g170474 = lerpResult303_g170460;
				#ifdef TVE_REGISTER
				float staticSwitch14_g170474 = ( temp_output_6_0_g170474 + ( _EmissiveMeshMode * 0.0 ) );
				#else
				float staticSwitch14_g170474 = temp_output_6_0_g170474;
				#endif
				float temp_output_263_0_g170460 = staticSwitch14_g170474;
				half Emissive_MeshMask221_g170460 = temp_output_263_0_g170460;
				TEXTURE2D(Texture276_g170463) = _EmissiveMaskTex;
				SamplerState Sampler276_g170463 = sampler_Linear_Repeat;
				float4 temp_output_6_0_g170469 = _emissive_coord_value;
				#ifdef TVE_REGISTER
				float4 staticSwitch14_g170469 = ( temp_output_6_0_g170469 + ( ( _EmissiveSampleMode + _EmissiveCoordMode + _EmissiveCoordValue ) * float4( 0,0,0,0 ) ) );
				#else
				float4 staticSwitch14_g170469 = temp_output_6_0_g170469;
				#endif
				half4 Emissive_Coords167_g170460 = staticSwitch14_g170469;
				float4 temp_output_37_0_g170463 = Emissive_Coords167_g170460;
				half4 Coords276_g170463 = temp_output_37_0_g170463;
				half2 TexCoord276_g170463 = packedInput.ase_texcoord7.xy;
				half4 localSampleMain276_g170463 = SampleMain( Texture276_g170463 , Sampler276_g170463 , Coords276_g170463 , TexCoord276_g170463 );
				TEXTURE2D(Texture275_g170463) = _EmissiveMaskTex;
				SamplerState Sampler275_g170463 = sampler_Linear_Repeat;
				half4 Coords275_g170463 = temp_output_37_0_g170463;
				half2 TexCoord275_g170463 = packedInput.uv2.xy;
				half4 localSampleExtra275_g170463 = SampleExtra( Texture275_g170463 , Sampler275_g170463 , Coords275_g170463 , TexCoord275_g170463 );
				#if defined( TVE_EMISSIVE_SAMPLE_MAIN_UV )
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#elif defined( TVE_EMISSIVE_SAMPLE_EXTRA_UV )
				float4 staticSwitch176_g170460 = localSampleExtra275_g170463;
				#else
				float4 staticSwitch176_g170460 = localSampleMain276_g170463;
				#endif
				half4 Emissive_MaskTex201_g170460 = staticSwitch176_g170460;
				float clampResult17_g170467 = clamp( (Emissive_MaskTex201_g170460).x , 0.0001 , 0.9999 );
				float temp_output_7_0_g170466 = _EmissiveMaskRemap.x;
				float temp_output_10_0_g170466 = ( _EmissiveMaskRemap.y - temp_output_7_0_g170466 );
				float lerpResult302_g170460 = lerp( 1.0 , saturate( ( ( clampResult17_g170467 - temp_output_7_0_g170466 ) / ( temp_output_10_0_g170466 + 0.0001 ) ) ) , _EmissiveMaskValue);
				half Emissive_Mask103_g170460 = lerpResult302_g170460;
				float temp_output_279_0_g170460 = ( Emissive_MeshMask221_g170460 * Emissive_Mask103_g170460 );
				float3 appendResult293_g170460 = (float3(temp_output_279_0_g170460 , temp_output_279_0_g170460 , temp_output_279_0_g170460));
				half3 Local_EmissiveColor278_g170460 = appendResult293_g170460;
				float3 temp_cast_7 = (1.0).xxx;
				TVEGlobalData Data15_g170462 = Data204_g157340;
				float Out_Dummy15_g170462 = 0;
				float4 Out_CoatParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170462 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170462 = float4( 0,0,0,0 );
				Out_Dummy15_g170462 = Data15_g170462.Dummy;
				Out_CoatParams15_g170462 = Data15_g170462.CoatParams;
				Out_PaintParams15_g170462 = Data15_g170462.PaintParams;
				Out_GlowParams15_g170462 = Data15_g170462.GlowParams;
				Out_AtmoParams15_g170462= Data15_g170462.AtmoParams;
				Out_FadeParams15_g170462= Data15_g170462.FadeParams;
				Out_FormParams15_g170462 = Data15_g170462.FormParams;
				Out_LandParams15_g170462 = Data15_g170462.LandParams;
				Out_WindParams15_g170462 = Data15_g170462.WindParams;
				Out_PushParams15_g170462 = Data15_g170462.PushParams;
				half4 Global_GlowParams179_g170460 = Out_GlowParams15_g170462;
				float3 lerpResult299_g170460 = lerp( float3( 1,1,1 ) , (Global_GlowParams179_g170460).xyz , TVE_IsEnabled);
				#ifdef TVE_EMISSIVE_ELEMENT
				float3 staticSwitch228_g170460 = lerpResult299_g170460;
				#else
				float3 staticSwitch228_g170460 = temp_cast_7;
				#endif
				half3 Emissive_GlobalMask248_g170460 = staticSwitch228_g170460;
				half3 Local_EmissiveValue88_g170460 = ( _EmissiveIntensityValue * (_EmissiveColor).rgb * Emissive_GlobalMask248_g170460 );
				half3 Emissive_Blend260_g170460 = ( ( (Visual_Emissive255_g170460).xyz * Local_EmissiveColor278_g170460 ) * Local_EmissiveValue88_g170460 );
				float3 temp_output_3_0_g170470 = Emissive_Blend260_g170460;
				float temp_output_15_0_g170470 = _emissive_power_value;
				float3 hdEmission22_g170470 = ASEGetEmissionHDRColor(temp_output_3_0_g170470,temp_output_15_0_g170470,_EmissiveExposureValue,GetInverseCurrentExposureMultiplier());
				float4 appendResult295_g170460 = (float4(hdEmission22_g170470 , Emissive_Mask103_g170460));
				#ifdef TVE_EMISSIVE
				float4 staticSwitch129_g170460 = appendResult295_g170460;
				#else
				float4 staticSwitch129_g170460 = temp_cast_6;
				#endif
				half4 Final_Emissive184_g170460 = staticSwitch129_g170460;
				float4 In_Emissive3_g170472 = Final_Emissive184_g170460;
				float In_Grayscale3_g170472 = Out_Grayscale4_g170471;
				float In_Luminosity3_g170472 = Out_Luminosity4_g170471;
				float temp_output_297_11_g170460 = Out_MultiMask4_g170471;
				float In_MultiMask3_g170472 = temp_output_297_11_g170460;
				float In_AlphaClip3_g170472 = Out_AlphaClip4_g170471;
				float In_AlphaFade3_g170472 = Out_AlphaFade4_g170471;
				float3 In_Translucency3_g170472 = Out_Translucency4_g170471;
				float In_Transmission3_g170472 = Out_Transmission4_g170471;
				float In_Thickness3_g170472 = Out_Thickness4_g170471;
				float In_Diffusion3_g170472 = Out_Diffusion4_g170471;
				Data3_g170472.Dummy = In_Dummy3_g170472;
				Data3_g170472.Albedo = In_Albedo3_g170472;
				Data3_g170472.NormalTS = In_NormalTS3_g170472;
				Data3_g170472.NormalWS = In_NormalWS3_g170472;
				Data3_g170472.Shader = In_Shader3_g170472;
				Data3_g170472.Emissive= In_Emissive3_g170472;
				Data3_g170472.MultiMask = In_MultiMask3_g170472;
				Data3_g170472.Grayscale = In_Grayscale3_g170472;
				Data3_g170472.Luminosity = In_Luminosity3_g170472;
				Data3_g170472.AlphaClip = In_AlphaClip3_g170472;
				Data3_g170472.AlphaFade = In_AlphaFade3_g170472;
				Data3_g170472.Translucency = In_Translucency3_g170472;
				Data3_g170472.Transmission = In_Transmission3_g170472;
				Data3_g170472.Thickness = In_Thickness3_g170472;
				Data3_g170472.Diffusion = In_Diffusion3_g170472;
				TVEVisualData Data4_g170496 = Data3_g170472;
				float Out_Dummy4_g170496 = 0;
				float3 Out_Albedo4_g170496 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170496 = float2( 0,0 );
				float3 Out_NormalWS4_g170496 = float3( 0,0,0 );
				float4 Out_Shader4_g170496 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170496 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170496 = 0;
				float Out_Grayscale4_g170496 = 0;
				float Out_Luminosity4_g170496 = 0;
				float Out_AlphaClip4_g170496 = 0;
				float Out_AlphaFade4_g170496 = 0;
				float3 Out_Translucency4_g170496 = float3( 0,0,0 );
				float Out_Transmission4_g170496 = 0;
				float Out_Thickness4_g170496 = 0;
				float Out_Diffusion4_g170496 = 0;
				Out_Dummy4_g170496 = Data4_g170496.Dummy;
				Out_Albedo4_g170496 = Data4_g170496.Albedo;
				Out_NormalTS4_g170496 = Data4_g170496.NormalTS;
				Out_NormalWS4_g170496 = Data4_g170496.NormalWS;
				Out_Shader4_g170496 = Data4_g170496.Shader;
				Out_Emissive4_g170496= Data4_g170496.Emissive;
				Out_MultiMask4_g170496 = Data4_g170496.MultiMask;
				Out_Grayscale4_g170496 = Data4_g170496.Grayscale;
				Out_Luminosity4_g170496= Data4_g170496.Luminosity;
				Out_AlphaClip4_g170496 = Data4_g170496.AlphaClip;
				Out_AlphaFade4_g170496 = Data4_g170496.AlphaFade;
				Out_Translucency4_g170496 = Data4_g170496.Translucency;
				Out_Transmission4_g170496 = Data4_g170496.Transmission;
				Out_Thickness4_g170496 = Data4_g170496.Thickness;
				Out_Diffusion4_g170496 = Data4_g170496.Diffusion;
				half3 Visual_Albedo199_g170495 = Out_Albedo4_g170496;
				half3 Final_Albedo312_g170495 = Visual_Albedo199_g170495;
				float3 In_Albedo3_g170497 = Final_Albedo312_g170495;
				float2 In_NormalTS3_g170497 = Out_NormalTS4_g170496;
				float3 In_NormalWS3_g170497 = Out_NormalWS4_g170496;
				float4 In_Shader3_g170497 = Out_Shader4_g170496;
				float4 In_Emissive3_g170497 = Out_Emissive4_g170496;
				float In_Grayscale3_g170497 = Out_Grayscale4_g170496;
				float In_Luminosity3_g170497 = Out_Luminosity4_g170496;
				float temp_output_301_11_g170495 = Out_MultiMask4_g170496;
				float In_MultiMask3_g170497 = temp_output_301_11_g170495;
				float In_AlphaClip3_g170497 = Out_AlphaClip4_g170496;
				float In_AlphaFade3_g170497 = Out_AlphaFade4_g170496;
				float3 temp_cast_8 = (0.0).xxx;
				half3 Subsurface_Color264_g170495 = ( (_SubsurfaceColor).rgb * Visual_Albedo199_g170495 );
				half Visual_Transmission138_g170495 = Out_Transmission4_g170496;
				half Subsurface_Value268_g170495 = _SubsurfaceIntensityValue;
				TVEGlobalData Data15_g170499 = Data204_g157340;
				float Out_Dummy15_g170499 = 0;
				float4 Out_CoatParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PaintParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_GlowParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_AtmoParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FadeParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_FormParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_LandParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_WindParams15_g170499 = float4( 0,0,0,0 );
				float4 Out_PushParams15_g170499 = float4( 0,0,0,0 );
				Out_Dummy15_g170499 = Data15_g170499.Dummy;
				Out_CoatParams15_g170499 = Data15_g170499.CoatParams;
				Out_PaintParams15_g170499 = Data15_g170499.PaintParams;
				Out_GlowParams15_g170499 = Data15_g170499.GlowParams;
				Out_AtmoParams15_g170499= Data15_g170499.AtmoParams;
				Out_FadeParams15_g170499= Data15_g170499.FadeParams;
				Out_FormParams15_g170499 = Data15_g170499.FormParams;
				Out_LandParams15_g170499 = Data15_g170499.LandParams;
				Out_WindParams15_g170499 = Data15_g170499.WindParams;
				Out_PushParams15_g170499 = Data15_g170499.PushParams;
				half4 Global_GlowParams373_g170495 = Out_GlowParams15_g170499;
				float lerpResult403_g170495 = lerp( 1.0 , saturate( (Global_GlowParams373_g170495).w ) , TVE_IsEnabled);
				#ifdef TVE_SUBSURFACE_ELEMENT
				float staticSwitch367_g170495 = lerpResult403_g170495;
				#else
				float staticSwitch367_g170495 = 1.0;
				#endif
				half Subsurface_GlobalMask369_g170495 = staticSwitch367_g170495;
				half Visual_MultiMask292_g170495 = temp_output_301_11_g170495;
				float lerpResult293_g170495 = lerp( 1.0 , Visual_MultiMask292_g170495 , _SubsurfaceMultiValue);
				half Subsurface_MultiMask296_g170495 = lerpResult293_g170495;
				half Custom_Mask363_g170495 = 1.0;
				#ifdef TVE_SUBSURFACE
				float staticSwitch345_g170495 = ( Visual_Transmission138_g170495 * Subsurface_Value268_g170495 * Subsurface_GlobalMask369_g170495 * Subsurface_MultiMask296_g170495 * Custom_Mask363_g170495 );
				#else
				float staticSwitch345_g170495 = 0.0;
				#endif
				half Final_Transmission269_g170495 = staticSwitch345_g170495;
				#ifdef TVE_SUBSURFACE
				float3 staticSwitch348_g170495 = ( Subsurface_Color264_g170495 * Final_Transmission269_g170495 * 10.0 );
				#else
				float3 staticSwitch348_g170495 = temp_cast_8;
				#endif
				half3 Final_Translucency254_g170495 = staticSwitch348_g170495;
				float3 In_Translucency3_g170497 = Final_Translucency254_g170495;
				float In_Transmission3_g170497 = Final_Transmission269_g170495;
				#ifdef TVE_SUBSURFACE
				float staticSwitch351_g170495 = _SubsurfaceThicknessValue;
				#else
				float staticSwitch351_g170495 = 1.0;
				#endif
				half Final_Thickness275_g170495 = staticSwitch351_g170495;
				float In_Thickness3_g170497 = Final_Thickness275_g170495;
				float Final_Diffusion340_g170495 = _SubsurfaceDiffusion;
				float In_Diffusion3_g170497 = Final_Diffusion340_g170495;
				Data3_g170497.Dummy = In_Dummy3_g170497;
				Data3_g170497.Albedo = In_Albedo3_g170497;
				Data3_g170497.NormalTS = In_NormalTS3_g170497;
				Data3_g170497.NormalWS = In_NormalWS3_g170497;
				Data3_g170497.Shader = In_Shader3_g170497;
				Data3_g170497.Emissive= In_Emissive3_g170497;
				Data3_g170497.MultiMask = In_MultiMask3_g170497;
				Data3_g170497.Grayscale = In_Grayscale3_g170497;
				Data3_g170497.Luminosity = In_Luminosity3_g170497;
				Data3_g170497.AlphaClip = In_AlphaClip3_g170497;
				Data3_g170497.AlphaFade = In_AlphaFade3_g170497;
				Data3_g170497.Translucency = In_Translucency3_g170497;
				Data3_g170497.Transmission = In_Transmission3_g170497;
				Data3_g170497.Thickness = In_Thickness3_g170497;
				Data3_g170497.Diffusion = In_Diffusion3_g170497;
				TVEVisualData Data4_g170508 = Data3_g170497;
				float Out_Dummy4_g170508 = 0;
				float3 Out_Albedo4_g170508 = float3( 0,0,0 );
				float2 Out_NormalTS4_g170508 = float2( 0,0 );
				float3 Out_NormalWS4_g170508 = float3( 0,0,0 );
				float4 Out_Shader4_g170508 = float4( 0,0,0,0 );
				float4 Out_Emissive4_g170508 = float4( 0,0,0,0 );
				float Out_MultiMask4_g170508 = 0;
				float Out_Grayscale4_g170508 = 0;
				float Out_Luminosity4_g170508 = 0;
				float Out_AlphaClip4_g170508 = 0;
				float Out_AlphaFade4_g170508 = 0;
				float3 Out_Translucency4_g170508 = float3( 0,0,0 );
				float Out_Transmission4_g170508 = 0;
				float Out_Thickness4_g170508 = 0;
				float Out_Diffusion4_g170508 = 0;
				Out_Dummy4_g170508 = Data4_g170508.Dummy;
				Out_Albedo4_g170508 = Data4_g170508.Albedo;
				Out_NormalTS4_g170508 = Data4_g170508.NormalTS;
				Out_NormalWS4_g170508 = Data4_g170508.NormalWS;
				Out_Shader4_g170508 = Data4_g170508.Shader;
				Out_Emissive4_g170508= Data4_g170508.Emissive;
				Out_MultiMask4_g170508 = Data4_g170508.MultiMask;
				Out_Grayscale4_g170508 = Data4_g170508.Grayscale;
				Out_Luminosity4_g170508= Data4_g170508.Luminosity;
				Out_AlphaClip4_g170508 = Data4_g170508.AlphaClip;
				Out_AlphaFade4_g170508 = Data4_g170508.AlphaFade;
				Out_Translucency4_g170508 = Data4_g170508.Translucency;
				Out_Transmission4_g170508 = Data4_g170508.Transmission;
				Out_Thickness4_g170508 = Data4_g170508.Thickness;
				Out_Diffusion4_g170508 = Data4_g170508.Diffusion;
				float temp_output_3_0_g170509 = Out_AlphaClip4_g170508;
				float Alpha19_g170509 = temp_output_3_0_g170509;
				float temp_output_15_0_g170509 = 0.0;
				float Treshold19_g170509 = temp_output_15_0_g170509;
				#if defined (TVE_ALPHA_CLIP) || defined (TVE_CUTOUT) || defined (TVE_DITHER)
				#if defined ( TVE_PIPELINE_HD)
				#if !defined(SHADERPASS_FORWARD_BYPASS_ALPHA_TEST) && !defined(SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST)
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#else
				clip(Alpha19_g170509 - Treshold19_g170509);
				#endif
				#endif
				
				surfaceDescription.Alpha = saturate( ( Alpha19_g170509 * Out_AlphaFade4_g170508 ) );

				#ifdef _ALPHATEST_ON
				surfaceDescription.AlphaClipThreshold =  _AlphaCutoff;
				#endif

				outColor = _SelectionID;
			}

            ENDHLSL
		}

        Pass
        {

            Name "FullScreenDebug"
            Tags 
			{ 
				"LightMode" = "FullScreenDebug" 
            }

            Cull [_CullMode]
			ZTest LEqual
			ZWrite Off

            HLSLPROGRAM
            /*ase_pragma_before*/
            #pragma multi_compile _ DOTS_INSTANCING_ON

			#pragma vertex Vert
			#pragma fragment Frag

            #pragma shader_feature _ _SURFACE_TYPE_TRANSPARENT
            #pragma shader_feature_local _ _TRANSPARENT_WRITES_MOTION_VEC
            #pragma shader_feature_local_fragment _ _ENABLE_FOG_ON_TRANSPARENT

			#define SHADERPASS SHADERPASS_FULL_SCREEN_DEBUG

			#define ATTRIBUTES_NEED_NORMAL
			#define ATTRIBUTES_NEED_TANGENT

			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/GeometricTools.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Tessellation.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Texture.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/TextureStack.hlsl"
            #include "Packages/com.unity.shadergraph/ShaderGraphLibrary/Functions.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/FragInputs.hlsl"

			#ifndef SHADER_UNLIT
			#if defined(_DOUBLESIDED_ON) && !defined(VARYINGS_NEED_CULLFACE)
			#define VARYINGS_NEED_CULLFACE
			#endif
			#endif

		    #if defined(_MATERIAL_FEATURE_SUBSURFACE_SCATTERING) && !defined(_SURFACE_TYPE_TRANSPARENT)
		    #define OUTPUT_SPLIT_LIGHTING
		    #endif

            #if (SHADERPASS == SHADERPASS_PATH_TRACING) && !defined(_DOUBLESIDED_ON) && (defined(_REFRACTION_PLANE) || defined(_REFRACTION_SPHERE))
            #undef  _REFRACTION_PLANE
            #undef  _REFRACTION_SPHERE
            #define _REFRACTION_THIN
            #endif

			#if SHADERPASS == SHADERPASS_TRANSPARENT_DEPTH_PREPASS
			#if !defined(_DISABLE_SSR_TRANSPARENT) && !defined(SHADER_UNLIT)
				#define WRITE_NORMAL_BUFFER
			#endif
			#endif

			#ifndef DEBUG_DISPLAY
				#if !defined(_SURFACE_TYPE_TRANSPARENT)
					#if SHADERPASS == SHADERPASS_FORWARD
					#define SHADERPASS_FORWARD_BYPASS_ALPHA_TEST
					#elif SHADERPASS == SHADERPASS_GBUFFER
					#define SHADERPASS_GBUFFER_BYPASS_ALPHA_TEST
					#endif
				#endif
			#endif

            #if defined(SHADER_LIT) && !defined(_SURFACE_TYPE_TRANSPARENT)
                #define _DEFERRED_CAPABLE_MATERIAL
            #endif
        
            #if defined(_TRANSPARENT_WRITES_MOTION_VEC) && defined(_SURFACE_TYPE_TRANSPARENT)
                #define _WRITE_TRANSPARENT_MOTION_VECTOR
            #endif

            #ifdef DEBUG_DISPLAY
            #include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
            #endif

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
			#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/NormalSurfaceGradient.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Lit/Lit.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/BuiltinUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/MaterialUtilities.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderGraphFunctions.hlsl"

            struct AttributesMesh
			{
				float3 positionOS : POSITION;
				float3 normalOS : NORMAL;
				float4 tangentOS : TANGENT;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : INSTANCEID_SEMANTIC;
				#endif
			};

			struct VaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

			struct VertexDescriptionInputs
			{
				 float3 ObjectSpaceNormal;
				 float3 ObjectSpaceTangent;
				 float3 ObjectSpacePosition;
			};

			struct SurfaceDescriptionInputs
			{
				 float3 TangentSpaceNormal;
			};

			struct PackedVaryingsMeshToPS
			{
				SV_POSITION_QUALIFIERS float4 positionCS : SV_POSITION;
				#if UNITY_ANY_INSTANCING_ENABLED
					uint instanceID : CUSTOM_INSTANCE_ID;
				#endif
			};

            PackedVaryingsMeshToPS PackVaryingsMeshToPS (VaryingsMeshToPS input)
			{
				PackedVaryingsMeshToPS output;
				ZERO_INITIALIZE(PackedVaryingsMeshToPS, output);
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

			VaryingsMeshToPS UnpackVaryingsMeshToPS (PackedVaryingsMeshToPS input)
			{
				VaryingsMeshToPS output;
				output.positionCS = input.positionCS;
				#if UNITY_ANY_INSTANCING_ENABLED
				output.instanceID = input.instanceID;
				#endif
				return output;
			}

            struct VertexDescription
			{
				float3 Position;
				float3 Normal;
				float3 Tangent;
			};

			VertexDescription VertexDescriptionFunction(VertexDescriptionInputs IN)
			{
				VertexDescription description = (VertexDescription)0;
				description.Position = IN.ObjectSpacePosition;
				description.Normal = IN.ObjectSpaceNormal;
				description.Tangent = IN.ObjectSpaceTangent;
				return description;
			}

            struct SurfaceDescription
			{
				float3 BaseColor;
				float3 Emission;
				float Alpha;
				float3 BentNormal;
				float Smoothness;
				float Occlusion;
				float3 NormalTS;
				float Metallic;
			};

			SurfaceDescription SurfaceDescriptionFunction(SurfaceDescriptionInputs IN)
			{
				SurfaceDescription surface = (SurfaceDescription)0;
				surface.BaseColor = IsGammaSpace() ? float3(0.5, 0.5, 0.5) : SRGBToLinear(float3(0.5, 0.5, 0.5));
				surface.Emission = float3(0, 0, 0);
				surface.Alpha = 1;
				surface.BentNormal = IN.TangentSpaceNormal;
				surface.Smoothness = 0.5;
				surface.Occlusion = 1;
				surface.NormalTS = IN.TangentSpaceNormal;
				surface.Metallic = 0;
				return surface;
			}

			VertexDescriptionInputs AttributesMeshToVertexDescriptionInputs(AttributesMesh input)
			{
				VertexDescriptionInputs output;
				ZERO_INITIALIZE(VertexDescriptionInputs, output);

				output.ObjectSpaceNormal =                          input.normalOS;
				output.ObjectSpaceTangent =                         input.tangentOS.xyz;
				output.ObjectSpacePosition =                        input.positionOS;

				return output;
			}

			AttributesMesh ApplyMeshModification(AttributesMesh input, float3 timeParameters  )
			{
				VertexDescriptionInputs vertexDescriptionInputs = AttributesMeshToVertexDescriptionInputs(input);

				VertexDescription vertexDescription = VertexDescriptionFunction(vertexDescriptionInputs);

				input.positionOS = vertexDescription.Position;
				input.normalOS = vertexDescription.Normal;
				input.tangentOS.xyz = vertexDescription.Tangent;
				return input;
			}

			FragInputs BuildFragInputs(VaryingsMeshToPS input)
			{
				FragInputs output;
				ZERO_INITIALIZE(FragInputs, output);

				output.tangentToWorld = k_identity3x3;
				output.positionSS = input.positionCS; // input.positionCS is SV_Position

				return output;
			}

			FragInputs UnpackVaryingsMeshToFragInputs(PackedVaryingsMeshToPS input)
			{
				UNITY_SETUP_INSTANCE_ID(input);
				VaryingsMeshToPS unpacked = UnpackVaryingsMeshToPS(input);
				return BuildFragInputs(unpacked);
			}

			#define DEBUG_DISPLAY
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/DebugDisplay.hlsl"
			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Debug/FullScreenDebug.hlsl"

			#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/VertMesh.hlsl"

			PackedVaryingsType Vert(AttributesMesh inputMesh)
			{
				VaryingsType varyingsType;
				varyingsType.vmesh = VertMesh(inputMesh);
				return PackVaryingsType(varyingsType);
			}

			#if !defined(_DEPTHOFFSET_ON)
			[earlydepthstencil]
			#endif
			void Frag(PackedVaryingsToPS packedInput)
			{
				UNITY_SETUP_STEREO_EYE_INDEX_POST_VERTEX(packedInput);
				FragInputs input = UnpackVaryingsToFragInputs(packedInput);

				PositionInputs posInput = GetPositionInput(input.positionSS.xy, _ScreenSize.zw, input.positionSS.z, input.positionSS.w, input.positionRWS.xyz);

			#ifdef PLATFORM_SUPPORTS_PRIMITIVE_ID_IN_PIXEL_SHADER
				if (_DebugFullScreenMode == FULLSCREENDEBUGMODE_QUAD_OVERDRAW)
				{
					IncrementQuadOverdrawCounter(posInput.positionSS.xy, input.primitiveID);
				}
			#endif
			}
            ENDHLSL
        }
		
	}
	
	CustomEditor "TVEShaderGUILite"
	
	Fallback Off
}
/*ASEBEGIN
Version=19603
Node;AmplifyShaderEditor.FunctionNode;2403;-11776,-256;Inherit;False;Block Model;46;;156892;7ad7765e793a6714babedee0033c36e9;14,289,1,240,1,290,1,291,1,181,0,183,0,185,0,188,0,190,0,184,0,192,0,189,0,300,0,193,0;10;102;FLOAT3;0,0,0;False;163;FLOAT3;0,0,0;False;186;FLOAT3;0,0,0;False;187;FLOAT3;0,0,0;False;166;FLOAT3;0,0,0;False;164;FLOAT3;0,0,0;False;301;FLOAT3;0,0,0;False;167;FLOAT4;0,0,0,0;False;172;FLOAT4;0,0,0,0;False;175;FLOAT4;0,0,0,0;False;2;OBJECT;128;OBJECT;314
Node;AmplifyShaderEditor.RegisterLocalVarNode;2404;-11456,-256;Half;False;Model Vert;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2405;-11008,-256;Inherit;False;2404;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2406;-9984,-256;Inherit;False;2404;Model Vert;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2407;-10752,-256;Inherit;False;Block Lite Global;55;;157340;3cde0aa66f3d8ec4a9b80a215a26f02b;16,315,0,311,0,317,0,321,0,319,0,323,0,337,1,283,0,285,0,282,0,308,0,276,0,349,0,287,0,289,1,348,1;1;206;OBJECT;0,0,0,0;False;1;OBJECT;151
Node;AmplifyShaderEditor.RegisterLocalVarNode;2408;-11456,-192;Half;False;Model Frag;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2409;-9728,-256;Inherit;False;Block Pivots Sub;-1;;157405;186f08b1bbe15894d9c677d50398679b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;2410;-6400,-256;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2411;-10432,-256;Half;False;Global Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2412;-9344,-256;Inherit;False;Block Lite Motion;467;;170256;d8687cf5f6a8faa449e82fd2b678fe12;0;2;146;OBJECT;0,0,0,0;False;212;OBJECT;0,0,0,0;False;2;OBJECT;128;FLOAT;1862
Node;AmplifyShaderEditor.GetLocalVarNode;2413;-6144,-128;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2414;-6144,-64;Inherit;False;2411;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2415;-6144,-256;Inherit;False;Block Main;96;;170313;b04cfed9a7b4c0841afdb49a38c282c5;5,65,1,136,1,41,1,133,1,40,1;1;225;OBJECT;0,0,0,0;False;1;OBJECT;106
Node;AmplifyShaderEditor.RegisterLocalVarNode;2416;-8896,-128;Half;False;Wave Mask;-1;True;1;0;FLOAT;0;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2417;-5760,-128;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2418;-5760,-64;Inherit;False;2411;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2419;-5760,-256;Inherit;False;Block Layer;122;;170331;5f6a6b9e0b5515744bf8e48a9ccead1b;7,986,1,1008,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;974;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.GetLocalVarNode;2420;-7424,-256;Inherit;False;2416;Wave Mask;1;0;OBJECT;;False;1;FLOAT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2421;-5376,-128;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2422;-5376,-256;Inherit;False;Block Detail;169;;170365;a5b52fdec7b855a4fba859a90e837892;7,990,1,1013,0,709,1,726,1,748,1,747,1,746,1;3;585;OBJECT;0,0,0,0;False;633;OBJECT;0,0,0,0;False;971;OBJECT;0,0,0,0;False;1;OBJECT;552
Node;AmplifyShaderEditor.FunctionNode;2423;-7168,-256;Inherit;False;Block Interp;-1;;170398;e2b225f9519c0194eaa2c47b94bb1bbc;0;4;19;FLOAT;0;False;20;FLOAT;0;False;21;FLOAT;0;False;22;FLOAT;0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;2424;-4992,-128;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2425;-4992,-256;Inherit;False;Block Occlusion;214;;170399;ec16733ec52362048954a75640fbe560;1,210,1;2;144;OBJECT;0,0,0,0;False;204;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.RegisterLocalVarNode;2426;-6848,-256;Half;False;Interp Data;-1;True;1;0;FLOAT4;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.FunctionNode;2427;-4608,-256;Inherit;False;Block Gradient;226;;170409;1f0cb348753541648acbe7a6adce694e;1,228,1;2;144;OBJECT;0,0,0,0;False;222;OBJECT;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;2428;-4608,-128;Inherit;False;2426;Interp Data;1;0;OBJECT;;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;2429;-4224,-64;Inherit;False;2411;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2430;-4224,-256;Inherit;False;Block Highlight;0;;170419;20f1f2e205564b848b07c7637cbf0686;0;2;144;OBJECT;0,0,0,0;False;212;FLOAT4;0,0,0,0;False;1;OBJECT;116
Node;AmplifyShaderEditor.GetLocalVarNode;2431;-4224,-128;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2432;-3840,-64;Inherit;False;2411;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2433;-3840,-128;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2434;-3840,-256;Inherit;False;Block Lite Overlay;306;;170422;df6d6bbf01172a34387d93d862d3d156;9,821,1,819,1,813,1,908,1,826,1,823,1,828,1,844,0,447,0;4;572;OBJECT;0,0,0,0;False;596;OBJECT;0,0,0,0;False;600;OBJECT;0,0,0,0;False;445;FLOAT;1;False;1;OBJECT;566
Node;AmplifyShaderEditor.FunctionNode;2435;-8960,-256;Inherit;False;Block Transform;-1;;170452;5ac6202bdddd8b34a85c261af6b8de8b;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.GetLocalVarNode;2436;-3456,-64;Inherit;False;2411;Global Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.FunctionNode;2438;-3456,-256;Inherit;False;Block Emissive;406;;170460;64497f287b9096b43b688b52b4a0bf20;5,282,0,273,1,275,1,264,1,267,1;3;146;OBJECT;0,0,0,0;False;148;OBJECT;0,0,0,0;False;178;OBJECT;0,0,0,0;False;1;OBJECT;183
Node;AmplifyShaderEditor.FunctionNode;2439;-8576,-256;Inherit;False;Block Lite Normal;529;;170475;d07450326a8fd9045b27c2ea55f72353;1,1681,1;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;2345;-1920,-64;Inherit;False;Block Lite Wetness;353;;170484;30361f2d9d7742e4db0b62746ed1affc;3,850,1,877,1,873,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2347;-1920,64;Inherit;False;Block Lite Dithering;390;;170485;6e52cef07120daa408f9658182b29574;3,847,1,848,1,855,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2348;-1920,128;Inherit;False;Block Lite Perspective;449;;170486;d4a92d6e6eef32d4f945d10292650e0c;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;2349;-1920,192;Inherit;False;Block Lite Size Fade;456;;170487;828b7cb552f180f4193fb67dbaaae0ce;0;0;1;COLOR;128
Node;AmplifyShaderEditor.FunctionNode;2342;-1920,-256;Inherit;False;Block Lite Variation;239;;170488;3df1ad26aa7a397488e4d172ec7355ef;0;0;1;COLOR;116
Node;AmplifyShaderEditor.FunctionNode;2358;-1920,-192;Inherit;False;Block Lite Tinting;251;;170489;c2bee839afbcbb7499ebde2af2a2b317;3,352,1,377,0,375,1;0;1;COLOR;204
Node;AmplifyShaderEditor.FunctionNode;2359;-1920,-128;Inherit;False;Block Lite Dryness;277;;170490;d0ad841a44e589843b633cc1b97af190;3,398,1,440,0,438,1;0;1;COLOR;346
Node;AmplifyShaderEditor.FunctionNode;2360;-1920,0;Inherit;False;Block Lite Cutout;373;;170491;0780bee94024ab547ae8bb1fac250cb1;2,775,1,824,1;0;1;COLOR;566
Node;AmplifyShaderEditor.FunctionNode;2441;-8192,-256;Inherit;False;Block Pivots Add;-1;;170492;016babe9e3e643242aa4d123a988150c;0;1;146;OBJECT;0,0,0,0;False;1;OBJECT;128
Node;AmplifyShaderEditor.FunctionNode;2440;-3072,-256;Inherit;False;Block Subsurface;430;;170495;d738d295ada6b1f409db6776b5efe789;3,315,0,359,1,362,0;4;146;OBJECT;0,0,0,0;False;385;OBJECT;0,0,0,0;False;371;OBJECT;0,0,0,0;False;361;FLOAT;1;False;1;OBJECT;183
Node;AmplifyShaderEditor.SimpleAddOpNode;2261;-1536,-256;Inherit;False;8;8;0;COLOR;0,0,0,0;False;1;COLOR;0,0,0,0;False;2;COLOR;0,0,0,0;False;3;COLOR;0,0,0,0;False;4;COLOR;0,0,0,0;False;5;COLOR;0,0,0,0;False;6;COLOR;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2442;-2752,-256;Half;False;Visual Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2443;-7872,-256;Half;False;Model Data;-1;True;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.RegisterLocalVarNode;2262;-1344,-256;Half;False;Dummy Data;-1;True;1;0;COLOR;0,0,0,0;False;1;COLOR;0
Node;AmplifyShaderEditor.GetLocalVarNode;2234;-640,-256;Inherit;False;2442;Visual Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2233;-640,-192;Inherit;False;2443;Model Data;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.GetLocalVarNode;2265;-384,320;Inherit;False;2262;Dummy Data;1;0;OBJECT;;False;1;COLOR;0
Node;AmplifyShaderEditor.FunctionNode;2383;-384,-256;Inherit;False;Block Render;2;;170502;a46c8f81ec84cc34b8c5bbba7c174e1d;0;2;17;OBJECT;;False;19;OBJECT;;False;20;FLOAT3;21;FLOAT3;22;FLOAT3;34;FLOAT3;77;FLOAT;26;FLOAT;27;FLOAT;108;FLOAT;109;FLOAT;72;FLOAT;28;FLOAT;71;FLOAT3;65;FLOAT;66;FLOAT;67;FLOAT;68;FLOAT;73;FLOAT3;37;FLOAT3;30;FLOAT3;32;FLOAT4;33
Node;AmplifyShaderEditor.RangedFloatNode;2235;-464,-640;Half;False;Property;_render_src;_render_src;546;1;[HideInInspector];Create;True;0;0;0;True;0;False;5;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2236;-640,-640;Half;False;Property;_render_cull;_render_cull;545;1;[HideInInspector];Create;True;0;3;Both;0;Back;1;Front;2;0;True;0;False;0;2;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2237;-288,-640;Half;False;Property;_render_dst;_render_dst;547;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;10;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2238;-112,-640;Half;False;Property;_render_zw;_render_zw;548;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2239;64,-640;Half;False;Property;_render_coverage;_render_coverage;549;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;0;0;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2241;-192,-768;Half;False;Property;_IsLiteShader;_IsLiteShader;550;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2384;-416,-768;Half;False;Property;_IsSubsurfaceShader;_IsSubsurfaceShader;552;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.RangedFloatNode;2386;-640,-768;Half;False;Property;_IsGeneralShader;_IsGeneralShader;551;1;[HideInInspector];Create;True;0;2;Opaque;0;Transparent;1;0;True;0;False;1;1;0;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;2240;384,-640;Inherit;False;Base Compile;-1;;170517;e67c8238031dbf04ab79a5d4d63d1b4f;0;0;1;FLOAT;0
Node;AmplifyShaderEditor.FunctionNode;2264;0,256;Inherit;False;Register;-1;;170518;673534ff3248b7442a6471d786096f1f;0;2;6;FLOAT4;0,0,0,0;False;7;COLOR;0,0,0,0;False;1;FLOAT4;0
Node;AmplifyShaderEditor.GetLocalVarNode;2437;-3456,-128;Inherit;False;2408;Model Frag;1;0;OBJECT;;False;1;OBJECT;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2388;384,-256;Float;False;True;-1;2;TVEShaderGUILite;0;21;BOXOPHOBIC/The Visual Engine/Geometry/General Subsurface Lit (Lite);28cd5599e02859647ae1798e4fcaef6c;True;GBuffer;0;0;GBuffer;34;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;9;d3d11;metal;vulkan;xboxone;xboxseries;playstation;ps4;ps5;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;True;True;True;True;0;True;_LightLayersMaskBuffer4;False;False;False;False;False;False;False;True;True;0;True;_StencilRefGBuffer;255;False;;255;True;_StencilWriteMaskGBuffer;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;False;True;0;True;_ZTestGBuffer;False;True;1;LightMode=GBuffer;False;False;0;;0;0;Standard;38;Surface Type;0;0;  Rendering Pass;1;0;  Refraction Model;0;0;    Blending Mode;0;0;    Blend Preserves Specular;1;0;  Back Then Front Rendering;0;0;  Transparent Depth Prepass;0;0;  Transparent Depth Postpass;0;0;  ZWrite;0;0;  Z Test;4;0;Double-Sided;0;0;Alpha Clipping;0;0;  Use Shadow Threshold;0;0;Material Type,InvertActionOnDeselection;5;638504305627740058;  Energy Conserving Specular;1;0;  Transmission,InvertActionOnDeselection;0;0;Receive Decals;1;0;Receive SSR;1;0;Receive SSR Transparent;0;0;Motion Vectors;1;0;  Add Precomputed Velocity;0;0;Specular AA;0;0;Specular Occlusion Mode;1;0;Override Baked GI;0;0;Depth Offset;0;0;  Conserative;1;0;GPU Instancing;1;0;LOD CrossFade;1;638504305669308247;Tessellation;0;0;  Phong;0;0;  Strength;0.5,False,;0;  Type;0;0;  Tess;16,False,;0;  Min;10,False,;0;  Max;25,False,;0;  Edge Length;16,False,;0;  Max Displacement;25,False,;0;Vertex Position;0;638504305679490410;0;11;True;True;True;True;True;True;False;False;False;True;True;False;;True;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2389;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;META;0;1;META;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=Meta;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2390;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ShadowCaster;0;2;ShadowCaster;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;True;3;False;;False;True;1;LightMode=ShadowCaster;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2391;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;SceneSelectionPass;0;3;SceneSelectionPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;1;LightMode=SceneSelectionPass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2392;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;DepthOnly;0;4;DepthOnly;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=DepthOnly;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2393;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;MotionVectors;0;5;MotionVectors;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefMV;255;False;;255;True;_StencilWriteMaskMV;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=MotionVectors;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2394;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentBackface;0;6;TransparentBackface;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;False;False;True;0;True;_ZWrite;True;0;True;_ZTestTransparent;False;True;1;LightMode=TransparentBackface;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2395;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPrepass;0;7;TransparentDepthPrepass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;True;True;0;True;_StencilRefDepth;255;False;;255;True;_StencilWriteMaskDepth;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPrepass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2396;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;TransparentDepthPostpass;0;8;TransparentDepthPostpass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;True;1;1;False;;0;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;True;False;False;False;False;0;False;;False;False;False;False;False;False;False;False;False;True;1;False;;False;False;True;1;LightMode=TransparentDepthPostpass;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2397;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;Forward;0;9;Forward;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;True;2;5;False;;10;False;;0;1;False;;0;False;;False;False;False;False;False;False;False;False;False;True;0;True;_CullModeForward;False;False;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelOne;False;True;True;True;True;True;0;True;_ColorMaskTransparentVelTwo;False;False;False;True;True;0;True;_StencilRef;255;False;;255;True;_StencilWriteMask;7;False;;3;False;;0;False;;0;False;;7;False;;3;False;;0;False;;0;False;;False;True;0;True;_ZWrite;True;0;True;_ZTestDepthEqualForOpaque;False;True;1;LightMode=Forward;False;False;0;;0;0;Standard;0;False;0
Node;AmplifyShaderEditor.TemplateMultiPassMasterNode;2398;0,-256;Float;False;False;-1;2;Rendering.HighDefinition.LightingShaderGraphGUI;0;1;New Amplify Shader;28cd5599e02859647ae1798e4fcaef6c;True;ScenePickingPass;0;10;ScenePickingPass;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;3;RenderPipeline=HDRenderPipeline;RenderType=Opaque=RenderType;Queue=Geometry=Queue=0;True;5;True;7;d3d11;metal;vulkan;xboxone;xboxseries;playstation;switch;0;False;False;False;False;False;False;False;False;False;False;False;False;False;False;True;0;True;_CullMode;False;False;False;False;False;False;False;False;False;False;False;True;2;False;;True;3;False;;False;True;1;LightMode=Picking;False;False;0;;0;0;Standard;0;False;0
WireConnection;2404;0;2403;128
WireConnection;2407;206;2405;0
WireConnection;2408;0;2403;314
WireConnection;2409;146;2406;0
WireConnection;2411;0;2407;151
WireConnection;2412;146;2409;128
WireConnection;2415;225;2410;0
WireConnection;2416;0;2412;1862
WireConnection;2419;585;2415;106
WireConnection;2419;633;2413;0
WireConnection;2419;974;2414;0
WireConnection;2422;585;2419;552
WireConnection;2422;633;2417;0
WireConnection;2422;971;2418;0
WireConnection;2423;22;2420;0
WireConnection;2425;144;2422;552
WireConnection;2425;204;2421;0
WireConnection;2426;0;2423;0
WireConnection;2427;144;2425;116
WireConnection;2427;222;2424;0
WireConnection;2430;144;2427;116
WireConnection;2430;212;2428;0
WireConnection;2434;572;2430;116
WireConnection;2434;596;2431;0
WireConnection;2434;600;2429;0
WireConnection;2435;146;2412;128
WireConnection;2438;146;2434;566
WireConnection;2438;148;2433;0
WireConnection;2438;178;2432;0
WireConnection;2439;146;2435;128
WireConnection;2441;146;2439;128
WireConnection;2440;146;2438;183
WireConnection;2440;371;2436;0
WireConnection;2261;0;2342;116
WireConnection;2261;1;2358;204
WireConnection;2261;2;2359;346
WireConnection;2261;3;2345;566
WireConnection;2261;4;2360;566
WireConnection;2261;5;2347;566
WireConnection;2261;6;2348;128
WireConnection;2261;7;2349;128
WireConnection;2442;0;2440;183
WireConnection;2443;0;2441;128
WireConnection;2262;0;2261;0
WireConnection;2383;17;2234;0
WireConnection;2383;19;2233;0
WireConnection;2264;6;2383;33
WireConnection;2264;7;2265;0
WireConnection;2388;0;2383;21
WireConnection;2388;1;2383;22
WireConnection;2388;6;2383;34
WireConnection;2388;7;2383;27
WireConnection;2388;8;2383;26
WireConnection;2388;9;2383;28
WireConnection;2388;16;2383;67
WireConnection;2388;61;2383;66
WireConnection;2388;62;2383;68
WireConnection;2388;11;2383;30
WireConnection;2388;12;2383;32
WireConnection;2388;27;2264;0
ASEEND*/
//CHKSM=F3DFD1D5B6C11BF261698C349A0F01EE73C49493